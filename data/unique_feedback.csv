skill,comments,count
Code Elegance,"effective use of object-oriented principles, easy maintainability and reusability.",38
Code Elegance,"methods are reusable and readable, but some code repetition",13
Code Elegance,the design could have been better.,13
Code Elegance,"it is good, though there are little problems here and there.",11
Code Elegance,solid implementation of both core and challenge classes. very appropriate approaches taken.,11
Code Elegance,the code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,11
Code Elegance,the code have a good use of classed and functions and nicely laid out.,10
Code Elegance,appropriate approaches taken for the implementation of the tasks.,9
Code Elegance,"code could be re-used, but more could be done to make it re-usable. code is maintainable.",9
Code Elegance,all the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,7
Code Elegance,the majority of the code is written in such a way that code can be reused,6
Code Elegance,appropriate approaches taken to implementation of both core and challenge classes. very readable.,5
Code Elegance,code can be re-used. code is maintainable.,5
Code Elegance,better than others.,4
Code Elegance,code is written in a reusable manner by utilising abstract classes and loosely coupling components,4
Code Elegance,combines functionality with simplicity,4
Code Elegance,excellent use of classes and functions. efficient code.,4
Code Elegance,"good use of abstraction, and appropriate class hierarchy. could avoid lots of repetition by using private variables in superclasses and implementing getters within them. decent application of qualifiers to class fields and methods.",4
Code Elegance,"high clarity, simplicity, and efficiency.",4
Code Elegance,making it highly readable and understandable,4
Code Elegance,some efforts have been put into this project.,4
Code Elegance,"student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks",4
Code Elegance,the code can be made more extensible by employing abstraction and increasing its modularity.,4
Code Elegance,a lot of code has been repeated through the implementation for each of the animal implementations.  it is more sensible to extract these codes and provide abstract methods to override such behavior.,3
Code Elegance,base and challenge tasks are efficiently implemented and remain perfectly readable and maintanable.,3
Code Elegance,code can be re-used. code is maintainable. excellent use of abstract classes.,3
Code Elegance,code can be re-used. code is maintainable. good use of abstract classes.,3
Code Elegance,"code could make use of abstract classes to improve extensibility and breakdown longer functions into smaller, modular functions",3
Code Elegance,"code is well written. abstractions are appropriately used to make code neat and well structured, and functions are appropriately broke down into well sized units. ",3
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. some functions are very long and should break them down.",3
Code Elegance,"the code follows good object-oriented design patterns, with a logical separation of concerns between classes. the base animal class encapsulates shared functionality. the individual creature classes inherit from animal and define their unique properties and behaviors. constants are used effectively to avoid magic numbers. there are opportunities to further refactor some of the duplicated logic between creature classes.",3
Code Elegance," good modularity, reusability, and encapsulation ",2
Code Elegance, it demonstrates a mastery of coding with clarity and precision.,2
Code Elegance,a good use of classed and functions and nicely laid out.,2
Code Elegance,"abstraction could go further, e.g. some methods within the animal classes could be within the class animal",2
Code Elegance,abstraction present in class structure however this is poorly utilised.,2
Code Elegance,advanced class structure implemented. there are one or two methods which could be-rewritten for generality in higher classes.,2
Code Elegance,all of the base tasks and some of the challenge tasks are implemented in such a way that code can be reused.,2
Code Elegance,basic abstraction class structure however this is well utilised with lots of methods residing in the animal class.,2
Code Elegance,clean separation of concerns across classes.,2
Code Elegance,code is resuseable,2
Code Elegance,concepts of the module well utilised,2
Code Elegance,easy to follow and maintain.,2
Code Elegance,"features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. extensive knowledge of java allows this student to reduce repeated code segments. furthermore, good class design for cohesive classes. ",2
Code Elegance,"good code reusability, some functions are very long; should break them down. ",2
Code Elegance,good level of abstraction,2
Code Elegance,"inheritance is not fully made use of, with a lot of code duplication where not necessary.",2
Code Elegance,"inheritance was used well, but instances of code duplication in the same file could've been reduced.",2
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. some functions are very long; should break them down. ",2
Code Elegance,many features lack flexibility or are implemented in ways that are repeated in every class. these could be extracted to a more generic class such as animal.,2
Code Elegance,many segments could be rewritten to improve re-usability,2
Code Elegance,may be useful to have superclass for preys and predators to better differentiate between them,2
Code Elegance,"methods are reusable and readable, but some code repetition  and class redundancy",2
Code Elegance,"most methods in animal classes are repeatedly defined, so perhaps some sort of inheritance can be included in. there is some misuse of the visibility of methods. also would be quite hard to extend features for different diseases.",2
Code Elegance,no attempt made,2
Code Elegance,not bad for a student. terrible for a professional.,2
Code Elegance,"refreshingly simple and concise, yet effective code. good use of class structures and qualifications. abstractions are clear where they are used and are justified.",2
Code Elegance,"some abstraction present but there remains much more that could be achieved, e.g. more common methods in the animal class.",2
Code Elegance,some levels of abstraction ,2
Code Elegance,the application is implemented in such a way that only a few code segments can be rewritten to increase code re-usability,2
Code Elegance,the application is unnecessarily complex,2
Code Elegance,"the code is broken out into many separate classes for each species and simulation component, enabling decent modularity and reuse. the logic could likely be simplified in places, but overall the design and efficiency are reasonable without overly sacrificing readability.",2
Code Elegance,the code is well written.,2
Code Elegance,"the student demonstrate excellent use of classes and functions to produce reusable and maintainable code, the only downside would be decoupling the weather functionality from the simulator as a separate class.",2
Code Elegance,the submission is the same as the original ,2
Code Elegance,"this code demonstrates a deep understanding of programming principles, with each function perfectly aligned with its purpose.",2
Code Elegance,worse than the example.,2
Code Elegance,your code structure is commendable. the use of inheritance and abstraction to define common behaviors across different species shows advanced programming skills. this approach not only avoids redundancy but also facilitates code maintenance and future expansions.,2
Code Elegance,"a lot of code has been repeated through the implementation for each of the animal implementations.  it is more sensible to extract these codes and provide abstract methods to override such behavior. in addition, some extension features are implemented in ways for which it is hard to extend to add new features.",1
Code Elegance,a lot of code has been repeated through the implementation for each of the animal implementations.  it is more sensible to extract these codes and provide abstract methods to override such behavior..,1
Code Elegance,a lot of rewritten code,1
Code Elegance,a lot of rewritten code not utilizing abstract and  interfaces.,1
Code Elegance,a lot of rewritten code where it could be abstracted further. ,1
Code Elegance,a lot of rewritten code where it could have been generalized in an abstract class,1
Code Elegance,"a lot of rewritten code, could have utilized abstract clsses.",1
Code Elegance,abstract classes could be used to improve extensibility,1
Code Elegance,"abstract classes make code reusable and maintainable. to improve the extensibility of your code, it would be better to implement time in a separate class.",1
Code Elegance,"abstraction could go further, e.g. some methods within the animal classes (e.g. wolf) could be within the class animal",1
Code Elegance,abstraction level could be more advanced,1
Code Elegance,abstraction shown from predator and prey classes generalizes the find food method,1
Code Elegance,"abstraction shown in animal class, find food method is generalized and depends on the specific animal diet.",1
Code Elegance,"abstraction shown with actor class and animal class. however, could have implemented prey and predators to further generalize. a lot of rewritten code, act and find food methods.",1
Code Elegance,"abstraction shown with animal and actor class, animal classes do not use rewritten code and are generalized. created a new class to improve coupling",1
Code Elegance,"abstraction shown with predator and prey classes however, rewritten code with the hunt method in each animal",1
Code Elegance,"act function does too much, should break it down.",1
Code Elegance,"act function does too much, should break it down. excellent code reusability, no repeating code.",1
Code Elegance,"act function is similar for all animals, could of implemented it in the animal class for better code reusability.",1
Code Elegance,"act function is similar for all animals, could of implemented it in the animal class rather than having it as an abstract class for better code reusability.",1
Code Elegance,"act function is similar for all animals, should of implemented it in animal class for better code reusability.",1
Code Elegance,"act function is similar for all animals, should of implemented it in animal class for better code reusability. same goes for findfood function.",1
Code Elegance,"act function is similar for all animals, should of implemented it in the animal class. why is plant and infectableanimal class extending from animal class?",1
Code Elegance,advanced abstraction structure in classes however this could still be better utilised with more methods moved up to animal or organism.,1
Code Elegance,all features are implemented to an excellent standard. the student shows good understanding of encapsulation and inheritance. the addition of an actor class type makes for clean code and the sub-division into predator and prey improves modularity. methods are implemented with good use of single-responsibility. ,1
Code Elegance,"all the base tasks and some of the challenge tasks are implemented in such a way that code can be reused, where possible",1
Code Elegance,"all the common variables of the animals should be enclosed in a superclass, rather than defined individually for every class. 'female' class should be a characteristic of an animal, not a separate class. inside many classes, there are other class instances created that are not required. some methods are empty, this is not a good practice.",1
Code Elegance,all the values that are common for many classes could have been initialised in the superclass and then just assigned. the 'givebirth' method is repeated many times in each class.,1
Code Elegance,"all the values that are common to an animal should have been defined in a superclass rather than instantiated in each class. the code is quite easy to read, but a bit too simplistic.",1
Code Elegance,all the variables that are common to animals should have been enclosed in the superclass and defined through the constructor.,1
Code Elegance,animals and plants extend entity. animals may be abstracted further into 'predator' and 'prey' classes for better extendability.,1
Code Elegance,appropriate approaches taken for the implementation of the tasks however inefficient implementation of the environment interactions causes the simulation to execute very slowly.,1
Code Elegance,appropriate approaches taken for the implementation of the tasks however some methods like the canbreed() function  could benefit from further simplification.,1
Code Elegance,appropriate approaches taken to implementation of both core and challenge classes. classes could be better encapsulated however.,1
Code Elegance,appropriate approaches taken to implementation of both core and challenge classes. quite readable although hard to judge effectiveness of implementation with no simulation.,1
Code Elegance,appropriate approaches taken to implementation of both core and challenge classes. would've been more desirable to give each animal their own file to make it easier to discrimnate between each of their expected behaviours. this would've also allowed for better maintainability.,1
Code Elegance,"attempt to use difficult concepts, but the implementation does not run as required...",1
Code Elegance,attempts have been made to reduce repeated code through abstract classes. not very flexible when it comes to the design of weather and weather-based behavior.,1
Code Elegance,base and challenge tasks are very efficiently implemented and remain perfectly readable and maintanable.,1
Code Elegance,basic abstraction class structure however this is excellently utilised with lots of methods residing in the animal class.,1
Code Elegance,class design and hierarchy is sensical.,1
Code Elegance,class design and hierarchy is sensical. smart choice on making manager classes.,1
Code Elegance,class design and hierarchy is sensical. some shared variables can be put into the superclass.,1
Code Elegance,class design is sensical. a lot of copied and pasted code.,1
Code Elegance,class hierarchy allows addition of more organisms. food chain class does not seem the best approach. the food chain should be able to be implied from the class hierarchy.,1
Code Elegance,class hierarchy and design is sensical.,1
Code Elegance,class hierarchy is good and supports extension. non final variables should not be capitalised.,1
Code Elegance,class hierarchy is logical. some seemingly copied and pasted code. logic for each animal type should not be programmed in its superclass.,1
Code Elegance,class hierarchy is sensible. minimal code redundancy.,1
Code Elegance,class hierarchy is sensical and allows for extension. images could be stored in a separate folder to clean folder structure.,1
Code Elegance,class hierarchy is sensical and designed well.,1
Code Elegance,class hierarchy is sensical and uses it well.,1
Code Elegance,"class hierarchy is sensical, but does not use inheritance features to its fullest extent. a lot of copied and pasted code.",1
Code Elegance,class hierarchy is sensical. some copied and pasted code. some questionable code design (why is foodsource instantiated each time getfoodsource is called?).,1
Code Elegance,class hierarchy logic is questionable. why does plant extend animal? findfood method can be generalised better.,1
Code Elegance,class hierarchy makes sense. final variables that require adjustment should not be kept in a class. they should be kept in the relevant method.,1
Code Elegance,class hierarchy works well. a lot of variables are not clear for what they are used for. animal stats are an enum in animal. reason for this is unclear.,1
Code Elegance,class structure and design generally good. some shared variables could be moved to the super class. some further abstractions can be made to move even more shared variables (e.g. distinction between predator and prey.),1
Code Elegance,class structure and design is well-meaning. ,1
Code Elegance,class structure is basic and poorly utilised. much of the code could be written for the animal class instead of being duplicated for each animal.,1
Code Elegance,classes and functions are reusable and maintainable,1
Code Elegance,classes are cohesive and loosely coupled and code makes use of abstraction,1
Code Elegance,classes structure lacks abstraction.,1
Code Elegance,classes were created in different increments and there is a difference of design between them.,1
Code Elegance,clean code standards could be followed. ,1
Code Elegance,clever use of the concepts used during the course,1
Code Elegance,code can be re-used. code is maintainable. excellent use of abstract classes and use of csv for animals. gui elements built in modular manner onto of simulator.,1
Code Elegance,code can be re-used. code is maintainable. excellent use of abstract classes for predators/prey.,1
Code Elegance,code can be re-used. code is maintainable. excellent use of abstract classes. good use of enum for weather.,1
Code Elegance,code can be re-used. code is maintainable. good use of abstract classes and enums.,1
Code Elegance,code can be re-used. code is maintainable. good use of abstract classes for predators/prey but plant implemented as animal.,1
Code Elegance,code can be re-used. code is maintainable. good use of abstract classes for predators/prey.,1
Code Elegance,code can be re-used. code is maintainable. good use of abstract classes. some improvements could be made to make code more re-usable (such as disease in plant class rather then grass.),1
Code Elegance,code can be re-used. code is maintainable. good use of abstract classes. weather implementation is inefficient.,1
Code Elegance,"code can be re-used. code is maintainable. plant not implemented separately, inhibits re-use.",1
Code Elegance,code can be re-used. code is semi-maintainable. abstract classes used but pointless. separate class for each weather inefficient.,1
Code Elegance,code could make use of abstract classes to improve extensibility,1
Code Elegance,code generally well implemented. some design decisions should be reconsidered. some methods show low cohesion.,1
Code Elegance,code has been rewritten where it does not need to be.,1
Code Elegance,code is elegant but seems to be the same as the default submission.,1
Code Elegance,code is generally implemented well. some inconsistent design decisions. some methods have low cohesion (e.g. incrementage also determines if an animal dies),1
Code Elegance,"code is generally quite clean. certain aspects of the program may be over-abstracted; for example, the existence of the simulatable class isn't entirely justified, nor does it make complete sense - everything in your simulation is inherently simulatable. that class seems to be better fitted to describing an organism rather than any simulatable object. similarly, locatable (which is semantically better defined with an interface rather than a class, if it should even exist) doesn't entirely make sense either. it seems every animal should be locatable anyway, so perhaps animals and other non-animal yet locatable objects should inherit a base class providing these aspects. you have some dead code included also.",1
Code Elegance,code is maintainable and extendable with good use of abstract classes,1
Code Elegance,code is maintainable with good use of abstract classes,1
Code Elegance,"code is relatively clean, but there is some disorienting logic, particularly how you are deciding what animals to simulate. is the generation probability being 0 not enough to not simulate an being?",1
Code Elegance,"code is semi-re-usable/maintainable. however, plants implementation as an animal causes problems.",1
Code Elegance,code is well structured and allows for easy extension. animal food values are better stored in the animal themself.,1
Code Elegance,code is written in a reusable manner,1
Code Elegance,code is written in a reusable manner by using abstract classes,1
Code Elegance,code is written in a reusable manner by using abstract classes and loosely coupling components,1
Code Elegance,code is written in a way that is readable and extensible with the use of abstract classes,1
Code Elegance,code is written is a way that is readable and extensible.,1
Code Elegance,code reusability can be improved,1
Code Elegance,code segments could be extracted to a parent class. it is hard to extend for other diseases and weather-based behavior ,1
Code Elegance,"code well structured and well designed. concepts of the class used correctly, some challenges implemented",1
Code Elegance,comcpets of the course well utilised. good structure,1
Code Elegance,concepts f the course used wisely,1
Code Elegance,concepts learnt in class well utilised,1
Code Elegance,concepts of the class well utilised,1
Code Elegance,concepts of the course are used wisely.,1
Code Elegance,concepts of the course very well utilised to serve a clean and clever implementation. weel done,1
Code Elegance,concepts of the course well used,1
Code Elegance,concepts of the course well utilised,1
Code Elegance,"contains couple of formatting, naming issues, some methods can be extracted to abstract class or interface, code reusability sacrificed",1
Code Elegance,contains some small format and naming glitches,1
Code Elegance,could be better.,1
Code Elegance,could make use of additional classes for more abstraction - e.g. predator/prey.,1
Code Elegance,"could of created a separate class for disease. repeating code for finding food, could of implemented this in the animal class.",1
Code Elegance,could of implemented the act and give birth functions in animal class rather than each individual animal for better code reusability.,1
Code Elegance,"could utilise additional classes, e.g. predator/prey to provide additional elegance.",1
Code Elegance,"day act and night act functions are very similar for all animals, should of implemented it in the animal class for better code reusability.",1
Code Elegance,"did not utilize abstraction and interfaces, a lot of rewritten code.",1
Code Elegance,"did not utilize abstraction and interfaces, some rewritten code.",1
Code Elegance,each function is perfectly aligned with its purpose.,1
Code Elegance,easy to read but mistake in localisation,1
Code Elegance,effective use of functional programming concepts.,1
Code Elegance,efficient and clever use of the concepts taught in class to create an original answer to the problem. well done.,1
Code Elegance,"empty class, mistake in the simulation creation ",1
Code Elegance,"examples of abstraction shown, animals implement entities class. eagle extends avian animal showing even further abstraction and less rewritten code",1
Code Elegance,"excellent structure, however there is scope to further utilise this by moving common features to more asbtract classes.",1
Code Elegance,excellent use of abstract classes and i like the use of enums. the code is implemented with good maintainability and modularity. good effort has been made to appropriately hide complexity. ,1
Code Elegance,"excellent use of abstraction with predator type classes, consumable class, etc.",1
Code Elegance,excellent use of classes,1
Code Elegance,excellent use of classes and functions but the code is incomplete,1
Code Elegance,excellent use of classes and functions to make re-usable and maintainable code.,1
Code Elegance,"excellent use of classes and functions, code is modular, reusable and maintainable.",1
Code Elegance,excellent use of classes and functions. efficient code. good use of abstraction.,1
Code Elegance,excellent use of classes and inheritance to organize the code in a maintainable way. species-specific logic is encapsulated in subclasses that inherit shared behavior from abstract base classes. methods are focused and cohesive. the genetic algorithm in the builder class is a creative approach to tuning the simulation parameters.,1
Code Elegance,"features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. furthermore, good class design for cohesive classes.",1
Code Elegance,"features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. however, it is not easy to add new weather or diseases to the environment.",1
Code Elegance,features are implemented in ways in which it is maximally reusable through the use of inheritance and polymorphism of classes.,1
Code Elegance,"format, naming issues + does not satisfy clean code principles ",1
Code Elegance,"generally correct organisation of code but there is a lot of repetition, for example, you have implemented identical getters and setters for identical variables in the class. you can use a private (but not final) variable for the breeding_age, max_age, etc, variables in its superclass with no setter such that it is only defined in the constructor, and you don't need to reimplement getters every time.",1
Code Elegance,generally good and sensical class design. ,1
Code Elegance,generally good class design and hierarchy.,1
Code Elegance,generally good class design and hierarchy. further abstractions can be made between prey and predator.,1
Code Elegance,generally good class design and hierarchy. some child variables can be moved to the superclass.,1
Code Elegance,generally good class design and sensical hierarchy. some child class methods can be moved to the super class.,1
Code Elegance,generally good class design and structure. more shared variables could be put inside the relevant superclass. a lot of commented out code. some misuse of variable access.,1
Code Elegance,generally good class design.,1
Code Elegance,generally good class structure and design.,1
Code Elegance,"generally good class structure. class design could be better, as a lot of shared variables and methods should have been moved to the superclass.",1
Code Elegance,generally good code structure and design. further abstraction can be made between animal types so that more variables can be shared.,1
Code Elegance,"generally good use of classes. however, some more work will be needed to reduce repeated code segments in animal classes, such as their behavior. it is hard to extend the program for more sophisticated extension features such as time, diseases, and weather.",1
Code Elegance,generally little repeated code exists in projects other than the breeding function. design choices have led to difficulty in extending the function.,1
Code Elegance,"generally okay use of classes. however some more work will be needed to reduce repeated code in animal classes, such as their behaviour. ",1
Code Elegance,"generally okay use of classes. however, some more work will be needed to reduce repeated code in animal classes, such as their behaviour. ",1
Code Elegance,"generally okay use of classes. however, some more work will be needed to reduce repeated code segments in animal classes, such as their behavior. ",1
Code Elegance,"generally okay use of classes. however, some more work will be needed to reduce repeated code segments in animal classes, such as their behaviour. ",1
Code Elegance,"generally okay use of classes. however, some more work will be needed to reduce repeated codes in animal classes, such as their behavior. this results in code a little cluttered and hard to extend for new features for plants.",1
Code Elegance,"generally okay use of classes. however, some more work will be needed to reduce repeated codes in animal classes, such as their behavior. this results in code a little cluttered and hard to extend for new features. also it is hard to add new weather and diseases.",1
Code Elegance,"generally okay use of classes. however, some more work will be needed to reduce repeated codes in animal classes, such as their behavior. this results in code a little cluttered and hard to extend for new features. also, it is hard to add new weather and diseases.",1
Code Elegance,"generally, quite good inheritance is used for the disease class for clarity and reusability. animal classes can be further reduced using inheritance.",1
Code Elegance,"generally, some repeated code segments exist in projects. design choices have led to difficulty in extending the function.",1
Code Elegance,"generally, this student attempts to reuse code segments through the use of inheritance and polymorphism. only minor repetitive code segments are created due to class design choice.",1
Code Elegance,"give birth function has similar structure in each animal, should of implemented it in the animal class.",1
Code Elegance,"good abstraction level, code is not rewritten and a lot of generalization",1
Code Elegance,good attempt at reducing the repeated code through the use of abstract classes. can be even craftier at producing offspring for each of the animal classes. also it seems illogical to use class names to provide linkage for predator and prey.,1
Code Elegance,good code practice. class design is sensible.,1
Code Elegance,good code reusability,1
Code Elegance,"good code reusability, some functions are very long; should break them down. could of split up animals to predator and pray class to improve code elegance.",1
Code Elegance,good implementation of the notions learnt in class,1
Code Elegance,"good level of abstraction, code is not rewritten and generalized very well",1
Code Elegance,"good understanding of the java language utilising abstract classes and having the animal class extend organism. however, no abstraction made for predators and preys, they all fall under the animal class. ",1
Code Elegance,good usage of organism abstract class. animals extend prey or predator class which allows for code to not be rewritten,1
Code Elegance,good use of abstract classes for predators and preys. weather could be implemented in separate class,1
Code Elegance,good use of abstract classes however the implementation is a little cumbersome and causes slow running of the program.,1
Code Elegance,good use of abstract classes to capture animal behaviour. could go further in this regard.,1
Code Elegance,good use of abstraction,1
Code Elegance,good use of the classes notions,1
Code Elegance,good use of the concepts of the class,1
Code Elegance,"good use of the learnt notions, challenges well implemented",1
Code Elegance,"good use of the notion in class, sone challenges successfully implemented",1
Code Elegance,good use of the notions learnt during the module,1
Code Elegance,good use of the notions taught in class,1
Code Elegance,good use of the noton learnt in class,1
Code Elegance,"great code reusability, no repeating code. however some functions are long and do more than 1 thing.",1
Code Elegance,"great level of abstraction, code is not reused with the animal, predator and prey classes. usage of constants class ",1
Code Elegance,"great structure, concepts learned well utilised",1
Code Elegance,"great use of abstract classes, code is not rewritten",1
Code Elegance,great use of abstraction and interfaces. code is split nicely into packages.,1
Code Elegance,"great use of abstraction, code is not rewritten for each animal due to predator and prey classes however, canbreed() function could be abstracted even further to animal class.",1
Code Elegance,"great use of all notion of the class, well done",1
Code Elegance,"great use of classes and functions to make re-usable and maintainable code, but could be further improved.",1
Code Elegance,great use of the concepts taught during the module to serve your project,1
Code Elegance,"has formatting issues, a lot of places that can be improved through separate methods instead of writing long lines and if statements, copy/paste issues in documentation, super keyword can be used for readability, consist of duplications",1
Code Elegance,"if statements in act methods of animals, could replace with polymorphism",1
Code Elegance,"it is not usually a good practice to return null in a method. the animals created are not part of different classes, they are just creations in the simulation. the code written is not very elegant as it is hard to find all the required elements.",1
Code Elegance,it is okay but could be better.,1
Code Elegance,it is overly complex and has lots of segregation,1
Code Elegance,"lots of code duplications, good level of abstraction could be used",1
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. some functions are very long and should break them down. ",1
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. some functions are very long and should break them down. no need for sex class.",1
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. some functions are very long and should break them down. some not useful classes.",1
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. some functions are very long and should break them down. very poor code optimisation which is why the simulation is running slow.",1
Code Elegance,"lots of repeated code, could have implemented the act functions in the animal class, same goes for givebirth and findfood. you have fox, male fox and female fox class which is not good coding. some functions are very long; should break them down. ",1
Code Elegance,"lots of repeated code, could have implemented the findfood and find-airs functions in the animal class. some functions are very long and should break them down.",1
Code Elegance,"lots of repeated code, could of implemented the act functions in the animal class for better reusability.",1
Code Elegance,"lots of repeated code, could of implemented the act functions in the animal class, same goes for givebirth and findfood",1
Code Elegance,"lots of reusable code, no repetition",1
Code Elegance,"many characteristics of a specific species should have been instantiated in the superclass rather than each subclass. the 'deadbody' class is not required - this should be just a variable in a superclass of the species. this happens the same for the 'undead'. 'reproduction' should not be an interface, this should have been designed as a variable.",1
Code Elegance,"many characteristics of an animal are instantiated in the same class, even though they could have been instantiated in the superclass. long methods should have been split into more different methods.",1
Code Elegance,many variables are common between multiple classes and they are defined in each of the subclasses instead of the superclass.,1
Code Elegance,"methods are reusable and readable, but few code repetition",1
Code Elegance,"more thoughtful than others, but it does not improve elegance (if i am honest, it only makes things worse). however, this is the inherent problem from the example, which should not be a reason to punish our students.",1
Code Elegance,"most methods in animal classes are repeatedly defined, so perhaps some sort of inheritance can be included in. the predator and prey classes to increase reusability.",1
Code Elegance,mostly appropriate class hierarchy and abstractions are applied. it would be worth considering that semantically it makes less sense for an organism's food value to be determined by the predator rather than a specific food value assigned to a prey. besides that code is clean and concise. there is a quite a bit of repetition. it seems there are many configuration variables shared across different animals/organisms that are constantly redeclared and reexplained.,1
Code Elegance,"mostly appropriate use of oop techniques, unsure about the necessity of the gender class. it seems more semantically intact for gender to be an attribute of any entity rather than an entity in itself. class hierarchy should aim to replicate the domain hierarchy, else you are designing less of an object-oriented system and more of an arbitrarily designed set of data types.",1
Code Elegance,mostly solid implementation although a few hacky lines exist throughout reducing readability and maintainability.,1
Code Elegance,nice use of lifeform class to encapsulate repeated use of code. good use of environment class to encapsulate information of field.,1
Code Elegance,no changes were made to the default code provided.,1
Code Elegance,no changes were made to the default code provided. same code as the default files provided. no changes were made.,1
Code Elegance,no code,1
Code Elegance,no java source files were included in the submission - only java files and so the code cannot be compiled,1
Code Elegance,no modifications have been made to the original code distributed to students as part of the assignment. ,1
Code Elegance,"no need to separate animal into two genders in two different files, this should be handled within the animal class itself. otherwise the implementation is reasonable.",1
Code Elegance,no need to separate sex into it's own class this should be handled within the animal class itself. otherwise the implementation is reasonable.,1
Code Elegance,no submission,1
Code Elegance,no usage of abstract classes or interfaces. a lot of rewritten code. ,1
Code Elegance,"no usage of abstraction other than animal class, a lot of rewritten code. ",1
Code Elegance,"no use of predator and prey classes, a lot of rewritten code",1
Code Elegance,not abstract classes have abstract methods. code not split into many methods makes it not reusable. every animal has characteristics that it should not have in their superclass.,1
Code Elegance,"overall a lot of code segment seems to be repetitive and can be extracted through methods. for example, adding new children or hunting food can be extracted into generic methods in a parent class.",1
Code Elegance,"overall code elegance is good. the readability of the code is high. the modularity of the codebase could be improved: for example, dividing animal classes into predator/prey sub-types. there are, however, other examples of good extendability in the codebase: such as the fieldstats class.",1
Code Elegance,overall design of the implementation could be improved for reusability of methods ,1
Code Elegance,overall good attempt at using parent class to reduce repeated code. ,1
Code Elegance,overall good attempt at using parent class to reduce repeated code. excellent use of classes to segregate responsibiliities in program.,1
Code Elegance,"overall good attempt at using parent class to reduce repeated code. however, coupling to the simulator class might be inappropriate as it contains lots of logic.",1
Code Elegance,overall nice use of inheritance to reduce repeated code. code seems to be extensible without much sacrifice of readability.,1
Code Elegance,perfect use of the notion of the course and great creativity work to create a unique simulation. very good job,1
Code Elegance,"poor code reusability. act functions are similar so should of implemented that in the animal class, why do you need a new class for each animal and animal class.",1
Code Elegance,predator class is a useful way of representing the predator/prey relations in the simulation. ,1
Code Elegance,program shows good opportunity for extendability. handful of methods have low cohesion.,1
Code Elegance,relatively clean,1
Code Elegance,"scope for additional use of structures (classes, etc.) to make code more elegant, e.g. representation of predator/prey relations.",1
Code Elegance,"scope for additional use of structures (classes, etc.) to make code more elegant.",1
Code Elegance,sections of code can be reduced by extracting it to a more abstract class and can also be broken down into more abstract methods for more animal-specific behavior. ,1
Code Elegance,separate class for weather could be used and superclass for predators and prey may be helpful to better differentiate between entities.,1
Code Elegance,single function which could be moved up the inheritance tree.,1
Code Elegance,"smart coding, reusable functions. no repeating code",1
Code Elegance,some abstractions are messy - probability need not be an enum,1
Code Elegance,some attempt to reduce repeated code segments through abstract classes. however many segments of repeated code still exist.,1
Code Elegance,"some code are heavily repeated, perhaps a use for parent class can be more applicable",1
Code Elegance,"some codes are repeated, such as the switch statement, which can nested in a private method in the parent class and inherited by the animals when breeding not to repeat the same code in different classes.",1
Code Elegance,some comments are redundant or state the obvious. use a shared random instance,1
Code Elegance,"some features are repeated and can be extracted out to a more abstract class. however, some features such as time are extracted out for more cohesion.",1
Code Elegance,"some good use of abstraction however still a lot of rewritten code for example, animals hunting. ",1
Code Elegance,some if-else statements are redundant and classes such as weather could be uncoupled from the simulator by creating a new weather class.,1
Code Elegance,some levels of abstraction,1
Code Elegance,"some levels of abstraction however, a lot of rewritten code where it could be generalised",1
Code Elegance,"some levels of abstraction with the organisms class however, a lot of rewritten code",1
Code Elegance,"some levels of abstraction, good usage of herbivore and carnivore",1
Code Elegance,some of the attributes of the species are defined multiple times in the sublcass rather than in the superclass. some methods should have been defined in the superclass as well. some classes that are not abstract contain abstract methods.,1
Code Elegance,some of the attributes that are common to all animals are defined separately in each instantiation.,1
Code Elegance,some of the attributes that many animals have in common are defined separately in each subclass rather than in the main superclass. the getnewanimal object is not defined only in the superclass.,1
Code Elegance,some of the code is unnecessarily complex or poorly designed.,1
Code Elegance,"some of the constructors are empty, which is not good practice. some variables that are common between many species are part of only the subclass, and not also the superclass. some components that should not be part of the subclass are still instantiated in the incorrect place.",1
Code Elegance,"some of the methods defines outside abstract classes do not have any content. 'plant' class does not have any getter/setter - this is not considered good practice. some of the characteristics of a species are defined for the species itself, rather than for the superclass.",1
Code Elegance,some of the variables that are common between multiple subclasses are defined repeatedly in each subclass instead in their superclass.,1
Code Elegance,"some parts of code does not match single responsibility principle. 
weather should not be responsible for datetimecheck.
rain and sunny implements weather interface but they do day time check. night or day check could be specificly implemented ",1
Code Elegance,"some questionable design choices, like storing food values of a predator's prey in the predator. a lot of reused code.",1
Code Elegance,"some rewritten code, did not utilize abstracted classes and interfaces.",1
Code Elegance,"structured correctly, challenges tried and concepts of the class used",1
Code Elegance,submission only contains original template,1
Code Elegance,submitted template ,1
Code Elegance,super keyword usage in variables,1
Code Elegance,superb use of abstract classes and interfaces. code is very elegant.,1
Code Elegance,superb use of abstract classes. code is very elegant.,1
Code Elegance,"the 'creature' superclass contains multiple elements that are specific to only one sublcass, and not all of them. the species do not have their characteristics defined in their superclass - instead, all of them are repeatedly instantiated in their subclass.",1
Code Elegance,"the 'predator' class, even though it is defined as abstract, ti does contain some methods that are not abstract. there are some characteristics of an animal that should be shared in the superclass, but they are defines in each subclass. this is applied to some methods as well.",1
Code Elegance,"the 'startingclass' is not necessary, it complicates the code. there are some methods that are common between multiple species - instead of being defined in the superclass, they are defined in each subclass. this also applies to the methods. the 'organism' class is abstract even though it does not define any abstract method.",1
Code Elegance,the application is implemented in such a way that many code segments can be rewritten to increase code re-usability.,1
Code Elegance,the application is implemented in such a way that many code segments could be rewritten and some code is unnecessarily complex and poorly designed.,1
Code Elegance,the application is implemented in such a way that only a few code segments can be rewritten to increase code re-usability.,1
Code Elegance,the application is implemented in such a way that only a few code segments could be rewritten to increase re-usability. design concepts such as interface are not clear.,1
Code Elegance,"the application is unnecessarily complex; the application contains many instances where the code could have been written in an easier, faster or better fashion.",1
Code Elegance,the base tasks and challenge tasks are implemented in a way that allows for code reusability where possible. the code is efficient without sacrificing readability. the design choices are appropriate.,1
Code Elegance,the classes and packages are set up in quite a convoluted way to the point where the simulator does not compile. ,1
Code Elegance,the code can be made more extensible by employing abstraction and increasing its modularity of components.,1
Code Elegance,the code can be made more extensible by using abstract classes,1
Code Elegance,"the code demonstrates excellent use of classes and functions to produce reusable and maintainable code. the animaltype enum encapsulates shared characteristics, and the inheritance hierarchy with abstract base classes (animal, predator, prey) promotes code reuse.",1
Code Elegance,"the code demonstrates excellent use of classes and inheritance to create a well-structured simulation. the animal, plant, and watersources abstract classes allow for elegantly sharing common functionality between the different species. methods are used effectively to break the logic into manageable parts. the code is efficient and readable.",1
Code Elegance,"the code demonstrates excellent use of classes and inheritance to create reusable and maintainable code. the actor, animal, and plant abstract classes provide a solid foundation for the various species. the code is well-organized and efficient, with each class having specific responsibilities. minor improvements could be made, such as extracting some common functionality from the individual species classes into the base classes.",1
Code Elegance,"the code demonstrates excellent use of classes and inheritance to create reusable and maintainable code. the base classes (actor, animal, predator, prey) provide shared functionality, while specific classes (shark, sealion, penguin, etc.) implement unique behaviors. the code is well-structured and efficiently handles interactions between animals, plants, weather, and disease. the use of interfaces (disease) and utility classes (randomizer, location) further enhances code organization and reusability.",1
Code Elegance,"the code demonstrates excellent use of classes and inheritance to enable code reuse. for example, the various animal classes extend an abstract animal class. functionality is broken out well into different classes and methods. the code looks quite efficient and readable.",1
Code Elegance,"the code demonstrates good use of classes and functions, producing fairly reusable and maintainable code. inheritance is used effectively with base animal class. the code is readable and understandable without being overly complex.",1
Code Elegance,"the code demonstrates good use of classes and inheritance to represent the different species and their shared characteristics. the animal and plant abstract classes provide a clean separation of common functionality. the code is generally efficient and readable. a few areas could potentially be improved, such as reducing some repetition between similar classes, but overall the code is quite elegant.",1
Code Elegance,"the code demonstrates good use of classes, inheritance (abstract animal and plant classes) and modularization. the config class nicely encapsulates simulation parameters. ",1
Code Elegance,"the code demonstrates very good use of classes and inheritance to produce reusable and maintainable code. abstract base classes like animal, predator and prey allow for shared functionality. the code appears well organized into logical classes and methods.",1
Code Elegance,the code does not utilise abstract classes and consequently a lot of code is being rewritten. ,1
Code Elegance,"the code follows good object-oriented design principles, with a clean separation of concerns between classes. inheritance is used effectively for the animal classes. methods are focused and not overly complex. some code duplication exists that could potentially be refactored.",1
Code Elegance,the code has the potential to be enhanced by employing abstraction and increasing its modularity.,1
Code Elegance,"the code is broken out into separate classes for each animal type, which allows for specialization while inheriting shared behavior from the abstract animal class. this enables code reuse. the logic for animal behaviors like eating, breeding, and aging is mostly encapsulated within each class.",1
Code Elegance,"the code is competently structured with appropriate use of inheritance. further decomposing of classes would be ideal, for example, using a predator and prey class",1
Code Elegance,"the code is competently written, however, further efforts should have been made to improve the modularity of the code. inheritance is used sparingly and the code could benefit from additional class sub-types such as predator/prey. the poor abstraction is highlighted by plant being a sub-type of animal",1
Code Elegance,the code is efficient and makes use of all the characteristics required.,1
Code Elegance,"the code is efficient and the use of classes is well specified. good indentation is present, and the classes are well-stratified.",1
Code Elegance,the code is efficient without sacrificing readability and understanding.,1
Code Elegance,"the code is elegant and the creation of the new abstract class livingbeing demonstrates a thorough understanding. the code is efficient, however, some if-then-else statements are empty.",1
Code Elegance,"the code is elegantly written and it presents many well-designed aspects. however, the values for each animal could be enclosed in the superclass and then instantiated. this might decrease the way the code is elegant.",1
Code Elegance,the code is fairly efficient without sacrificing readability and understanding.,1
Code Elegance,"the code is generally well-structured and modular, with appropriate use of classes, inheritance, and interfaces. the responsibilities are separated among different classes, promoting code reusability. ",1
Code Elegance,"the code is implemented competently however further effort should be made on improving the modularity and extensibility of the code. for example, including a predator/prey sub-type would be a nice addition, and moving common code to animal super-types would improve the code elegance. some classes are too tightly-coupled. for example, the agent classes should control their own behaviours under different time and weather conditions, rather than this being governed by the simulator class",1
Code Elegance,the code is organised very well. the addition of the predator and prey classes improves the encapuslation of common functionality. the specific animal subtypes are simple and clear as a result,1
Code Elegance,"the code is organized into classes representing different entities in a reasonable way. there is some good separation of common behaviors into abstract base classes like actor, animal, predator and prey. constants are used for configuration. but overall the code is fairly readable and understandable.",1
Code Elegance,the code is reasonably well structured with good use of encapsulation and modularity. the code would benefit from adding predator and prey subclasses. the use of the location class is elegant and improves scalability,1
Code Elegance,the code is reasonably well structured with simple use of subtyping and inheritance (for example with the plant subtypes). the animals would benefit with further sub-division such as with a predator and prey subclass. some methods such as the findfood() methods are too large and encapsulate too many functions. these should be divided further. ,1
Code Elegance,the code is structured competently with use of enums and inheritance between classes. introducing a prey and predator subtype could be a good idea for encapsulating common behaviours. ,1
Code Elegance,the code is structured exceptionally with good use of inheritance and encapsulation. abstract classes and methods have been used appropriately and the predator and prey classes help to keep animal sub-types clean and concise,1
Code Elegance,"the code is structured reasonably well, however, some improvements could be made. for example, the weather types should be an enum rather than an int assigned by methods. the common methods for animals should be placed in superclasses such as predator, prey. the plant class should have its own subtype and specific plant instances.",1
Code Elegance,"the code is structured reasonably with separate classes for each species inheriting from an animal superclass. however, there is a lot of duplicated code between species classes that could be refactored into the superclass to improve reusability. the code is readable but some design decisions are questionable, like having so many static constants.",1
Code Elegance,the code is structured very well with a good display of knowledge on encapsulation and inheritance. the student uses abstract classes effectively to further enforce extensibility. ,1
Code Elegance,"the code is structured very well with good consideration for encapsulation and inheritance. the actor and animal classes hold common functionality. the foodchain helper class helps with keeping the code clean and concise. the weather classes are probably unnecessary for this task, however, are not inherently a bad design decision.",1
Code Elegance,the code is structured very well with good demonstration of knowledge on encapsulation and inheritance. the carnivore and herbivore subclasses effectively encapsulate common methods. the specific animal instances are therefore clear and concise.,1
Code Elegance,the code is structured very well with good use of additional superclasses and extensions. the addition of enums improves the code maintainability. ,1
Code Elegance,the code is structured very well with good use of classes and modularisation. the addition of predator and prey classes is good and pushing common methods to superclasses makes for clean and extensible code.,1
Code Elegance,"the code is structured very well with good use of encapsulation and inheritance. the use of enums for gender, etc. is ",1
Code Elegance,the code is structured very well with good use of subtyping and inheritance. the use of a predator and prey subtype helps to keep the code clean.,1
Code Elegance,the code is structured well throughout and shows good understanding of inheritance. the structure of the abstract animal and plant classes is a nice addition. the weather type could use an enum rather than being a string.,1
Code Elegance,"the code is structured well with a good use of classes and methods. the student added an 'organism' class as a common superclass of the plants and animals, however, the animal class should extend the organism class and further encapsulate the animal types. ",1
Code Elegance,the code is structured well with good use of classes to modularise code. the codebase would benefit from the addition of predator and prey classes for improved extensibility,1
Code Elegance,the code is very well organised with good use of abstract classes. common functionality is suitably encapsulated inside super-classes. there are some instances of inappropriate close-coupling of classes including the wolf and zebra classes,1
Code Elegance,"the code is well implemented and the student demonstrates good practise of using encapsulation and inheritance. the code structure would benefit from introducing a predator and prey class, however, the common methods of animals have been moved to the animal class. the field class contains helpful methods for identifying the contents of neighbouring cells which makes for clean and extensible code.",1
Code Elegance,"the code is well organised and for the most part, classes are well modularised and contained. i like the animal class exposing the cold, hot, etc. behaviours. however, there is a considerable amount of repeated code which could be delegated to a common super-type for predator/prey, etc. ",1
Code Elegance,"the code is well presented and is sufficiently maintainable. however, more effort should be made on the use of inheritance and sub-typing. for example, a predator or prey class should be implemented to hold repeated code. the methods inside classes are sufficiently self-contained however, and exhibit the single-responsibility principle. ",1
Code Elegance,the code is well structured and shows a good understanding of classes and inheritance. the time class is an elegant addition. the code would benefit with a predator and prey class to help with encapsulating common code across animals. ,1
Code Elegance,"the code is well structured overall, however, some design decisions are questionnable. the introduction of predator and prey sub-types is nice, but plants extending animals makes the code more difficult to parse at a glance. the weather types should be an enum rather than just a string, but the probabilities of selecting between weather are articulated well with final static variables. ",1
Code Elegance,"the code makes excellent use of classes and inheritance to create a well-structured simulation. the organism abstract class defines shared functionality, with specific animal and plant classes extending it. methods are used effectively to encapsulate behaviors.",1
Code Elegance,"the code makes excellent use of classes, inheritance (abstract base classes animal, plants, microorganisms), and functions to enable code reuse across the different species classes. the logic is broken out well, like having an act() method for each species. fields and methods have clear access control. the code looks efficient and readable.",1
Code Elegance,"the code makes excellent use of classes, inheritance and polymorphism to enable reusability and maintainability. the core animal class is cleanly extended by predator and the specific animal classes. behavior is abstracted well, like with the act(), breed() and eat() methods.",1
Code Elegance,"the code makes excellent use of classes, inheritance and polymorphism to enable reusable and maintainable code. the base animal and prey/predator classes factor out common functionality. each specific animal subclass encapsulates its unique attributes and behaviors. classes are used for key concepts like location, field, clock, weather, disease etc. enabling modularity. overall the code is efficient and very readable.",1
Code Elegance,"the code makes excellent use of classes, inheritance, and interfaces to create well-organized, reusable and maintainable code. class responsibilities are clearly delineated. abstractions like animal, disease, weather allow shared behavior to be cleanly captured. the code is efficient and readable.",1
Code Elegance,"the code makes excellent use of classes, interfaces and inheritance to enable code reuse and extensibility across the various animal and plant types. behavior is elegantly captured in base classes and interfaces. the code is well organized into different files and uses appropriate access modifiers. while there is a lot of code, it does not sacrifice readability and the logic is clear.",1
Code Elegance,"the code makes excellent use of inheritance with base animal, plant and species classes. behavior is customized through polymorphism and constants defined in species-specific data classes. this allows new species to be added easily. the simulator is well structured, encapsulating field and simulation state. ",1
Code Elegance,"the code makes excellent use of inheritance with base animal, predator, and plant classes. shared constants and methods are defined in parent classes. each specific animal and plant type extends the base classes with their unique characteristics. this produces very clean, readable and maintainable code.",1
Code Elegance,"the code makes good use of classes, inheritance (e.g. all animals extend the animal abstract class) and instance variables to enable code reuse.",1
Code Elegance,"the code makes good use of inheritance with an abstract animal class and specific subclasses for each species. behavior is encapsulated within each class. fields and methods have clear, descriptive names. the code is efficient, using collections effectively.",1
Code Elegance,the code makes good use of inheritance with an abstract animal class. behavior is encapsulated within each animal subclass. fields and methods have clear purposes.,1
Code Elegance,"the code makes good use of inheritance with an abstract animal class. code that can be shared between species, like movement, is in the base class. species-specific behavior is neatly encapsulated in each subclass. fields and methods have clear purposes. the time and weather classes add useful functionality without cluttering the main classes. ",1
Code Elegance,the code makes good use of inheritance with an abstract organism superclass. classes and methods are used effectively to organize the code and enable reuse. the logic is clean and efficient. ,1
Code Elegance,"the code makes good use of inheritance, with an abstract animal class that the concrete species classes extend. this allows for code reuse. the logic for animal behaviors like moving, eating, and breeding is encapsulated within each class. ",1
Code Elegance,"the code makes great use of inheritance, with a base food class that plant and animal extend from. this allows shared functionality to be reused. there are also abstract act() methods that get implemented in each subclass. the logic for each animal species is broken out into its own class which encapsulates the species-specific properties and behavior. constants are used effectively for things like breeding age, food value, etc. the code is efficient, readable and well-structured.",1
Code Elegance,"the code presented has some elements of elegance. however, it  is too simplistic to be considered as complex enough.",1
Code Elegance,"the design is questionable. there is a cyclical relationship with organism, animal, and the various types of animals. it makes extending the program a more arduous process. behaviour of each animal would be better specified on a class-by-class basis.",1
Code Elegance,the enum are defined in a different way. some of the characteristics of the animals should have been shared by the superclass.,1
Code Elegance,the food chain class is an elegant way to represent the predator/prey relations.,1
Code Elegance,the genderequals method should have been defined in the superclass rather than exploited in each of the subclasses. this also applies to the common attributes between many different animals. the same happens also with the different kind of plants.,1
Code Elegance,"the methods 'createweatherlist' is redundant and it complicates the code. similar characteristics of different species are defines repeatedly in each subclass, rather than in their superclass.",1
Code Elegance,"the refactored class, even though it contains attributes that are common for all the animals, some of them define them again in their class. the weather class is not correctly defined as it is empty - not good practice.",1
Code Elegance,the spacing is not correct in some areas of the program. some of the attributes that are common for each species are not determined in the superclass. abstract methods inside classes that are not abstract. methods are not either private/protected/public.,1
Code Elegance,"the student demonstrates a sound understanding of encapsulation and inheritance. the introduction of a plant superclass is a nice touch. the animal classes could be divided into subtypes of predator, prey supertypes for improved modularity. the creatures class contains too many disparate parts of model logic that should be distributed elsewhere. for example, mixing weather with time, location, and life is not ideal. ",1
Code Elegance,the student demonstrates excellent use of classes and functions to produce reusable and maintainable code; the code is efficient without sacrificing readability and understanding.,1
Code Elegance,the student demonstrates excellent use of classes and functions.,1
Code Elegance,"the student demonstrates excellent use of classes and inheritance to produce reusable and maintainable code. the animal and habitatfood abstract classes define shared functionality. each species extends these appropriately (e.g. mouse, hyena, flower). methods are used effectively to encapsulate behaviors like eating, breeding, aging, and disease transmission. the code is efficient and readable.",1
Code Elegance,"the student demonstrates excellent use of classes, inheritance (abstract animal class extended by predator and prey) and polymorphism to create a well-structured, extensible design. the code is broken into logical methods and avoids redundancy. fields and methods have appropriate access modifiers. the act() methods delegate work to other methods with clear purposes like givebirth(), findfood() etc. smart optimizations are made, like caching free adjacent locations. ",1
Code Elegance,"the student exhibits an adept knowledge of encapsulation and modular code design. abstract classes, enums, and inheritance are used appropriately. the general code structure is well-organised and open to extension. ",1
Code Elegance,"the student has shown a good understanding of code modularity, inheritance and use of abstract classes. the use of predator/prey sub-types is good, and the encapsulation of common behaviours in the animal class is clean.",1
Code Elegance,the student has submitted the original task code unmodified with no extensions,1
Code Elegance,the student shows a good understanding of code structuring with good use of inheritance and abstraction. the inclusion of predator and prey classes is clean and appropriate for encapsulation. the time and weather classes also improve dependency management. ,1
Code Elegance,"the student shows a good understanding of encapsulation and inheritance: for example, introducing the organism class to contain common methods and properties of agents. however, the plants and animals should be divided into their own subtypes and a predator / prey class would improve modularity. ",1
Code Elegance,the student used abstract classes and interfaces well. the code is modularised well and is open to extension. the classes and methods adhere to the single-responsibility principle. common functionality is pushed to the superclasses such as 'animal',1
Code Elegance,"the student uses abstract classes and inheritance appropriately, however, some design decisions negatively impact the elegance of the codebase. for example, the act() method of agents is much too large and is difficult to maintain- mixing logic for many disparate concerns such as breeding and movement. the submission includes what appear to be previous versions of the code in the form of [1].java files (however i have not marked the student lower for these)",1
Code Elegance,the student uses encapsulation and inheritance well. the inclusion of nature as a class type is effective for implementing the tree and weed. there are some methods such as act() which are too large and would benefit from being divided further. the passing of 'frogpresent' etc. in these classes should be avoided to reduce tight-coupling of classes,1
Code Elegance,the student uses encapsulation and inheritance well. the use of interfaces for 'eatable by' is clever and effective. the inclusion of carnivore and herbivore subtypes makes for easily-maintanable code,1
Code Elegance,the submission is merely the handout code.,1
Code Elegance,"the use of the 'actor' interface seems redundant. the variables are repeatedly initialised in the child, but a better option would be to initialise them in the superclass. the colour method is not correctly placed.",1
Code Elegance,"there are many characteristics common to multiple animals, but they are all defined in the subclass, rather than in the superclass. the 'animal' class contains abstract methods, even though it is not abstract.",1
Code Elegance,"there are many variables defines inside the subclass rather than the superclass, even though many subclasses share the same characteristics. the 'prey' class presents only a constructor - this is not considered good practice.",1
Code Elegance,"there are many variables that should be specific to a superclass that are defined in a subclass. 'disease' class has an empty constructor - so does 'winter'. the difference between a male and a female should not be made by a different class. fox acts as a superclass for foxes, instead of an animal class that is a superclass for all of them, and without a fox class.",1
Code Elegance,"there are some clear remnants of copy pasting/chatgpt usage. class structure is unintuitive, particularly how elements are structured. ",1
Code Elegance,there are some constructors that are empty - this is not considered good practice.,1
Code Elegance,"there are some variables that are shared by all superclasses, but they are defined in all the subclasses.",1
Code Elegance,"there is a redundant class just for making use of the arraylist, this is not desirable.",1
Code Elegance,"though i see the effort, i do not think they know what inheritance really means, which results in a worse design compared to the example.",1
Code Elegance,time and weather could be implemented in separate class to improve extensibility,1
Code Elegance,"to better differentiate between preys and predators, it may be helpful to have a super class for preys and another super class for predators.",1
Code Elegance,"to improve extensibility of code, it would be useful to add superclass for predators and preys",1
Code Elegance,"to improve extensibility, it would be better to implement plant as a abstract class",1
Code Elegance,"to improve the extensibility of your code, it would be better to implement time in a separate class.",1
Code Elegance,"usage of interfaces incorrectly, compilation errors. a lot of code rewritten when it could have been implemented in an abstract class,",1
Code Elegance,"use of actor interface, predator and prey classes helps keep the code elegant.",1
Code Elegance,use of classes and functions improves code extensibility ,1
Code Elegance,very good application of the notions of the module,1
Code Elegance,"very good use of the notion of the module, good implementation of the challenge tasks",1
Code Elegance,"very good, great options and challenges, good use of notion in class and a lot a creativity ",1
Code Elegance,very well done ! all the concepts learnt during the module are wisely used to serve your project,1
Code Elegance,very well structured code,1
Code Elegance,"very well written, many challenges very well implemented, good balance in parameters",1
Code Elegance,"well strucutred, notion learnt in class properly utilised, some challenges tried",1
Code Elegance,"whilst code is generally well written, some aspects of what class/entity should be responsible for what task remain a little unintuitive. for example, it doesn't seem semantically intact for the simulator to decide what animals (predators in this case) should act or not when there is fog. it would make more sense for an animal to ingest this information and decide what it will do.",1
Code Elegance,"whilst most abstractions and oop principles are applied sensibly, there are some fundamental misrepresentations of entities and their position in the class hierarchy. take, for example, disease - it shouldn't stand that a disease should keep track of every animal it infects, but rather an animal contracts a disease and this affects its behaviour/internal parameters.",1
Correctness,"core tasks: all listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

challenge tasks:  three challenge tasks are completed (plants, weather, disease), demonstrating exceptional technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",27
Correctness,it is basically correct.,12
Correctness,all base tasks and extension tasks have been completed. documentation is provided for how each of the tasks is completed.,6
Correctness,core and challenging tasks completed,6
Correctness,seems unoriginal and lacks interesting thoughts.,6
Correctness,the application works as described in the assignment; all base tasks are completed; the student has completed all of the challenge tasks;,6
Correctness,does not compile,5
Correctness,it is good.,5
Correctness,some efforts have been put into this project.,5
Correctness,all base tasks and extension tasks are completed. some documentation on how these tasks are implemented.,4
Correctness,all core and challenge tasks completed. no additional extension work.,4
Correctness,the application functions incorrectly on some inputs/actions.,4
Correctness,the application works as described in the assignment; all base tasks are completed; the student has completed some of the challenge tasks;,4
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, disease, weather). ",4
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease).",4
Correctness,all base and challenge tasks completed to a high standard. ,3
Correctness,all base and challenge tasks completed. no self-defined extension implemented. ,3
Correctness,all base tasks and extension tasks have been completed. some documentation is provided for how each of the tasks is completed.,3
Correctness,all challenge and base classes are implemented correctly to a high standard.,3
Correctness,all core and challenge tasks are completed,3
Correctness,all core tasks completed. extension tasks completed except for disease implenetation.,3
Correctness,minor details of tasks are violated; the application functions correctly; the student has completed some of the challenge tasks.,3
Correctness,much effort has been put into this project.,3
Correctness,no disease,3
Correctness,program runs well. some challenge tasks were attempted.,3
Correctness,the application works as described in the assignment; all base tasks are completed; the implementation demonstrates originality and creativity. and technical excellence in the completion of all challenging tasks,3
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, disease). ",3
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, weather).",3
Correctness,"the core requirements like having 5+ species with predators, prey, plants, gender, and day/night behavior seem met based on the code. the challenge mission was completed well.",3
Correctness,very great in terms of correctness. this does a better job than the example code.,3
Correctness,"added a graph view, core and challenging tasks completed",2
Correctness,all base and challenge tasks are completed,2
Correctness,all base and challenge tasks completed,2
Correctness,all base tasks and extension tasks are completed. some documentation on how these tasks are implemented,2
Correctness,"all base tasks and extension tasks have been completed. generally, class design is quite crafty. documentation has been provided for how each tasks are completed.",2
Correctness,all base tasks and some extension tasks have been completed. documentation is provided for how each of the tasks is completed.,2
Correctness,"all base tasks and some extension tasks have been completed. generally, there are indications/documentation on what has been completed and they were completed reasonably.",2
Correctness,all base tasks completed to a high standard. no challenge tasks completed. ,2
Correctness,all base tasks completed. plants and weather implemented. disease not implemented.,2
Correctness,all basic tasks and challenges completed,2
Correctness,all basic tasks and most challenges completed,2
Correctness,all core tasks and challenging tasks completed,2
Correctness,"all core tasks complete, 2 of 3 challenge tasks completed.",2
Correctness,all core tasks completed. only plants implemented from extension tasks.,2
Correctness,"all objectives are completed, code compiles and a stable simulation runs.",2
Correctness,"all tasks complete, findfood implemented such it is obtrusive with growth of application .",2
Correctness,at least 2 predators do not compete for same food source.,2
Correctness,"base tasks all completed well, nice addition of plants and weather for the challenge class.",2
Correctness,completed all core tasks and challenging tasks,2
Correctness,"core tasks: all listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

challenge tasks:  one challenge task is completed (plants) demonstrating some technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",2
Correctness,"core tasks: all listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

challenge tasks:  two challenge tasks are completed (plants, weather), demonstrating exceptional technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",2
Correctness,"creative idea with the hunter class, nice weather implementation and diverse choice of animal classes.",2
Correctness,"disease attribute added, doesn't affect behaviour",2
Correctness,does not compile.,2
Correctness,"everything compiles and there is a stable simulation, all objectives have been completed to good standard",2
Correctness,great! more thoughtful than others.,2
Correctness,"incredible implementation. great additional gui functionality, all base and challenge tasks completed to a very high standard.",2
Correctness,most deliverables complete and code compiles with a stable simulation.,2
Correctness,no attempt made,2
Correctness,no tasks are completed. submission is the same as the original folder,2
Correctness,none of the core tasks is implemented. same code as the default files provided. no changes were made.,2
Correctness,program works as intended. challenge tasks are implemented.,2
Correctness,program works well. challenge tasks are implemented.,2
Correctness,program works well. some challenge tasks are implemented.,2
Correctness,"-core tasks and challenge tasks are completed but submission has below issues : 

-after 10-15 seconds all species except plants die, only season time and weather change
-some classes do not have description 
-some methods' descriptions are not clear + some additional comments could be added like what does an animal do at certain daytime or weather 
- methods should only use parameters that they have as an argument in tree class act method has a lot of parameters despite the fact that it does not use any of them, this is redundancy and does not match clean code standarts, extra level of abstraction could be added in order to get rid of this.
- i wouldn't recommend to create enums inside of classes like you do in simulator, time weather and season enums could be separated as they would be more readable additionally if we consider enums are specific type of classes they should begin with capital letters
- formatting, indentation",1
Correctness,"a creative way to implement a ""disease"" this is done by animals eating plastic. all core tasks and challenge tasks completed.",1
Correctness,all base and challenge tasks are completed to a good standard,1
Correctness,"all base and challenge tasks are completed, small improvements like namings, separating methods into util or helper classes could be considered. 
overall solution is good, easy to read and understand",1
Correctness,"all base and challenge tasks are implemented. 


creative and unique solution with good usage of methods, however abstraction level could be enhanced and redundancy could be handled. for example if tree does not do anything in act method then there is no point to override it. instead additional abstraction could be used ",1
Correctness,all base and challenge tasks completed ,1
Correctness,all base and challenge tasks implemented,1
Correctness,"all base and challenge tasks implemented, program lags at later steps",1
Correctness,all base and challenging tasks are completed ,1
Correctness,all base and some challenge tasks completed to a high standard. disease class has probability so low that it will never come into effect during simulation.,1
Correctness,all base classes are implemented correctly to a high standard.,1
Correctness,"all base requirements have been met. challenge extensions have been added including disease spread, weather and plants. the time-of-day is modelled as an influencing factor on some behaviours, however, this is incredibly limited and represents a linear relationship. ",1
Correctness,all base tasks and challenge tasks are implemented. optimisation needed: the programme lags significantly as the number of steps increases.,1
Correctness,all base tasks and challenge tasks have been completed,1
Correctness,all base tasks and challenge tasks implemented,1
Correctness,all base tasks and extension tasks have been completed. documentation is provided for how each of the tasks is completed. can be craftier in implementing tasks like diseases.,1
Correctness,all base tasks and extension tasks have been completed. little documentation is provided for how each of the tasks is completed.,1
Correctness,all base tasks and most extension tasks are completed and documentation is included for how they are completed,1
Correctness,all base tasks and most extension tasks are completed and little documentation is included for how they are completed,1
Correctness,all base tasks and most extension tasks are completed. some documentation on how these tasks are implemented but more can be provided and can be craftier to complete these tasks.,1
Correctness,all base tasks are complete. student implemented a good representation of challenge extensions. all requirements are met and creativity displayed through the disease spread extension. the time-of day behaviours are very limited and have been implemented to a poor quality,1
Correctness,all base tasks are completed,1
Correctness,all base tasks are completed and challenge tasks are implemented. optimisation is needed as application lags at some stages.,1
Correctness,all base tasks are completed and no extension tasks are completed. has followed the submission instruction.,1
Correctness,all base tasks are completed and some challenge tasks,1
Correctness,"all base tasks are completed and some of the challenging tasks are done, however, the simulator doesn't run correctly.",1
Correctness,"all base tasks are completed, with at least five different acting species (zebra, giraffe, lemur, lion, cheetah), including two predators (lion, cheetah) and non-predators. the lion and cheetah compete for the same food sources. genders are distinguished and creatures can only propagate when a male and female meet. time of day is tracked and some creatures exhibit different behaviors at night. the student also implemented weather as a challenge task which influences animal behavior.",1
Correctness,all base tasks are implemented to a high standard and multiple challenge extensions are implemented with creativity and technical proficiency. the student has gone above and beyond with their creative agent behaviours,1
Correctness,all base tasks completed and challenge tasks completed,1
Correctness,all base tasks completed and most challenge tasks completed - entities not influenced by weather,1
Correctness,all base tasks completed and most challenge tasks completed - more entities could be influenced by weather,1
Correctness,all base tasks completed and one challenge task is attempted,1
Correctness,all base tasks completed and some challenge tasks attempted,1
Correctness,"all base tasks completed, no challenge tasks attempted",1
Correctness,all base tasks have been attempted but the gender feature is slightly inaccurate. no challenge tasks have been attempted. generally ok implementation of these tasks.  some documentation is provided for how features are implemented.,1
Correctness,all base tasks were completed - but did not differentiate males from females. the challenge tasks attempted included adding plants and environments which influenced the behaviour of entities,1
Correctness,"all base tasks were completed, but not all challenge tasks were attempted",1
Correctness,"all baseline and challenge tasks are completed to a good standard. this include modelling weather, plants, and disease. the implementation of the challenge tasks is competent but of limited complexity",1
Correctness,all baseline and extension classes are implemented to a high standard. the simulation shows professionalism and care to detail,1
Correctness,all baseline requirements are implemented well. some challenges are implemented but the student did not implement disease spread. the weather-influenced behaviours are interesting and creative. ,1
Correctness,all baseline requirements are met competently and the challenge extensions are implemented to a high standard. the weather component could be extended with more significant impact on agent behaviours,1
Correctness,all baseline requirements are met to a competent level. challenge extensions such as weather and additional environment types have also been implemented well. the idea of weather affecting movement directions is creative,1
Correctness,"all baseline requirements are met to a high standard. challenge extensions are also implemented well, including: disease spread, plants, and adding water as an environmental area type. the disease spread behaviour is limited and is based on a probability function rather than proximity between agents. however, diseases are inherited from parents and spread when propogating. ",1
Correctness,"all baseline requirements have been met to a good standard with appropriate predators and prey, breeding and time of day behaviours. the student has implemented plants as a challenge extension ",1
Correctness,"all baseline tasks are implemented correctly and challenges such as disease spread and plant life are implemented with creativity. for example, animals can pick up diseases via eating diseased plants. the animals do not have any complex time-based behaviours- seemingly all agents are told to 'not act' by the simulator during night time. ",1
Correctness,"all baseline tasks are implemented correctly with a demonstration of predator/prey animals, time-based behaviours and competition for food. challenge extensions have been implemented in the form of the earthquake environmental behaviour. the solution is creative and competently implemented. the model does suffer from poor calibration where the model often reaches an 'empty' state very quickly - perhaps a commentary on humanity's disregard for sea-life?",1
Correctness,all baseline tasks have been completed to an excellent standard. the challenge tasks are tackled with competence and creativity. there is good variety in the behaviours of different agent types and environmental effects on behaviour. the student has gone above and beyond by implementing different types of diseases,1
Correctness,all basic and challenge task completed. extra marks for effects when raining.,1
Correctness,all basic and challenge tasks completed. extra marks for good ui. no report.,1
Correctness,all basic and challenge tasks completed. no report provided.,1
Correctness,all basic tasks and challenges completed.,1
Correctness,all basic tasks and challenges.,1
Correctness,"all basic tasks and most challenges completed, extra marks for ui.",1
Correctness,all basic tasks completed but only 1 challenge. no report provided.,1
Correctness,all challenge and base classes are implemented correctly.,1
Correctness,"all challenge and base classes are implemented, however all classes apart from algae die out quickly during simulation. parameters of growth, death, etc. should be adjusted to see more interesting results.",1
Correctness,"all challenge and base classes are implemented, however all classes apart from fruit and fern die out quickly during simulation. parameters of growth, death, etc. should be adjusted to see more interesting results.",1
Correctness,"all challenge and base classes are implemented, however plant and panther class die out quickly during simulation.",1
Correctness,all core and challenge tasks are completed to a high standard,1
Correctness,all core and challenge tasks completed. ,1
Correctness,"all core and challenge tasks completed. as an extension, the student also implements the ""scavenger"" animal type.",1
Correctness,all core and challenging tasks completed,1
Correctness,"all core and challenging tasks completed, added a menu to the gui ",1
Correctness,all core and extension tasks completed. candidate implements owns extension - carcasses.,1
Correctness,all core and extension tasks completed. candidate implements owns extension - plant height.,1
Correctness,all core and extension tasks completed. candidate implements owns extension - predator combat.,1
Correctness,all core and extension tasks completed. candidate implements owns extension - predators competing for food.,1
Correctness,all core and extension tasks completed. candidate implements owns extensions - disease types and terrain.,1
Correctness,all core and some optional objectives completed. the code compiles and the simulation is stable.,1
Correctness,all core tasks and challenge tasks completed.,1
Correctness,all core tasks and challenging tasks were completed,1
Correctness,"all core tasks are completed - there are at least 5 acting species (lion, leopard, zebra, camel, antelope), with lions and leopards as predators competing for the same prey. the species distinguish males and females and require them to meet to propagate. time of day is tracked, with some creatures exhibiting different behavior at night (lions and leopards sleep from 10pm-10am).

multiple challenge tasks are also implemented, including disease spread, weather that impacts behavior, and a nicely formatted graphical view showing key stats. ",1
Correctness,"all core tasks are completed, including at least 5 acting species (fjallrav, lodjur, ren, varg, brunbjorn), with at least 2 predators (varg, brunbjorn) and 2 non-predators (fjallrav, ren). the varg and brunbjorn compete for shared prey species. males and females are distinguished and must meet to propagate. time of day is tracked and some behaviors differ based on time.

multiple challenge tasks were implemented demonstrating originality and technical excellence. plants (druvflader, maskros) are simulated and eaten by some animals. weather effects like fog and rain impact animal visibility and plant growth. a disease mechanic was added where eating druvflader has a chance to infect animals. ",1
Correctness,"all core tasks are completed, including at least 5 acting species (snake, lion, human, sheep, bird, moose), with at least 2 predators (snake, lion, human) and 2 non-predators (sheep, bird, moose). the lion and snake compete for the same food sources. some species distinguish male and female individuals, requiring them to meet to propagate. time of day is tracked, with some creatures exhibiting different behavior at certain times. the challenge tasks of adding plants, weather, and disease have also been implemented successfully.",1
Correctness,"all core tasks are completed, with at least 5 acting species (wolf, sheep, snake, rhizomys, elephant), including predators (wolf, snake) and non-predators (sheep, rhizomys, elephant). the wolf and snake compete for sheep and rhizomys as shared food sources. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with some behaviors likely differing between day and night. challenge tasks like adding plants (bamboo, grass), weather, and disease are also implemented. ",1
Correctness,"all core tasks seem to be completed, including having at least 5 different acting species (rabbit, fox, wolf, goat, rat), at least 2 predators (fox, wolf) and 2 non-predators (rabbit, goat, rat), predators competing for the same food source (e.g. foxes eat both rabbits and rats), and species distinguishing male/female individuals that must meet to breed. time of day is tracked and impacts behaviors like sleeping. all challenge tasks are completed. the question is no replace the rabbit class and fox class of the template with other animals.",1
Correctness,"all good, but uses internal implementation for disease and weather. could be separated. ",1
Correctness,"all of the base tasks are completed - the simulation has at least 5 species (rabbits, foxes, plants, squirrels, nuts, vultures, mice). males and females are distinguished, requiring them to meet to propagate. time of day is tracked, with some creatures like rabbits and squirrels unable to move at night. however, a few details are missing - the original fox and rabbit classes were used rather than being replaced by different predator/prey species as specified. no challenge tasks like weather or disease simulation were attempted.",1
Correctness,"all tasks complete, weather actions implemented such it is obtrusive with growth of application .",1
Correctness,"all tasks completed, however, weather could have been implemented using the enum class. ",1
Correctness,all tasks except disease have been completed. overall the use of inheritance and different classes has been good. ,1
Correctness,all tasks has been completed and generally quite crafty in the way of completing the tasks.,1
Correctness,all tasks has been completed. some methods can be simplified slightly. overall nice use of different classes to implement different challenge tasks. ,1
Correctness,all the core tasks and challenging tasks were completed,1
Correctness,application failed to run in bluej due to assertionerror ,1
Correctness,at least 5 different kinds of acting species are not present only 4 are there,1
Correctness,at least five animals are created. at least 2 animals compete for the same resources. at least 2 animals eat only grass types. the time of the day influences the bahaviour of the animals. only a male with a female can give birth to another animal. extra challenges: plants successfully added.,1
Correctness,base and challenge tasks are completed,1
Correctness,base and challenge tasks are implemented. inefficient implementation of the environment interactions causes the simulation to execute very slowly.,1
Correctness,"base and challenge tasks very well implemented, simulation stable, the output summary is a good addition",1
Correctness,"base and challenge tasks well implemented, but the simulation could be more stable. ",1
Correctness,"base and challenge tasks well implemented, but the simulation could run a bit longer.",1
Correctness,"base and challenge tasks well implemented, the simulation is quite stable but could run longer",1
Correctness,"base tasks all completed well, nice addition of plants and weather for the challenge class. simulation elimnates all but two species within very few steps in practice.",1
Correctness,"base tasks all completed well, nice addition of plants for the challenge class. simulation elimnates all but two species within very few steps in practice.",1
Correctness,base tasks and the weather challenge task is implemented. inefficient and incorrect implementation of the animal classes causes the simulation to execute very slowly and the time implementation is also implemented wrongly.,1
Correctness,base tasks completed. challenge tasks were attempted.,1
Correctness,base tasks not completed,1
Correctness,both genders can breed around males,1
Correctness,"breeding is not dependent on gender, which was a core task",1
Correctness,cannot open the project in bluej. error: no java source files were found in this directory,1
Correctness,"challenge tasks and base tasks implemented, but the simulation dies almost immediately",1
Correctness,"challenge tasks are implemented, however basic tasks such as having plants are not implemented",1
Correctness,class coupling is very clear,1
Correctness,code compiles and all deliverables are achieved.,1
Correctness,"code compiles and all deliverables are met, simulation is stable.",1
Correctness,"code compiles, but does not run.",1
Correctness,"code does not compile and does not run on blue j, crashes the application as it continues to open a lot of folders",1
Correctness,code does not run.,1
Correctness,code functions well. some challenge tasks were attempted.,1
Correctness,code has not extended the base code.,1
Correctness,code is functional. some challenge tasks were attempted.,1
Correctness,"code is generally correct and compiles successfully with a stable simulation, meeting all the objectives.",1
Correctness,code is implemented and works. challenge tasks are implemented.,1
Correctness,code is implemented well. some challenge tasks are implemented.,1
Correctness,"code runes well. a substantial effort into extending the program was attempted. there is an issue with running the simulation. however, individual steps still work.",1
Correctness,"code runs but nothing is displayed. 
completed all basic tasks and some challenges.",1
Correctness,code runs but the simulation quickly falls into a state and stays there. no challenge,1
Correctness,code runs well. challenge task of substantial difficulty achieved.,1
Correctness,code runs well. challenge tasks were attempted. a significant extension to the program has been attempted.,1
Correctness,code runs well. challenge tasks were attempted. an error message appears when trying to release the vaccine while the program is running.,1
Correctness,code runs well. some challenge tasks were attempted.,1
Correctness,code works as intended. challenge tasks are implemented.,1
Correctness,code works well. a substantial challenge task has been completed.,1
Correctness,code works well. attempt at challenge tasks was done.,1
Correctness,code works well. some challenge tasks are attempted.,1
Correctness,"compilations errors, completed all of the core tasks. some of the challenging tasks completed to some degree however not to great quality.",1
Correctness,compile error in simulator and statistics view. missing packages,1
Correctness,compile error: incompatible types actors.actor cannot be converted to animal.,1
Correctness,compiler errors for rabbit and fox classes. mating behaviour does not include sex (m/f) of animals.,1
Correctness,"compiles, works well. stops fast. lacks challenges",1
Correctness,completed all base and extension tasks. generally implemented them in a crafty manner to reduce the number of repeated codes. ,1
Correctness,completed all base tasks and extension tasks. generally implemented all features from assignments. more explanation needed for easier interpretation. ,1
Correctness,"completed all base tasks and one extension task. generally, more explanation is needed for easier identification of these tasks.",1
Correctness,completed all basic and challenge task. extra marks for good looking ui.,1
Correctness,completed all basic and challenge tasks.,1
Correctness,completed all basic tasks and challenges,1
Correctness,completed all core and challenging tasks. simulator is in 3d view as well,1
Correctness,completed all core tasks and challenging tasks. added a unit test as well,1
Correctness,completed all core tasks and some of the challenging tasks,1
Correctness,"completed all the core tasks and challenging tasks however, not the best quality code.",1
Correctness,completed all the core tasks and challenging tasks with some errors.,1
Correctness,convoluted implementation of weather and disease,1
Correctness,core and challenge tasks are implemented but code contains a lot of duplications which can be removed by using static variables or additional abstractions,1
Correctness,"core and challenge tasks except disease functionality are complete but they are implemented in a general way.
for example, as far as i understand act method was implemented inside of animal class, there is no instanceof check, all animals are expected to behave in a same way in night or stormy weather. 
this implementation could be enhanced by more abstraction ",1
Correctness,core and challenging tasks completed ,1
Correctness,core and challenging tasks completed. added natural disasters,1
Correctness,"core task is good. it includes at least 5 different species (zebra, lion, antelope, hyena, cheetah), with lions, hyenas and cheetahs as predators and zebras and antelopes as non-predators. the hyenas and cheetahs compete for antelopes as prey. male/female genders are distinguished for breeding in some species like the antelope and cheetah classes. time of day is tracked, with animals exhibiting different sleeping behavior at night. ",1
Correctness,core tasks and challenging tasks all completed,1
Correctness,core tasks and challenging tasks completed ,1
Correctness,core tasks are completed and some challenge tasks are implemented,1
Correctness,core tasks completed except for having 5 acting species (plants do not count).,1
Correctness,core tasks completed except for predators sharing same food.,1
Correctness,core tasks completed however no challenging tasks attempted ,1
Correctness,"core tasks: all listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

challenge tasks:  no challenge tasks were attempted.

bluej: run's in bluej without any issues.",1
Correctness,"core tasks: all listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

challenge tasks:  two challenge tasks are completed (plants, disease), demonstrating technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",1
Correctness,"core tasks: all listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

challenge tasks:  two challenge tasks are completed (plants,, disease), demonstrating technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",1
Correctness,"core tasks: some core tasks have been completed, indicating a basic approach to the simulation's basic requirements. animals having different behaviour, according to time is not present.

challenge tasks:  two challenge tasks are completed (plants, weather), demonstrating some technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",1
Correctness,"core tasks: some core tasks have been completed, indicating a basic approach to the simulation's basic requirements. five different animals is not present. fox and rabbit are not part of the assignment

challenge tasks:  three challenge tasks are completed (plants, disease,weather), demonstrating some technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",1
Correctness,"core tasks: some core tasks have been completed, indicating a basic approach to the simulation's basic requirements. five different animals is not present. fox and rabbit are not part of the assignment

challenge tasks:  two challenge tasks are completed (disease,weather), demonstrating some technical aptitude and creativity in extending the simulation beyond the basic requirements.

bluej: run's in bluej without any issues.",1
Correctness,"creative idea with the fantasy domain, all base tasks completed to a high standard. a couple of extra challenge tasks completed. ",1
Correctness,"creative idea with the lake environment, nice weather implementation and diverse choice of animal classes.",1
Correctness,"creative idea with the trap class, nice weather implementation and diverse choice of animal classes.",1
Correctness,did not replace foxes and rabbits,1
Correctness,does not compile - missing libraries,1
Correctness,"does not download on gradescope so unable to check if it compiles but looking at the code, i have given a correctness mark given that it does compile. if not 0 points should be given. ",1
Correctness,"does not run, error in location. broken code",1
Correctness,empty submission,1
Correctness,entities do not last long when running simulation,1
Correctness,"error creating the simulator, impossible to run ",1
Correctness,"everything compiles and there is a stable simulation, all objectives have been completed to a good standard",1
Correctness,"everything compiles as it should and there is a stable simulation, all objectives have been completed to a good standard",1
Correctness,"excellent work on completing all core and challenge tasks. the simulation includes at least 5 acting species (jaguar, lion, cheetah, gazelle, zebra), with at least 2 predators (jaguar, lion, cheetah) and 2 non-predators (gazelle, zebra). the lion and cheetah compete for gazelles as a shared food source. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with some behaviors differing between day and night. the graphical interface  is impressive! i like the useful buttons provided, especially the ""reset"" button to easily restart the simulation.",1
Correctness,"excellent work on completing all core and challenge tasks. your implementation of the simulation, including at least five different kinds of acting species, competition for food sources, and the distinction of gender for breeding purposes, demonstrates a deep understanding of the project requirements. but the fox and rabbit was not replaced with different kinds of predators and prey in the basic mission. the addition of day/night cycles and weather effects further enriches the simulation's complexity and realism.",1
Correctness,"excellent work on completing all core and challenge tasks. your implementation of the simulation, including at least five different kinds of acting species, competition for food sources, and the distinction of gender for breeding purposes, demonstrates a deep understanding of the project requirements. the addition of day/night cycles and weather effects further enriches the simulation's complexity and realism.",1
Correctness,"excellent work on completing all the core and challenge tasks! the simulation includes at least 5 acting species (hyena, lion, gazelle, mouse, fennec fox), with at least 2 predators (hyena, lion) and 2 non-predators (gazelle, mouse). the hyena and lion compete for gazelles as a shared food source. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with some behaviors differing between day and night (nocturnal animals like hyenas and fennec foxes only act at night). plants (grass) are simulated and eaten by some creatures. weather effects like rain, fog, and heatwaves are implemented and influence behaviors. diseases (covid, leptospirosis) spread between animals and through water sources.",1
Correctness,"excellent work on completing all the core and challenge tasks! the simulation includes at least 5 acting species (hyena, snake, wildebeest, antelope, lion), with 3 predators (hyena, snake, lion) and 2 non-predators (wildebeest, antelope). the hyena and lion compete for wildebeest as a shared food source. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with behaviors differing between day and night.

the challenge tasks of adding plants (grass), weather (clear skies, heavy rain, heavy fog), and disease (infected animal count displayed) were all implemented successfully. ",1
Correctness,"excellent work on completing all the core tasks and implementing several challenge tasks! the simulation includes at least 5 acting species (bird, grass, frog, grasshopper, snake, hawk, caterpillar) with multiple predators (bird, frog, snake, hawk) and non-predators (grasshopper, caterpillar). birds and frogs compete for grasshoppers and caterpillars as shared food sources. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with sleeping behavior differing based on time. weather effects are impressively modeled - ponds can dynamically generate and evaporate based on rainy or sunny conditions. plant growth is also tied to weather.",1
Correctness,"excellent work on completing all the core tasks and most of the challenge tasks. the simulation includes at least 5 acting species (lion, hyena, wildebeest, waterbuffalo, grass), with predators (lion, hyena) and non-predators (wildebeest, waterbuffalo). lions and hyenas compete for shared food sources like wildebeest. species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with some behaviors differing between day and night, such as lions and hyenas only moving at night. plants (grass) and disease mechanics are implemented, but weather is not included. ",1
Correctness,"extra marks for creativity: infinity gauntlet
disease and weather not implemented
when breeding, code doesn't check if there is a partner near by or if they are a opposite sex.",1
Correctness,five different types of species are met. at least two of them compete for the same resource. at least 2 of them are not predators. some of the species distinguish between male and female predators. keep track of the time of the day. all the challenges are applied with correct usage.,1
Correctness,"five kings of species met. at least two fight for the same resource. male and female individuals requirements are met. different approaches for day and night, but a bit too simplistic.
challenges applied: plants successfully met.",1
Correctness,"fox and rabbit classes are used in the simulation which is not permitted, however all challenge and base classes are implemented correctly.",1
Correctness,"fox and rabbit classes are used in the simulation which is not permitted, however most challenge tasks and all base tasks are implemented correctly.",1
Correctness,"fox and rabbit classes are used in the simulation which is not permitted, male and female implementation is incorrect. plant and weather challenge tasks implemented although plant task  does not function as intended (never gets eaten). other base classes correctly implemented.",1
Correctness,"fox and rabbit classes are used in the simulation which is not permitted, male and female implementation is incorrect. plant challenge task is correctly implemented and so are the other base classes.",1
Correctness,"fox class is used in the simulation which is not permitted, however all challenge and base classes are implemented correctly.",1
Correctness,"gender attribute assigned, breeding always allows females to breed rather than looking for male-female pair",1
Correctness,gender is implemented but not used in breeding.,1
Correctness,gender is implemented but not used in breeding. findmates using gender created but not used.,1
Correctness,"gender was not implemented for the animals, the majority of base tasks have been completed.",1
Correctness,"good behaviour, base tasks well implemented, runs fairly long",1
Correctness,"good implementation and good design, but some buttons lead to crash",1
Correctness,good implementation of base tasks and some challenges well implemented,1
Correctness,"good implementation of the base tasks, lacks challenges",1
Correctness,"good implementation of the base tasks, simulation runs but finishes fast",1
Correctness,"good implementation, challenges successfully implemented. ",1
Correctness,"good implementation, challenges successfully implemented. good design ideas",1
Correctness,"good implementation, challenges successfully implemented. good design ideas, but the run button was removed",1
Correctness,"good implementation, simulation stable but it quickly reaches a fixed balance",1
Correctness,"good reusable code, however find food of animals looked similar so i would add that to the animal class and find food accordingly.",1
Correctness,"good solution, abstraction levels implemented however solution sacrifices code reusability in some places, overall code is readable and understandable",1
Correctness,"grass and grain count does not decrease through out the simulation.
all animals act the same, this could be changed depending on the animal.
no challenge tasks completed.",1
Correctness,grass breeding implemented but not mentioned in assignment,1
Correctness,"great implementation, good design ideas, lot of challenges successfully implemented. great work!",1
Correctness,"great implementation, lots of challenges successfully implemented. good design ideas",1
Correctness,"if we consider male and female fox as two different species, the program has five different species. two of them do not for any resource, while two of them fight for the same resource. there is a distinction between male and female. however, the behaviour is not different between day and night. extra features added: plants + weather + disease.",1
Correctness,"implemented all the challenges, extra marks for good looking ui.",1
Correctness,"incredible implementation. great additional gui functionality with the graph feature, all base tasks completed and some challenge tasks completed, all to a very high standard.",1
Correctness,interesting implementation but not intuitive to use,1
Correctness,"interesting simulation, very stable. base and challenge tasks successfully implemented.",1
Correctness,it does not pass compiling.,1
Correctness,"it has at least 5 species (zebra, antelope, wilddog, lion, tiger), with predators like lions and tigers competing for prey like antelopes. the species seem to distinguish males and females for breeding. time of day is tracked to influence behaviors. however, only some challenge tasks like adding plants is finished.",1
Correctness,it is basically correct. it is thoughtful.,1
Correctness,"it looks good, though not all challenges are completed.",1
Correctness,"it seems this submission is similar the  foxes-and-rabbits-handout template project and it does not change it at all. it only has foxes and rabbits and does not keep track of the time of day. this submission fails in both core and challenge tasks.
",1
Correctness,"it throws compilation errors because some library files of javazoom(javalayerexception, audiodevice, factoryregistry and advancedplayer) are missed under the working directory. even i fixed the library missing faults, it still throws out error as followed: java.lang.nullpointerexception: cannot read the array length because ""array"" is null.

the framework looks well designed and notably it introduces some interesting modules, like the audio part, to enhance the user experience. however, the submission cannot be reproduced smoothly, which is  a issue.
",1
Correctness,"lot of challenges implemented, but the simulation dies very quickly",1
Correctness,"lot of repetitive code in many animal classes. the rainingact, snowact, winteract and act functions are very similar.

findfood, canbreed, incrementage, incrementhunger are also functions which every animal has, this could have been included in the animal class and not in each specific animal.

sometimes you forgot to mention the parameters and return of the function.

most comments were informative, however i found 1-2 which needed more detail.

the rabbit class and fox class do not override all the abstract methods in the animal class.",1
Correctness,"lots of different animals but they all die out very soon. (didn't lose marks for this).
all basic tasks implemented, 1 challenge implemented.
plant class does nothing.
weather not implemented.
",1
Correctness,"male fox and female fox don't count as different animals.
student has not implemented at least five different kinds of acting species.
challenge tasks have been completed.",1
Correctness,many files did not compile when the submission was downloaded,1
Correctness,minor details of a rask are violated; the application functions correctly on the majority of actions.,1
Correctness,missing consistency in indentation and spaces between methods and logical blocks. ,1
Correctness,missing rabbit class file which causes the program to crash.,1
Correctness,"more than five animals were used. at least 2 of them compete for the same prayer. at least 2 of them eat just grass. male or female animals are identified for some of the animals. time of the day is tracked. extra additions: plants that act as grass, different levels of diseases.",1
Correctness,"most challenge and all base classes are implemented correctly to a high standard. however, recycling fox and rabbit classes is against the spirit of the assignment. extra gui feature seems to have no functionality in practice.",1
Correctness,"most creative and unique solution i have seen so far, documentation and readability could be better, redundancy could be removed by using more abstraction",1
Correctness,"most objectives completed, stable simulation",1
Correctness,most of the tasks completed.,1
Correctness,new code is not implemented.,1
Correctness,no attempt at extending the program has been made.,1
Correctness,no behaviour differences based on time of day,1
Correctness,"no change from the original files, only fox and rabbit classes present.",1
Correctness,"no changes to the template code, so no submission was received.",1
Correctness,no code added,1
Correctness,no day night cycle,1
Correctness,"no genders for animals, no weather, no diseases",1
Correctness,no hunters compete for the same food source,1
Correctness,no java source files were included in the submission - only java files and so the code cannot be compiled,1
Correctness,no modifications have been made to the original code distributed to students as part of the assignment. ,1
Correctness,no submission,1
Correctness,"no weather check, no competition for food source",1
Correctness,no weather implemented. unable to run code but has done basic tasks and some challenges.,1
Correctness,no weather or disease interaction,1
Correctness,"no weather or disease, plants implemented",1
Correctness,no weather specification,1
Correctness,not all base tasks completed. no animals find a mate of opposite gender to produce new animals,1
Correctness,not compiling to be specific musicplayer.java,1
Correctness,nothing about disease. abstraction level is not optimal. most of the private methods are almost same which can be optimized. overall this code could be much more clean,1
Correctness,null pointer exception thrown when simulating one or many steps.,1
Correctness,"number of infected animals does not change in ui, i run application couple of times",1
Correctness,"number of plants does not increase or decrease.
all basic tasks and challenges completed.",1
Correctness,only 4 acting species - grass does not use the act method.,1
Correctness,only two classes were created. they do not compete for the same resources. the acting of the animal does not depend on time. the creation of new animals does not depend on whether they are male or female. no challenge included.,1
Correctness,optimisation needed application does not run past 58 steps.,1
Correctness,optimisation needed only three animals act in simulation.,1
Correctness,optimisation needed: the programme lags as the number of steps increases.                                                                                    all base tasks and some challenge tasks completed,1
Correctness,optimisation needed: the programme lags as the number of steps increases. core tasks and challenge tasks are attempted,1
Correctness,optimisation needed: the programme lags significantly as the number of steps increases.                                                                   all base tasks are completed some challenge tasks attempted,1
Correctness,optimizations needed. abstraction level could be better,1
Correctness,"outstanding implementation, lots of challenges, great behaviours. very good idea to add the delay option",1
Correctness,overall all tasks have been completed with some documentation explaining such features. some inheritance is used to complete all these tasks. ,1
Correctness,"overall solution is good 
all base tasks and challenge tasks implemented",1
Correctness,"overall, good solution, all core and challenge tasks are implemented and works as expected. 
methods, classes and other behaviours like conditions, fields documented. 
usage of super keyword makes code more readable.
one point i would recommend is having separate abstractions for predators and non predators, you do not have any issues now, but if you want to extend animal and add a behaviour that only belongs to predators, you will have this redundancy for non predators which is not expected according to solid principle.",1
Correctness,plant challenge task is correctly implemented and so are the other base classes.,1
Correctness,program does not compile on bluej.,1
Correctness,program functions well. an attempt at challenge tasks has been made.,1
Correctness,program functions well. challenge tasks were attempted.,1
Correctness,program functions well. most challenge tasks were implemented.,1
Correctness,program functions well. some challenge tasks were attempted.,1
Correctness,"program runs perfectly, all core tasks and challenging tasks completed to a good quality.",1
Correctness,program runs well. an attempt at challenge tasks has been done.,1
Correctness,program runs well. challenge tasks were attempted.,1
Correctness,program runs well. some attempt at challenge tasks have been made.,1
Correctness,program works as intended. some challenge tasks are implemented.,1
Correctness,program works as intended. some challenge tasks are implemented. ,1
Correctness,program works well. challenge tasks are implemented. it is unclear how disease is spread amongst existing mice.,1
Correctness,program works well. most challenge tasks are implemented.,1
Correctness,project doesn't compile,1
Correctness,propagation does not happen when male and female meet.,1
Correctness,rabbit and fox classes not replaced.,1
Correctness,"rats seems to survive and grow in population when there is no grass, interesting.
all basic tasks implemented, all challenges implemented.",1
Correctness,"repeating code in functions, act function looks similar for all animals, i would of implemented this in the animal class. weather does not seem to effect animals. salmon seabird and sardine dont eat anything.",1
Correctness,"run well and interesting behaviours, only few challenges tried",1
Correctness,"run well, good displaying of the population, challenges well implemented",1
Correctness,runs but stops very quickly. some challenge implemented but the simulation runs too fast to see their effects,1
Correctness,"runs very well, very interesting proposition in the challenge tasks",1
Correctness,"several taks seam to be implemented, but none of them run when the simulator is launched...",1
Correctness,should of implemented weather for more marks,1
Correctness,significant details of task are violated,1
Correctness,simiulator does not run. caused by: java.lang.numberformatexception: cannot parse null string,1
Correctness,simulation is not very clear,1
Correctness,"simulation works perfectly and is stable, all challenges were added successfully, great work!",1
Correctness,simulator not executing the code,1
Correctness,"six species are used to realize the base tasks and it both introduces diseases for plants and animals. weather and grass are also introduced. overall, this submission finishes base and challenge tasks well.",1
Correctness,some challenge tasks are not completed such as disease.,1
Correctness,some challenges not implemented,1
Correctness,"some tasks were not implemented. no track for time of the date, no competition between animals for same food source",1
Correctness,"spawns 3 windows, one of which does nothing. another window is just about plants in the simulation. ",1
Correctness,"stable simulation, but only completes minimal objectives",1
Correctness,"stable, most objectives complete",1
Correctness,"student has submitted base code, no additional functionality added.",1
Correctness,submission is same as provided template.,1
Correctness,submission only contains original template,1
Correctness,submitted template ,1
Correctness,submitted the base code,1
Correctness,"the animal gives birth if they are female but does not check if a male is near by.
prey and predator class does nothing.
weather class does nothing.",1
Correctness,"the application compiles, but when running the simulator it doesn't work, looks like it crashes.",1
Correctness,"the application crashes until a certain point. all the base tasks were completed, challenge task was attempted.",1
Correctness,"the application works as described in the assignment and all base and challenge tasks are completed. the simulation includes at least 5 acting species (hyena, mouse, snake, bat, falcon), with at least 2 predators (hyena, snake, falcon) and 2 non-predators (mouse, bat). the hyena and snake compete for mice as a shared food source. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with some behaviors differing between day and night (e.g. sleeping at night). plants (flower, grass) are simulated and grow at a given rate. weather (rain, snow, sun) changes and influences behaviors. disease can spread between animals. ",1
Correctness,"the application works as described in the assignment and all core tasks are completed. the simulation includes at least 5 acting species (nemo, dory, dolphin, bluewhale, orca, shark, plant), with orca and shark as predators competing for food sources like nemo and dory. male and female individuals are distinguished for breeding in some species. creature behavior differs based on time of day. ",1
Correctness,"the application works as described in the assignment, although some minor issues have been encountered in the application.",1
Correctness,the application works as described in the assignment; all base tasks are completed;,1
Correctness,the application works as described in the assignment; all base tasks are completed; all submission instructions were followed correctly.,1
Correctness,"the application works as described in the assignment; all base tasks are completed; however, no challenge task was attempted;",1
Correctness,the application works as described in the assignment; all base tasks are completed; the student has completed some of the challenge tasks.,1
Correctness,the application works as described in the assignment; all submission instructions were followed correctly.,1
Correctness,"the application works as described in the assignment; all the base tasks are completed, however, no challenge task was attempted;",1
Correctness,"the application works as described, all tasks are completed and technical excellence. ",1
Correctness,the application works. base tasks completed. 1 challenge task attempted (disease).,1
Correctness,the application works. base tasks completed. 1 challenge task attempted (plants).,1
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, disease).",1
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, weather). ",1
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, weather). plants implemented as an animal.",1
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, weather). some gui work: repositioning, dark bg for night",1
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (plants, weather). weather only partially implemented as rain. potentially a 3rd attempted as hunger levels.",1
Correctness,"the application works. base tasks completed. 2 challenge tasks attempted (weather, disease). ",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, disease, weather). however, plant implemented as an animal. ",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). ",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). (submission folder was made incorrectly)",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). disease has been done for a plant rather than animals.",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). some extra work done on gui.",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). some extra work done with gui menu bar.",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). some gui buttons added.",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease). very creative with the buttons on the gui and checkboxes for environment factors. (although some buttons don't seem to work and no disease is spread).",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, disease, temperature). excellent creative work on gui and ability to customise the environment. some errors appearing.",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, hunger level). ",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, seasons). creativity and technical excellence in graph.",1
Correctness,"the application works. base tasks completed. 3 challenge tasks attempted (plants, weather, water). graph does not appear to work.",1
Correctness,"the application works. base tasks completed. 4 challenge tasks attempted (plants, disease, weather, defence). ",1
Correctness,"the application works. base tasks completed. 4 challenge tasks attempted (plants, disease, weather, types of animals). ",1
Correctness,"the application works. base tasks completed. 4 challenge tasks attempted (plants, disease, weather, water). ",1
Correctness,"the application works. base tasks completed. 4 challenge tasks attempted (plants, weather, temperature, earthquake). ",1
Correctness,the base task where new animals are created based on whether they are male or female is not met. only the weather additional feature is added.,1
Correctness,the baseline requirements are implemented to a good standard. extensions such as weather and plants are also included. the student shows creativity by influencing plant growth rate by weather behaviours.  ,1
Correctness,"the baseline requirements have been implemented to a competent level. some challenge extensions are implemented including disease spread, weather, and plants. the disease spread is very basic and the agents are very homogenous. however, the weather system is implemented well. the simulator only runs for 24 ticks on the majority of occasions",1
Correctness,"the baseline tasks are completed to an acceptable level. however, although some code is implemented for disease spread and propagation, this code is never called during program execution and is therefore not implemented correctly. ",1
Correctness,the baseline tasks are implemented to a very high standard. plants are implemented as a challenge task. no other extensions were attempted.,1
Correctness,the baseline tasks are implemented to an acceptable level however som bugs remain. the simulation consistently reaches a steady state where only plants survive. this appears to be related to an error in the propagation method of the animal classes. see bread() for the lion class where there is an instance check for whether the mating organism is a jay. challenge extensions have been implemented well with dynamic weather and disease influencing agent behaviours,1
Correctness,the basic function is fine. the challenges implemented have some bugs.,1
Correctness,the bluej package would not load,1
Correctness,"the code add the conception of  organism and corpse. it creates a new corpse at a location in field, after an organism has died, which decomposes over time. however, after 600 steps, only seagrass is left, which indicates the code may have logical or parameter setting problems. ",1
Correctness,"the code appears to implement the core requirements including at least 5 species (hyena, warthog, lion, meerkat, insect), with predators (hyena, lion) and non-predators (warthog, meerkat). lions and hyenas compete for warthogs as prey. animals have genders and can only breed when male and female meet. time of day is tracked and some creatures like lions have different sleeping behaviors. however, i was unable to fully verify the program's execution as no window appeared when running the simulation.",1
Correctness,"the code completes all base tasks correctly and add weather, grass, hunter task, which are also finished well.",1
Correctness,"the code contains at least 5 animal classes. at least 2 of them do not fight for any resource, while at least 2 of them fight for the same resource. when animals give birth, they need to be a combination between a male and a female. however, the code does not keep track of the time of the day for the animals to react differently. challenges added: disease.",1
Correctness,"the code contains at least 5 animals. at least 2 of them fight for the same resource, while at least 2 of them eat only plants. some of the animals act differently between day and night, while breeding depends on different genders. challenges added: plants + different weather behaviour + disease. the fourth additional aspect does not work properly on bluej.",1
Correctness,"the code did not run in bluej. 

the following error is generated

java.lang.assertionerror: null location passed to adjacentlocations
	at field.adjacentlocations(field.java:162)
	at simulator.simulateonestep(simulator.java:145)
	at simulator.simulate(simulator.java:118)",1
Correctness,the code ends up with the death of all animals and only the plant is still left.,1
Correctness,"the code finishes the base task and add weather as the challenge task. however, after running the simulation for 650 steps, it is counter-intuitive that it only left porcupine and all other animals are all dead.",1
Correctness,"the code introduces 5 animals - hawk, chicken, squirrel, wolf and frog and add season factor as the challenge task. however, only squirrel left at the end of simulation.",1
Correctness,the code runs perfectly but in the end although the grass count is zero some grass can be seen in the simulator screen,1
Correctness,"the core requirements appear to be mostly implemented based on the code. the simulation includes at least 5 acting species (wolf, hawk, squirrel, chicken, frog), with 2 predators (wolf, hawk) and 3 non-predators (squirrel, chicken, frog). the wolf and hawk compete for squirrels and chickens as shared food sources. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked in hours. the requirements also mention creatures exhibiting different behavior depending on time of day, such as sleeping at night. the time tracking logic is there, but it isn't being used to modify behavior yet.",1
Correctness,"the core requirements are mostly implemented, with at least 5 species (wolf, rabbit, bear, tiger, deer) including predators and non-predators. the provided rabbit was not replaced with other animals. wolves and tigers compete for rabbits. the species distinguish males and females that must meet to breed. time of day is tracked and influences animal behavior. none of the challenge tasks like adding plants, weather or disease appear to be attempted. ",1
Correctness,"the core simulation tasks appear to be completed. there are at least 5 acting species (shark, piranha, salmon, sardine, seaweed, shivamfish) with predators and non-predators. sharks and piranhas compete for some shared prey. the species distinguish male and female individuals for breeding. time of day is tracked and influences behaviors. however, the weather and disease extension tasks do not appear to be fully implemented. the gui displays the simulation but does not visually distinguish between animal types.",1
Correctness,the file statisticsview does not compile,1
Correctness,the implementation is good but not distinguishable. different animals/fishes do not have different color so difficult to comprehend.,1
Correctness,"the provided code does not compile successfully due to a missing rabbit class. the code references a rabbit class, but only a rat class is present in the provided files. this is a significant correctness issue that prevents the program from running.",1
Correctness,"the simulation appears to be working as described in the assignment. all base tasks are completed, including at least 5 acting species (tiger, lion, hyena, antelope, zebra), with at least 2 predators (tiger, lion, hyena) and 2 non-predators (antelope, zebra). tigers and lions compete for antelopes as a shared food source. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with some behaviors differing between day and night (e.g. some animals sleep at night). multiple challenging extension tasks were implemented as well, including plants that grow and can be eaten by some animals, weather that changes and impacts animal behavior and plant growth, and disease that can spread between animals. the graphical simulation interface looks great and provides useful stats.",1
Correctness,"the simulation appears to be working as described in the assignment. all core tasks are completed - there are 5 acting species (wolf, lion, leopard, sheep, horse), with wolves, lions and leopards as predators and sheep and horses as non-predators. wolves and leopards compete for sheep and horses as shared food sources. males and females are distinguished and must meet to breed. time of day is tracked and affects behavior. some challenge tasks like weather and plants are also implemented. however, it seems the disease challenge task was not attempted.",1
Correctness,"the simulation appears to be working as described in the assignment. all core tasks are completed - there are 5 different acting species (antelope, crocodile, elephant, lion, giraffe), with lions and crocodiles as predators competing for antelopes, and elephants, giraffes and antelopes as non-predators. males and females are distinguished and creatures only propagate when a male and female meet. time of day is tracked and some creatures exhibit different behavior at certain times, like sleeping at night.

in addition, several impressive challenge tasks have been implemented, demonstrating technical excellence and creativity. this includes simulating plants that grow and are eaten, changing weather that influences behavior, and diseases that can infect and spread between animals. ",1
Correctness,"the simulation appears to be working as described in the assignment. all core tasks are completed, including at least 5 acting species (shark, sealion, penguin, salmon, krill), with at least 2 predators (shark, sealion) and 2 non-predators (penguin, salmon). the shark and sealion compete for penguins as a shared food source. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with animal behavior differing between day (active) and night (sleeping). several challenge tasks are also implemented, such as plants, weather affecting temperature and animal behavior, and disease transmission between animals of the same species. ",1
Correctness,"the simulation appears to be working as described in the assignment. all core tasks have been completed, including at least 5 acting species (tiger, zebra, mouse, lion, hare), with at least 2 predators (tiger, lion) and 2 non-predators (zebra, mouse, hare). the lion and tiger compete for zebras as a shared food source. males and females are distinguished and must meet to propagate. time of day is tracked and impacts behaviors. several challenge tasks were also implemented, like adding plants (grass), weather that impacts grass growth, and disease that can spread between animals. ",1
Correctness,"the simulation appears to be working as intended based on the description in the assignment. all core tasks have been completed - there are at least 5 acting species (rat, fox, rabbit, human, cat), with rats and foxes as predators and rabbits as non-predators. the fox and cat compete for rabbits as a shared food source. the species distinguish males and females that need to meet to propagate. time of day is tracked, with some creatures like cats and foxes only acting at night.

several challenge tasks have also been implemented, demonstrating originality and technical excellence. this includes the addition of plants (grass, bushes, trees), weather that influences grass growth, and diseases like cold, cat flu and black death that spread between animals.",1
Correctness,"the simulation appears to be working correctly based on the requirements. it includes at least 5 acting species (lion, hyena, zebra, hippo, antelope), with lions and hyenas as predators competing for zebras, and zebras, hippos, and antelopes as non-predator species. the species distinguish males and females and can only breed when they meet. the time of day is tracked and impacts breeding behavior. plants (grass) are also simulated and grow at different rates based on weather. earthquakes and disease spread are implemented as challenge tasks. ",1
Correctness,the simulation finished the core and challenge task well.,1
Correctness,the simulation has 4 kinds of species but the core tasks need at least 5 species. and it finished the challenge task by adding plants and virus.,1
Correctness,"the simulation has 4 kinds of species, which did not satisfy the 5 species requirement of core tasks. the good side is that it introduces grass as challenge task.",1
Correctness,"the simulation has 5 kinds of species and it finished the challenge task by adding grass, weather and disease",1
Correctness,the simulation has 5 kinds of species and it finished the challenge task by adding human factor,1
Correctness,the simulation has 5 kinds of species and it finished the challenge task by adding weather.,1
Correctness,"the simulation has 5 kinds of species: cheeta, lion, giraffe, gazelle and zebra. it introduces grass as challenge task.",1
Correctness,the simulation has 6 kinds of species and it finished the challenge task by adding plants.,1
Correctness,"the simulation has 7 kinds of species but after simulating 700 steps, it only ends up with lake and grass. the other animals are all dead, which is a issue.",1
Correctness,the simulation has 8 kinds of species to finish the core tasks.  it finished the challenge work by adding disease.,1
Correctness,"the simulation includes at least 5 acting species (fox, rabbit, plants, vulture, nuts, squirrel, mouse), with foxes and vultures as predators, and rabbits, squirrels and mice as non-predators that eat plants/nuts. foxes and vultures compete for rabbits and squirrels as shared food sources. the species distinguish males and females which must meet to propagate. time of day is tracked, with some creatures like rabbits and squirrels not moving at night. one of the challenge tasks, adding plants, was also implemented successfully. however, one flaw is that the fox and rabbit classes from the original template were retained instead of being fully replaced by new species.",1
Correctness,"the simulation includes at least 5 acting species (hare, wolf, cow, bear, deer), with wolves and bears as predators and hares, cows, and deer as non-predators. wolves and bears compete for some of the same food sources. the species distinguish males and females, requiring them to meet to propagate. time of day is tracked, with hares moving and feeding during the day but only giving birth at night.",1
Correctness,"the simulation is working as described in the assignment, with all core tasks completed. the challenge tasks of adding plants and weather have been implemented successfully. plants grow and are eaten by some animals, and weather changes over time, influencing animal behavior and plant growth.",1
Correctness,"the simulation meets all the core requirements as outlined in the assignment. it includes at least 5 acting species (lynx, wolf, deer, hamster, plant), with lynx and wolf as predators and deer and hamster as non-predators. the lynx and wolf compete for deer as a shared food source. the species distinguish males and females which must meet to propagate. time of day is tracked, with nocturnal vs diurnal behavior for different species.

in addition, several challenge tasks were implemented to a high standard, demonstrating originality and technical excellence. weather effects impact animal breeding and plant growth. diseases like wolfflu and animalflu can infect animals and spread between them.",1
Correctness,"the simulation models 5 species and introduced the weather and grass, weather and disease for the challenge task; this work finished the core work and the challenge task.",1
Correctness,"the simulation models 6 species but all of them are shown by black squares, which is hard to distinguish them. the good side is that it introduces the weather and disease as challenge tasks. what is more, it designs a nice gui to make it user-friendly.
",1
Correctness,"the simulation models multiple species: dory, bluewhale, dophin, shark, nemo and orca. this work introduced the plants for the challenge works.",1
Correctness,"the simulation models multiple species: leopard, cheetah, impala, plant, rhino and boar but it ends up with plants after 800 steps. this work introduced the time and weather for the challenge works.",1
Correctness,"the simulation models several acting species and added the weather, plnt for the challenge task. this work finished the core work and the challenge task successfully.",1
Correctness,"the simulation models several species: antelope, cheetah, fox, hyena, lion, rabbit, zebra, which are represented by different color squares. this work finished the core work but it skipped the challenge task.",1
Correctness,"the simulation models several species: wolf, fox, rat, goat and rabbit and added the weather, plague for the challenge task. this work finished the core work and the challenge task successfully.",1
Correctness,"the simulation models several species: wolf, horse, plant, sheep, leopard and lion. the issue is that the simulation did not work well. this work finished the core work unsuccessfully and it added the plant and weather for the challenge task.",1
Correctness,the simulation runs but slows down to a snail's pace after 90 steps. after crossing a 100 it barely runs. not a useful implementation. ,1
Correctness,"the simulation should have at least five different kinds of acting species but this submission only has 4 species. after simulating 200 steps, it only ends up with hamster and the other animals are all dead, which is a issue.",1
Correctness,"the simulation works as described in the assignment and all core and challenge tasks are completed. there are at least 5 acting species including cheeta, lion, giraffe, gazelle and zebra. the cheeta and lion are predators that compete for the same food source of gazelles and zebras. genders are distinguished for the species and they can only breed when a male and female meet. the time of day is tracked, likely influencing some creature behaviors. plants are simulated and eaten by the prey animals. weather effects like rain and storms impact plant growth. disease can infect and spread between animals. ",1
Correctness,"the spawngrass() method in the grass class allows grass to grow in any adjacent gap, even if there is already grass there. this causes the grass to grow indefinitely. completed all basic requirements and some challenge tasks. however, due to parameter settings and some logical problems, the system was unable to maintain balance for a long time and eventually evolved into a single species ecosystem.",1
Correctness,the student has completed all baseline tasks to a good level. some challenges have been implemented with plants and weather effects on agents. the challenge additions are relatively simple but are implemented competently,1
Correctness,the student has gone above and beyond with implementing all requirements to an exceptional standard and adding their own unique additions such as the simulation initialiser. ,1
Correctness,the student has implemented all baseline requirements to a good standard and has added challenge tasks such as weather and plant life. including multiple types of plants shows some uniqueness.,1
Correctness,the student has implemented all baseline requirements to a high standard and has added some challenge additions such as plant life and weather based behaviours. the weather based behaviours are simple ,1
Correctness,the student has implemented all baseline requirements to a high standard. challenge extensions have been implemented including weather effects and plants (bamboo). weather affecting plant growth is a nice addition,1
Correctness,the student has implemented all baseline requirements to a high standard. challenges extensions such as plants and disease are also implemented well. predators catching diseases from prey and snakes propagating asexually shows creativity ,1
Correctness,the student has implemented all baseline tasks to a good standard and have also implemented extensions such as weather and plants. the simulations once instantiated unfortunately terminate very quickly which some parameter tweaking  would fix,1
Correctness,the student has implemented all baseline tasks to a high standard and has had fun implementing challenge additions such as adding dragons. the inclusion of time and weather based behaviours is effective (such as plants growing at different rates depending on the weather and nocturnal animals). the ui is also implemented well with colours changing based on the current weather time,1
Correctness,the student has implemented both the baseline and challenge features to a very high level. the student has shown creativity by implementing vector-borne diseases. the inclusion of weather and plants as additional extensions shows a comprehensive range of skills. ,1
Correctness,the student has implemented the baseline requirements to a good standard and has implemented challenge extensions such as weather and disease spread. the coursework instructions have been followed closely.,1
Correctness,"the student has implemented the baseline requirements to a high standard and has added challenge tasks such as infection spread, weather, and plant life. the student has shown innovation through the ui for changing model parameters ",1
Correctness,"the student has implemented the baseline tasks to a high standard and have added additional challenge tasks such as weather, plants, and disease spread. a basic ui has also been implemented with start and stop buttons which is an innovative addition",1
Correctness,the student has met all baseline requirements and has implemented some of the challenge extensions including weather-based behaviours and plants. ,1
Correctness,the student has met all baseline requirements to a high standard. the student also implemented challenge additions such as plants and weather. the additions have been implemented well with good encapsulation and extensibility,1
Correctness,the student has met all baseline tasks and has tackled challenge additions with innovation. the plantlife is interesting and the weather effects are concise but effective,1
Correctness,"the student has met all the baseline requirements and has implemented them well. the student has also implemented all challenge tasks including plants, weather, and infection spread.",1
Correctness,the student has met all the baseline requirements to a good degree. plants and weather have been added as challenge extensions. the simulation runs well and produces interesting patterns of behaviour,1
Correctness,the student has submitted the original task code unmodified with no extensions,1
Correctness,"the student implemented a creative and highly competent model fulfilling all baseline requirements and challenge tasks. the extensions made to the model are impressive and implemented well. the time-of-day implementation is somewhat basic, using a day/night system, however, the impact of this on agent behaviour is impactful.",1
Correctness,the student implemented all baseline requirements to a good standard. one challenge extensions was added in the form of basic infection spread. ,1
Correctness,the submission does not cover any of the requirements in the coursework.,1
Correctness,"the submission finishes all base and challenge tasks correctly. what is more, it designs a simple gui for an enhanced user experience.",1
Correctness,"the submission finishes the base task and add weather, plant, water resources as the challenge task. however, after running the simulation for 500 steps, only frogs are live and all other organisms are dead.",1
Correctness,the submission is merely the handout code.,1
Correctness,"the submission uses 5 animals and add weather, plants, disease as the challenge tasks. however, after running 200 steps of simulation, only rabbits are live and the population of all other species end up with 0.",1
Correctness,the weather implemented as part of time rather than separate functionality,1
Correctness,"there are at least 5 animals created. at least 2 of them do not fight for any resource, while at least 2 of them fight for the same resource. the time of the day changes the behaviour of the animals in the code and the animals can give birth only if they are different gender. challenges implemented: plants + weather + diseases.",1
Correctness,"there are at least 5 animals, and 5 of them are predators. there are at least 2 animals that do not look for prey. the animals give birth based on combinations between males and females. time of the day is present. challenges: weather conditions + plants + diseases + graph.",1
Correctness,"there are at least 5 animals, from which at least 2 compete for the same resource, while at least 2 do not compete for any animal. the time of the day is included in the behaviour of the animals. giving birth is based on male and female. challenges added: weather + disease + plants.",1
Correctness,"there are at least five animals created. at least two of them fight for the same prey, while at least two of them fight for no resource. the time of the day is kept and there is a distinction between male and female. extra features: plants added + weather + disease + the possibility of viewing different species in the ui.",1
Correctness,there are at least five animals from different species. there are two animals that do not hunt and two animals that fight for the same resource. some of the species distinguish between male and female. the program keeps track of the difference between day and night and the animals act differently. extra features added: disease.,1
Correctness,"there are at least five animals, at least 2 of them are predators, and at least two of them fight for the same resource. the program keeps track of the time of the day and giving birth is based on different genders. extra challenges: plants + diseases + weather conditions.",1
Correctness,"there are at least five animals. two of them do not hunt, while there are two animals that fight for the same prey. the program distinguishes between male and female. the program keeps track of the time of the day. extra features implemented: plants. disease and weather not sufficiently explored.",1
Correctness,"there are at least five classes of animals created. two of them compete for the same resource, and at least two of them are not predators. the run depends on the specific weather conditions and time and giving birth depends on the combination between a male and a female. challenges added: plants + diseases + weather.",1
Correctness,there are at least five classes of animals. at least two of them fight for the same prey and at least two of them only eat grass. giving birth is based on males and females and the code keeps track of the time of the day. challenges implemented: plants + diseases + weather. the fourth extra feature does not display correctly.,1
Correctness,there are at least five classes that have at least 2 animals that compete for the same resource and at least 2 animals that do not look for any resource. time differences are not presented for the interaction. there is a distinction between males and females and the way new animals are created. challenge tasks added: diseases.,1
Correctness,"there are at least five different species that are created. at least two of the species do not fight for prey, while at least two of the other species do not fight for any of the resources. the program keeps track of the time of the day and there is a difference between a male and a female. extra features: disease + weather conditions.",1
Correctness,"there are at least five different species. al least two of them do not fight for any prey, while two of them fight for the same resource. there is a distinction between males and females and the species act differently between day and night. extra features: plants + disease + weather.",1
Correctness,"there are at least five different species. at least two of them fight for the same prey, while at least two of them do not fight for any other species. the time of the day has an influence on the behaviour of the animals. there is a distinguish between males and females. extra features: disease + weather + plants.",1
Correctness,"there are at least five species created. at least two of the do not fight for any resource, while at least two of them fight for the same resource. when breeding, there is a difference between males and females. there is no difference in terms of the behaviour between day and night. extra features added: plants + weather + disease.",1
Correctness,"there are at least five species created. at least two of them do not fight for any resource, while at least two of them fight for the same one. there is not difference for the behaviour for day and night. there is a distinguish between males and females, but it is not required when they give birth. no extra feature added.",1
Correctness,"there are at least five species created. at least two of them do not fight for any resource, while at least two of them fight for the same resource. the program keeps track of the day/night, but in a simple manner. there is a difference between males and females. extra features: plants + disease.",1
Correctness,"there are at least five species created. at least two of them do not fight for any resource, while at least two of them fight for the same resource. there is a difference between males and females in terms of behaviour and time of the day changes the behaviour of the species. extra features: plants + weather + disease.",1
Correctness,"there are at least five species created. at least two of them only fight for plants, while at least two of them fight for the same resource. there is a difference in terms of breeding between males and females. during the day, all the species are active, and not active during the night. extra challenges: plants. the weather and the disease are not complex enough.",1
Correctness,"there are at least five species created. there are at least two animals that fight for the same resource. there are at least two species that do not fight for any prey, while there are at least two animals that fight for the same prat. the program keeps track of the time of the day and of the differences between males and females. extra features: plants added - in the form of grass.",1
Correctness,"there are at least five species created. there are at least two of them that do not look for pray, while two of them look for the same species to prey. the behaviour of the animals change between day and night. the animals do not consider a difference between males and females. extra features added: none to an extent that can be considered relevant.",1
Correctness,"there are at least five species created. there are at least two species that do not fight for any prey. the way that the species fight for the same resource is not quite correct. animals behave differently based on the time of the day. also, the program distinguishes between a male and a female. extra features: weather + plants. disease is not complex enough.",1
Correctness,"there are at least five species defined. there are at least two species that do not look for prey, while there are at least two species that fight for the same resources. there is a difference in terms of behaviour between a male and a female and between day and night. extra features: weather + disease + plants.",1
Correctness,"there are at least five species of animals. at least two of the have the same prey, while at least two of them do not fight for the same resource. the program distinguishes between males and females and the species have different behaviour between day and night. extra: plants added + disease. the weather feature is not complex enough.",1
Correctness,"there are at least five species that are created. there are at least two species that fight for the same resource, while there are at least two species that do not fight for any resource. the behaviour changes based on the time of the day and there is a difference of breeding between males and females. extra features added: plants + disease + weather.",1
Correctness,"there are five animals created, where at least two fight for the same resource, and at least two do not fight for a resource. however, the approach is different. the time of day is specified, and the animals give birth based on different combinations of males and females. challenges added: plants + diseases + weather. however, the approach is not correct as it does not contain classes for each animal and all the simulation happens inside one single class, which is not desirable.",1
Correctness,there are minor errors in the application; all base tasks are completed; and challenges tasks are also completed.,1
Correctness,"there are minor errors in the code, and no challenge task was attempted.",1
Correctness,"there are not at least 5 animals created. at least 2 of them fight for the plant, while there are not at least 2 of them that are predators. the breeding is based on different genders. the time of the day affects the behaviour of at least 2 species. challenges added: plants + disease + weather.",1
Correctness,there are only four animals created and at least 2 of them compete for the same resource. there are not at least two animals that only eat plants and do not search for prey. male and female individuals are distinguished. there are correct characteristics for day and night. additional challenges implemented: grass added + conditions added + disease added.,1
Correctness,there are only four different species that are used. there are not 2 species that fight for the same resource. the program keeps track of the time of the day. extra features: plants as rocks/trees.,1
Correctness,there does not seem to be any addition of code written by the individual in addition to the code handout. ,1
Correctness,"there is a significant amount of duplication which also follows a poor naming scheme. this is not a correct implementation of a program, although after removing much of the duplicates it compiles.",1
Correctness,"there is no night time behaviour (the sleep method is never called), therefore the core tasks are incomplete.",1
Correctness,"there is no night time behaviour, therefore the core tasks are incomplete.",1
Correctness,"there is no predator and non predator indication classes, all species are extended from one base animal class.
almost all base tasks and all challenge tasks are implemented",1
Correctness,"there is no time specific behaviour of acting creatures or plants, therefore the core tasks are incomplete.",1
Correctness,"this solution is different from others as it represent characteristics of electronic devices rather than animals. 

however breeding is not characteristic of electronic devices, i would prefer more clear documentation  there why device has breeding age? how the process will happen, is there any opposite gender?

implementation is unique and good abstraction levels are used, but documentation or namings could be improved to make user understand about some points. for example, what does hunger means in context of this implementation?  if it is low battery, then using poweroff would be more clean instead of die",1
Correctness,"this student has completed all tasks, providing some documentation for how the tasks are completed. overall quite good at organising methods and classes for completing the different tasks.",1
Correctness,this submission completes the core task partially because it forgot to keep track of the time of day. it adds disease and plant factors as challenge tasks.,1
Correctness,"this submission completes the core task successfully and add earthquake, weather and plant factors as challenge tasks.",1
Correctness,"this submission completes the core task successfully. however, it skips the challenge tasks.",1
Correctness,"this submission does not keep track of the time of day, which is one requirement of core tasks. what is worst, it skips the challenge task.",1
Correctness,"this submission is limited to utilizing only two animal species and does not incorporate a time-of-day tracking feature. furthermore, it falls short of completing the challenge tasks. overall, it does not fulfill the requirements for both the base and challenge tasks.",1
Correctness,this submission sets 5 animals but it does not keep track of the time of day. it introduces plants as the challenge task.,1
Correctness,"this submission sets 7 species but it forgot to keep track of the time of day. what is worst, it skips the challenge task.",1
Correctness,this submission simply does not compile even all the files have been downloaded,1
Correctness,this work did not define runlongsimulation() function so it cannot run directly.,1
Correctness,time feature is not implemented. others have been implemented. ,1
Correctness,"time of day does not directly effect actor behaviour, can only  result in weather changes that do indirectly",1
Correctness,time of day does not have an effect on any acting species behaviour,1
Correctness,time of day not implemented.,1
Correctness,tried to do something with weather but no weather object observed + there is no infection of disease + no time check ,1
Correctness,unclear what the natural disasters do; they just kill the organism and doesn't change their behaviour. ,1
Correctness,using human as a speciy is a bit confusing since implementation of behavior findfood and eatplant replicate humans as an animal ,1
Correctness,very creative and completes all core and challenging tasks,1
Correctness,"very creative, good additions to project such as showing diseased and norma animals, core and challenging tasks completed",1
Correctness,"very good design, base and challenge tasks well developped",1
Correctness,"very good implementation of both base and challenge tasks, but the simulation stops fairly quickly",1
Correctness,very great. more thoughtful than others.,1
Correctness,very interesting implementation and good balance of the simulator. ,1
Correctness,"very slow code (didn't lose marks for this).
all basic tasks and one challenge completed.",1
Correctness,"very well balances simulation, challenges well implemeted, good behaviour. well done !",1
Correctness,"very well implemented, good behaviour of the simulation, run very long, good ideas in the design and challenges well implemented. great job !",1
Correctness,"weather doesn't affect behaviour, but instead has chance of giving disease ",1
Correctness,"weather implemented, but has no effects on actors.",1
Correctness,"weather not implemented, disease assigned but not used",1
Correctness,"while the simulation includes all the required species and behaviors from the core tasks, and implements some challenge tasks, there appear to be issues with balancing the populations. the sheep reproduce and survive at a much higher rate than the other species, leading to them overtaking the entire simulation. this suggests some of the breeding, feeding, and survival parameters may need adjustment to create a more stable ecosystem.",1
Correctness,"whilst the base tasks were correctly implemented, the challenge tasks were incorrectly configured and instead of operating in the same simulation, the plant and natural disaster classes launch in separate simulations and do not interact with the animals.",1
Correctness,"why is grass extending the animal class?
some basic tasks completed, only 1 challenge task completed.
gender doesn't seem to matter then breeding.",1
Correctness,"within 100 steps, all animals die and program ends, this is a very short time. plants dont seem to grow",1
Correctness,works well but stops fast ,1
Correctness,you seemed to have forgotten to call the setdead function when it gets overcrowded. also you have no effects for sleeping at night.,1
Documentation,"each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. well documented.",31
Documentation,"it is good, though not perfect.",19
Documentation,"solid use of comments and javadocs, however sometimes displays some overcommenting on lines which have obvious functionality. ",19
Documentation,"no report, some code not explained",13
Documentation,"overall, it is great.",12
Documentation,solid use of comments and javadocs.,12
Documentation,good use of comments. each function block commented. ,11
Documentation,missing return and parameter comments for some methods,9
Documentation,the documentation consists of comments that are somewhat useful in understanding the code; there are missing comments,7
Documentation,the documentation consists of comments that are useful in understanding the code and/or structure of the program;,6
Documentation,"with clear, well-written documentation",6
Documentation,comments are clear and concise,5
Documentation,comments for the fields generally state the obvious. functional comments are generally ok and explain the purpose of its function. documentation on arguments and return types is ok.,5
Documentation,generally good documenation. comments are useful and concise,5
Documentation,generally good documentation.,5
Documentation,appropriate and insightful comments.,4
Documentation,appropriate commenting at beginning and through each file.,4
Documentation,"clear, concise, accurate documentation. ",4
Documentation,good documentation,4
Documentation,missing student number and k number in file header,4
Documentation,the code is accessible and maintainable,4
Documentation,"the code is exceptionally well documented. each class and method has clear, detailed comments describing its purpose and parameters. in-line comments explain complex logic. files contain header comments.",4
Documentation,the documentation is well written and organised,4
Documentation,"the documentation is well written, organised and clearly explains what the code is accomplishing and how",4
Documentation,very well documented,4
Documentation,well documented,4
Documentation,appropriate but somewhat overcommented.,3
Documentation,code is well documented,3
Documentation,comments for non existent params,3
Documentation,"did not add student name and number as header for each file.
some obvious comments. no report.",3
Documentation,generally good documentation. some comments are verbose,3
Documentation,"generally included comments on all methods. however, some state the obvious which seems to be redundant.",3
Documentation,good documentation where necessary.,3
Documentation,"good use of comments at the beginning of each file, and in each function. some comments could be added.",3
Documentation,great documentation,3
Documentation,missing overrides for methods in child classes,3
Documentation,missing return comment in method header comments ,3
Documentation,overall good comments and documentation across the code. however some documentation states the obvious.,3
Documentation,"reasonable use of comments and javadocs, however sometimes displays some overcommenting on lines which have obvious functionality. further, some comments have clearly been copied from other classes and been left unchanged.",3
Documentation,the base tasks are achieved and some challenge tasks are also attempted. the code provides good readability with detailed comments. the simulator view can be improved by specifying the representation of the colors.,3
Documentation,the comments are somewhat useful in understanding the code.,3
Documentation,the use of meaningful comments and documentation ,3
Documentation,well organised and make the code easy to understand,3
Documentation,  generally well documented with some repetition.,2
Documentation, effective documentation,2
Documentation,better than most of the others.,2
Documentation,better than others.,2
Documentation,comments are clear and concise and explain sections without being overly verbose.,2
Documentation,comments are clear and useful - every file includes header information.,2
Documentation,comments are useful and not overly verbose,2
Documentation,comments rarely state the obvious. generally good descriptions of the purpose of each function and its arguments.,2
Documentation,"did not add student name and number as header for each file.
some obvious comments. some places missing comments.",2
Documentation,"each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. lot of typos in comments.",2
Documentation,generally good comments on all methods and parameters.,2
Documentation,generally well documented - comments are used fittingly and do not over-explain code,2
Documentation,"good documentation, easy to understand the functions and what they do.",2
Documentation,good use of comments but some could be explained better. each function block commented. ,2
Documentation,good use of comments but some more could be added. each function block commented. ,2
Documentation,great! it is better than others.,2
Documentation,involves the use of meaningful comments and documentation ,2
Documentation,lack of comments explaining large code blocks.,2
Documentation,missing param and return comment in method header comments ,2
Documentation,missing param and return comment in method header comments.,2
Documentation,missing report and no student name and number on each file,2
Documentation,most classes and methods have clear header comments explaining their purpose.,2
Documentation,no attempt made,2
Documentation,"no report, some code not explained, repeated files.",2
Documentation,"no report, some missing comments, some obvious comments",2
Documentation,solid use of comments and javadocs however the codebase would benefit greatly from a spellcheck to to comments and perhaps ,2
Documentation,"some class and method are not accompanied by comments that clearly explain their role, inputs, outputs, and behaviors.",2
Documentation,some comments state the obvious,2
Documentation,some function handles too much responsibility and no documentation is offered. some comments rather state the obvious,2
Documentation,some methods are missing comments on their parameters and return values.,2
Documentation,some portions of the code are not commented enough.,2
Documentation,the base tasks are achieved and one challenge task is attempted. the code is generally well-commented and the readability of the code is good. the simulator view can be improved by specifying the representation of the colors.,2
Documentation,the documentation consists od comments that are some-what useful in understanding the code.,2
Documentation,the documentation is evident,2
Documentation,the documentation is simply comments embedded in the code but does not help the reader understand the code.,2
Documentation,the documentation is simply comments embedded in the code but does not help the reader understand the code;,2
Documentation,the documentation is well-written and organised and clearly explains what the code is accomplishing and how.,2
Documentation,the submission is the same as the original folder,2
Documentation,very clear and detailed documentation,2
Documentation,very good documentation,2
Documentation,"well explained code, but no report",2
Documentation,well organised,2
Documentation,well-documented code,2
Documentation,"you forgot to write your name and k-number on each file.
some comments about functions are irrelevant. but mostly useful comments.",2
Documentation,"your documentation is thorough and well-organized, significantly aiding in the understanding of the code's functionality. each class and method is accompanied by clear comments explaining its purpose, parameters, and return values. including header information in every file further demonstrates your attention to professional coding standards.",2
Documentation,all entities are documented to a high standard using javadoc annotations and effective descriptions of methods. more complex code blocks are also commented effectively,1
Documentation,all the comments needed,1
Documentation,almost perfect. some confusion between animal and organism in function descriptions.,1
Documentation,appropriate and insightful comments. not running the line of overcommenting.,1
Documentation,appropriate commenting at beginning and through each file. although some extra comments should be added.,1
Documentation,appropriate commenting at beginning and through each file. although some extra moments should be added.,1
Documentation,broadly good. some variables in functions missing descriptions. documentation not available for weather enum.,1
Documentation,class and method comments are present but fairly minimal. they state the obvious in many cases rather than providing insights into the code. ,1
Documentation,"class and method level comments are present, giving a high-level overview of functionality. however, the comments are fairly sparse - more description of key methods, parameters and return values would help future maintainers.",1
Documentation,classes and functions are clearly documented,1
Documentation,"classes and methods have some comments describing their purpose. some complex sections of code have explanatory comments. however, the documentation could be more thorough - for example, describing what each class represents in the simulation, or the purpose of key variables. not all methods have documentation for their parameters and return values. ",1
Documentation,"classes and methods have some comments explaining their purpose. some important methods have descriptive comments. however, documentation is a bit inconsistent - some methods and logical blocks lack comments where they would be helpful to understand the code.",1
Documentation,clear and complete documentation,1
Documentation,clear and concise documentation,1
Documentation,clear and detailed documentation,1
Documentation,clear documentation,1
Documentation,"clear documentation, every function and class is explained well",1
Documentation,code is documented well.,1
Documentation,code is generally documented well. some unnecessary comments.,1
Documentation,code is generally explained well if it is unclear.,1
Documentation,code is missing documentation where necessary.,1
Documentation,code is well documented but seems to be the same as the default submission.,1
Documentation,code where variables are unclear is not documented well.,1
Documentation,"comments are not fully supportive of the code, hard to make out what some functions do. ",1
Documentation,comments are sparse.,1
Documentation,"comments clear, but more comments would have been welcomed.",1
Documentation,comments could provide more details on what classes are being used given the structure of the repository. generally good comments on function purpose and parameter types.,1
Documentation,comments for the fields generally state the obvious. functional comments are generally ok and explain the purpose of its function however some do not have comments to explain its purpose. documentation on arguments and return types is ok.,1
Documentation,"comments for the fields generally state the obvious. functional comments often explain the purpose of the function, however, some longer functions have a short description. documentation on arguments and return types is ok.",1
Documentation,comments for the fields generally states the obvious. functional comments are generally ok and explain the purpose of its function. documentation on arguments and return types is ok.,1
Documentation,comments for the fields generally states the obvious. functional comments are generally ok and explains the purpose of its function. documentation on arguments and return types are ok.,1
Documentation,comments generally state the obvious for the constants. some magic literals require more explanation. some comments are informative for the longer functions.,1
Documentation,comments present at beginning of file. more and more detailed comments could be included throughout.,1
Documentation,comments present at beginning of file. more and more detailed comments could be included.,1
Documentation,comments useful and well added,1
Documentation,"comments were correctly added, but the code is too simplistic.",1
Documentation,comprehensive documentation ,1
Documentation,comprehensive javadoc coverage for all classes.,1
Documentation,"confusion between animal class names in description of functions. also incorrect description of grass behaviour, i.e. is documented as eating antelopes.",1
Documentation,consistent errors in describing function arguments.,1
Documentation,contains short comments throughout some functions suggesting that the function is a little too long. inconsistent placement for the method description. some descriptions for functions are too short.,1
Documentation,copy paste issues are  persisted in documentation comments,1
Documentation,correct,1
Documentation,could be better.,1
Documentation,descriptions of some classes are missing,1
Documentation,"did not add student name and number as header for each file.
some obvious comments. no report. didn't follow submission guide, should of been only 1 folder with all files but folder has another folder.",1
Documentation,"documentation broadly good, however the description of the findfood method is incorrect for most of the animals.",1
Documentation,documentation copied and pasted. inaccurate comments.,1
Documentation,documentation defines every function and class ,1
Documentation,documentation is clear ,1
Documentation,documentation is clear and defines every class and function,1
Documentation,documentation is clear and describes the functions well,1
Documentation,documentation is clear and easy to follow,1
Documentation,documentation is clear and explains all functions and classes,1
Documentation,documentation is clear and explains all functions correctly,1
Documentation,documentation is clear and explains each class and function well,1
Documentation,"documentation is clear, explains every class and function",1
Documentation,documentation is informative and well structured,1
Documentation,"documentation is lacking in some areas, and there are some unnecessary comments. ",1
Documentation,"documentation is lacking when needed, and incorrect in some places.",1
Documentation,documentation is mostly sufficient. it is unclear what disease does.,1
Documentation,documentation is succinct and well meaning.,1
Documentation,documentation is sufficient where necessary.,1
Documentation,documentation very precise,1
Documentation,documentation well structured and clear,1
Documentation,documented very well,1
Documentation,documented well however not all functions are documented or explained well.,1
Documentation,"documented well, functions and classes are defined",1
Documentation,documented well. every function is defined,1
Documentation,"doucmented well, eays to understand and follow",1
Documentation,"each argument and return type are clearly labeled. however, some field comments state the obvious. logical comments explain the function purpose.",1
Documentation,"each class and interface has a clear comment at the top explaining its purpose. key functions have comments explaining what they do, and comments are present to clarify non-obvious logical blocks of code. every file has a comment with the version number. the inline documentation strikes a good balance between explaining the code without being excessive.",1
Documentation,each class and method has clear header comments describing its purpose. some key sections of code within methods also have inline comments explaining their logic.,1
Documentation,"each class and method has clear, well-written documentation. class documentation summarizes the overall purpose. method docs clearly explain the parameters, return values and what the method does. some key sections have inline comments explaining complex logic. the documentation is quite thorough and helpful for understanding the code.",1
Documentation,"each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviours. well documented.",1
Documentation,each class and method is clearly documented with its purpose and parameters. in-line comments explain complex logic. files have header comments. documentation is concise and useful without being overly verbose.,1
Documentation,each class has a comment at the top describing its purpose. key methods like act() and givebirth() have clear doc comments explaining arguments and functionality. the code has in-line comments explaining non-obvious operations. the author and version are listed.,1
Documentation,empty submission,1
Documentation,"every part well structured, and well-commented",1
Documentation,every section well commented,1
Documentation,every section well documented,1
Documentation,explanatory comments could be added,1
Documentation,"fields' comments generally state the obvious. for the longer functions, more explanation is needed for its action. other comments generally describe the purpose of the function well.",1
Documentation,fields' comments generally state the obvious. other comments describe the purpose of the function and good explanation of the argument and return types.,1
Documentation,files does not include student name or number,1
Documentation,"for comprehensive documentation, each class and method, especially public ones, have clear javadoc comments explaining their purpose, parameters and return values.",1
Documentation,function parameter and return values are not expressed in comments,1
Documentation,functions and classes are well documented - mistake in header information of insect,1
Documentation,"functions are documented well, explains what happens in each one",1
Documentation,"functions variables well documented, but lacks general documentation",1
Documentation,"generally good comments on all methods and parameters. however, some comments have proven to be too long suggesting that the method is doing too much perhaps.",1
Documentation,generally good comments on return types and description of function. contains short comments throughout some functions suggesting that the function is a little too long.,1
Documentation,"generally good comments to explain what the code is trying to do, although some confusion caused by some comments.",1
Documentation,generally good concise documentation explaining code,1
Documentation,generally good documentation. ,1
Documentation,"generally good documentation. some incorrect documentation may be due to copied and pasted code, or lack of proofreading.",1
Documentation,generally good documentation. some inline comments are better placed in the method documentation.,1
Documentation,generally good documentation. some lines could use with some better explaining.,1
Documentation,generally good documentation. some missing javadoc tags/inconsistent usage of javadoc tags.,1
Documentation,generally good documentation. some superfluous comments left over from copied and pasted code.,1
Documentation,generally good documentation. there are some incorrect/needless comments in some classes.,1
Documentation,generally good quality documentation. some lines are placeholders which have not been re-written.,1
Documentation,generally good quality documentation. some lines are still placeholders.,1
Documentation,generally good use of comments and documentation to explain behaviours of animals behaviour.,1
Documentation,generally good use of comments and documentation to explain behaviours on animals behaviour.,1
Documentation,generally good. incorrect variable specification for the function act in all animal classes.,1
Documentation,"generally included comments on all methods. however, some states the obvious which seems to be redundant.",1
Documentation,generally okay comments on all methods and parameters.,1
Documentation,"generally, good comments have been applied throughout the program.",1
Documentation,good clear documentation ,1
Documentation,good documentation every function is understandable and well defined.,1
Documentation,good documentation however some comments are copied and pasted and are inaccurate,1
Documentation,good documentation makes the code easily understandable.,1
Documentation,"good documentation where necessary. some documentation is incorrect, likely due to copied and pasted code, or lack of proofreading.",1
Documentation,"good documentation, but a bit short in parts of the code",1
Documentation,"good documentation, but hard to understand the structure of your code",1
Documentation,"good documentation, every function is described well",1
Documentation,"good documentation, function are well defined ",1
Documentation,"good documentation, functions are defined well and easy to understand. classes have definitions explaining what they are .",1
Documentation,"good documentation, functions are explained well",1
Documentation,good documentation.,1
Documentation,good documentation. comments are provided where necessary. ,1
Documentation,"good use of comments at the beginning of each file, and in each function.",1
Documentation,good use of comments but some inconsistencies. each function block commented. ,1
Documentation,good use of comments but some more could be added. some incorrect comments. each function block commented. ,1
Documentation,good use of comments. each function block commented. some comments could be moved to increase readability.,1
Documentation,"good, clean code. class structure and hierarchy are intuitive and well laid out. appropriate level of commenting. almost all deliverables are completed.",1
Documentation,"good, clean code. class structure and hierarchy are intuitive and well laid out. appropriate level of commenting. almost all deliverables completed.",1
Documentation,good.,1
Documentation,"in general, the code is well documented with appropriate javadoc annotations. however, there is some inconsistency in the detail included in the documentation. for example, the 'propagate()' method in the lamb class does not provide details on the return value. ",1
Documentation,incomplete/incorrect documentation..,1
Documentation,inline comments explain well the purpose of complex logic.,1
Documentation,"lack documentation, always aim for too much rather than too little",1
Documentation,"lot of comments, clear and well strucutred",1
Documentation,"lot's of missing comments, especially around code blocks",1
Documentation,many classes have only a few in-line comments.,1
Documentation,"many function parameters, definitions and return values are missing descriptions.",1
Documentation,meets all the objectives of the rubric.,1
Documentation,method descriptions are occasionally missing arguments or referred to by different names.,1
Documentation,method descriptions are occasionally missing arguments.,1
Documentation,method descriptions occasionally have missing arguments or too many. ,1
Documentation,methods and variables documented well.,1
Documentation,missing documentation which causes variables not to be clear.,1
Documentation,missing param and return comment in method header comments. incorrect comments.,1
Documentation,missing param comment in method header comments ,1
Documentation,missing parameter comments for few methods,1
Documentation,"missing parameter comments for some methods, mixing up param and return headers",1
Documentation,missing parameter comments for some methods. missing class comment for some class,1
Documentation,"missing report and no student name and number on each file.
repeated comments.",1
Documentation,"missing return and parameter comments for some methods, aggressive use of inline comments",1
Documentation,"missing return and parameter comments for some methods, empty returns in method headers",1
Documentation,"missing return and parameter comments for some methods, missing method headers",1
Documentation,"missing return and parameter comments for some methods, misuse of header tags",1
Documentation,"missing return and parameter comments for some methods, some comments that give no further insight",1
Documentation,missing return comments for few basic methods,1
Documentation,missing some function and parameter descriptions. occasionally specifies parameters which are not required.,1
Documentation,missing some function and return value descriptions,1
Documentation,missing student name and number on each file,1
Documentation,"missing/confusing documentation for classes.
most of the explanatory comments are clear.",1
Documentation,missing/incomplete documentation.,1
Documentation,"most classes and functions have clear, useful comments explaining their purpose. a few more inline comments explaining complex logic would be helpful.",1
Documentation,"most classes and methods are documented and described well. some blocks of more complex code are also commented well. the student  does not use javadoc annotations or describe the inputs and outputs of methods. with the methods being very large, it would be helpful to provide more documentation",1
Documentation,"most classes and methods have clear commenting explaining their purpose. some methods and code blocks could use additional commenting, especially when performing complex operations. ",1
Documentation,"most classes and methods have clear comments explaining their purpose. some key methods like act() and breed() have detailed descriptions of the behavior. however, some comments are a bit sparse - adding a few more, especially for complex logic, would help code comprehension. class-level and file-level comments could also be more detailed in places.",1
Documentation,"most classes and methods have clear, descriptive comments explaining their purpose. some methods are missing parameter descriptions.",1
Documentation,"most classes and methods have clear, descriptive comments explaining their purpose. some parameters and return values could use additional documentation. in-line comments are used effectively to explain complex logic. class-level comments are present but could be more detailed in some cases.",1
Documentation,"most classes and methods have some level of documentation, providing a basic overview of their purpose. however, the documentation is not always comprehensive - some parameters and return values lack descriptions, and some complex logic could use more in-depth explanations. ",1
Documentation,"most classes, fields and methods have clear and useful documentation comments. the code itself is quite self-explanatory. header comments are present. the documentation could be slightly more thorough in a few places, but overall it is quite good.",1
Documentation,near perfect. minor omission of variable foodvalue from some functions.,1
Documentation,no changes were made to the default code provided.,1
Documentation,no changes were made to the default code provided. same code as the default files provided. no changes were made.,1
Documentation,no changes. same as the template provided. ,1
Documentation,no description for grass class,1
Documentation,no java source files were included in the submission - only java files and so the code cannot be compiled,1
Documentation,no javadocs used and some comments state the obvious.,1
Documentation,no modifications have been made to the original code distributed to students as part of the assignment. ,1
Documentation,no name and student number in each file.,1
Documentation,"no name and student number on each file, no report as well",1
Documentation,no student name or number on top of each file,1
Documentation,no submission,1
Documentation,"not all the methods describe the variables that they return. there are not enough comments for some of the methods, and some parts of the code are commented too extensively.",1
Documentation,not all the methods have comments before them. some parts of the code lack comments.,1
Documentation,occasional issue with missing arguments in function descriptions.,1
Documentation,"only some methods have docstrings, and additional inline comments explaining tricky logic would help a lot. header comments are inconsistently applied. some files are missing headers. ",1
Documentation,overall good considering this is a student project. some comments are unnecessary. the overall usage of the comment can be cleaner.,1
Documentation,overall good documentation in classes ,1
Documentation,overall good documentation. comments are not overly verbose,1
Documentation,redundant statements,1
Documentation,solid use of comments and javadocs however due to the fact the animals and seperated nicely into seperate classes means that it is tricky to understand what is going on without further comments.,1
Documentation,"some class and method are not accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. some typos in comments.",1
Documentation,"some class and method is not accompanied by comments (ex. environment.java, getyounganimal method in all animals) that clearly explain their role, inputs, outputs, and behaviors.",1
Documentation,some comments could be added. some state the obvious.,1
Documentation,some comments could provide more details on the longer function. generally good comments on function purpose and parameter types.,1
Documentation,some comments do not reflect the actual content of the code. some methods do not contain enough information to be easily understood.,1
Documentation,"some comments state the obvious and u have not described what some long piece of your code does.

you forgot to write your name and k-number on each file.",1
Documentation,"some comments state the obvious, no report and no student name on each file.",1
Documentation,some comments state the obvious.,1
Documentation,some comments state the obvious. good comments at the beginning of files.,1
Documentation,some comments state the obvious. good comments at the beginning of files. some could be added.,1
Documentation,some comments state the obvious. some comments make the functional lines too long which causes readability issues. furthermore good comments on functional purpose and its arguments.,1
Documentation,"some components of the code are not commented enough, especially in the graphview class.",1
Documentation,some components of the code do not have enough comments.,1
Documentation,"some documentation errors, a lot of comments are copied and pasted and not very clear",1
Documentation,some documentation states the obvious hence clutters the code even more. some return types are explained as generic comments which should be done through @return for javadoc. overall ok explanation for functional comments.,1
Documentation,some elements of the code are not properly commented on.,1
Documentation,some functions are missing descriptions,1
Documentation,"some inconsistencies however, majority of the documentation is clear and explains the function and classes",1
Documentation,"some incorrect documentation. otherwise, generally good documentation.",1
Documentation,some irrelevant or misleading comments for the functions. some classes are unexplained in terms of their purpose. some functions do not have return type comments and some states the obvious.,1
Documentation,"some methods are not commented at all. also, there are some methods that lack of comments.",1
Documentation,"some methods are not commented enough. in some places, the comments are not correct for the code provided.",1
Documentation,some methods are not documented.,1
Documentation,some methods from the code are not commented on enough. this applies to both methods and some variables.,1
Documentation,"some methods have a lack of comments, where the code is not explained enough.",1
Documentation,"some methods lack detailed comments, making it less clear why certain decisions were made",1
Documentation,some mistakes in documentation. a significant amount of documentation is lacking.,1
Documentation,some of comments are not clear ,1
Documentation,some of the characteristics of a species are not explained fully.,1
Documentation,"some of the comments are not correctly presented. some of the methods are not commented enough, and it becomes hard to understand the code.",1
Documentation,"some of the comments are placed in a wrong position. there are some methods that are not commented enough, so the code is hard to understand.",1
Documentation,some of the comments for the classes do not respect the content of the code. some components of the code are not commented sufficiently.,1
Documentation,some of the components of the code are not commented enough.,1
Documentation,some of the methods are not commented enough.,1
Documentation,some of the methods are not properly explained.,1
Documentation,"some of the sections of the code are not commented enough, and it is hard to understand the code. there are some sections in the code, where the lack of comments creates a problem to properly understand it.",1
Documentation,some parts of the code do not have enough comments.,1
Documentation,some places do not explain enough of how the methods work.,1
Documentation,some places lack documentation but overall code is well documented,1
Documentation,some very obvious comments,1
Documentation,"sometimes, the code lacks comments. the 'export' class is unnecessary and makes the code hard to understand. not all the contained comments are correctly added for each method. some methods do not have corresponding comments. many variables are not properly explained. this applies to many methods as well.",1
Documentation,student id missing from all the files.,1
Documentation,submission only contains original template,1
Documentation,submitted template ,1
Documentation,sufficient documentation where necessary.,1
Documentation,"the 'act' method is not explained sufficiently. thus, it is quite hard to understand what the code does. many methods are not commented enough. this also includes quote large blocks of code inside a specific method.",1
Documentation,"the assignment demonstrates satisfactory completion of base tasks with some room for improvement in fully meeting specified requirements and implementing challenge tasks. the code exhibits good organization, readability, and adherence to coding conventions, although documentation could be more comprehensive. ",1
Documentation,"the base tasks and the challenge tasks are achieved. it is suggested the students should provide detailed comments on the code for readability, especially in app.java. ",1
Documentation,"the base tasks are achieved and challenge tasks are also attempted. however, it is not very reasonable for the weather to change only within a few hours. the recovery rate of the infection is also not considered. the code provides good readability with detailed comments. the simulator view can be improved by specifying the representation of the colors. ",1
Documentation,the base tasks are achieved and challenge tasks are also attempted. the code provides good readability with detailed comments. the simulator view can be improved by specifying the representation of the colors.,1
Documentation,the base tasks are achieved and challenge tasks are attempted. it is suggested that the student should provide more detailed comments on the codes for better readability and improve the structure of the codes.,1
Documentation,the base tasks are achieved and challenge tasks are attempted. the code is generally well-commented and the readability of the code is good. the simulator view can be improved by specifying the representation of the colors.,1
Documentation,the base tasks are achieved and one challenge task is also attempted. the code is generally well-structured and provides good readability with detailed comments. ,1
Documentation,the base tasks are achieved and one challenge task is attempted. the code is generally well-structured and detailed comments are provided. it is suggested to specify the representation of the colors in the simulator view.,1
Documentation,the base tasks are achieved and some challenge tasks are also attempted. the code is generally well-structured and is provided with detailed comments for good readability.,1
Documentation,the base tasks are achieved and some challenge tasks are attempted. the code is generally well-commented and the readability of the code is good. the simulator view can be improved by specifying the representation of the colors. the code seems to fail to consider different behaviors of the animals in different times of the day.,1
Documentation,the base tasks are achieved and some challenge tasks are attempted. the code is well-commented and the readability is good. the simulation view can be improved by specifying the representation of the colors. the simulation process of the grass population also seems to be not very convincing.,1
Documentation,"the base tasks are achieved, and some challenging tasks are attempted. it is suggested that the student should provide more detailed comments on the code to improve readability. the simulator view can also be improved to specify the representation of the colors.",1
Documentation,"the base tasks are very well achieved, and some challenging tasks are also attempted. the code is well-commented and provides good readability. the representation of the colors can be clarified in the simulator view for further improvements.",1
Documentation,the code documentation is complete and of a good quality. appropriate descriptions of method params and return types are included and ,1
Documentation,"the code documentation is good overall, however, is inconsistent in places. in particular some methods are not annotated with inputs and output descriptions whilst others are",1
Documentation,the code has done a good job of completing base tasks as well as two challenge tasks. the code is generally well-structured and provides nice comments. the simulator view can be improved by specifying the representation of the colors.,1
Documentation,"the code includes comments describing the purpose of each class and method. however, the documentation could be more comprehensive. some complex logical blocks could benefit from more detailed comments to explain their functionality.",1
Documentation,"the code includes header comments for most classes and methods, providing an overview of their functionality. ",1
Documentation,the code includes useful comments explaining the purpose of each class and method. parameters and return values are documented. some complex logical blocks include explanatory comments,1
Documentation,the code includes useful comments to aid in understanding. each file has header information. the purpose of functions is documented. some non-obvious code blocks could benefit from additional comments.,1
Documentation,"the code is clean, understandable and organised",1
Documentation,"the code is comprehensively documented throughout. all classes, methods, and properties are described well and appropriate javadoc annotations are used to describe method inputs and outputs.",1
Documentation,"the code is documented to a good standard with good descriptions of methods, inputs, and outputs. however, some descriptions are copy-pasted between classes and so are incorrect (e.g. the bear class references the fox class in the variable descriptions)",1
Documentation,the code is documented to a high level throughout all classes and methods. the method inputs and outputs are described well,1
Documentation,the code is documented to a high standard throughout. parameter and output annotations are used well.,1
Documentation,the code is documented to a reasonable standard with all methods at least annotated. many methods are only annotated with their return values rather than also including a description. because of the good naming conventions this is largely acceptable,1
Documentation,the code is documented to a very high standard throughout. all classes and methods are described in detail with good use of annotations. good conventions are used for method descriptions,1
Documentation,the code is documented to a very high standard throughout. all classes and methods are described well and annotations are used to describe inputs and outputs of methods. ,1
Documentation,the code is documented to an exceptional standard throughout. all classes and methods are described very well and javadoc annotations are used appropriately,1
Documentation,the code is documented very thoroughly and to a high standard. all classes and methods are described well and include annotations describing their inputs and outptuts. some of the methods could benefit from additional in-line comments to add clarification.,1
Documentation,the code is documented very well overall all classes and methods annotated and described well. some method descriptions do not use the correct annotations to describe parameters,1
Documentation,"the code is documented very well throughout and shows a good understanding of javadoc. good, consistent, annotations are used for method inputs and outputs.",1
Documentation,"the code is documented very well throughout. each class, method, and property is described comprehensively and appropriate javadoc annotations are used to define method inputs and outputs.",1
Documentation,the code is documented very well with good descriptions across all classes and methods. appropriate annotations are used for method inputs and outputs. more complex methods are annotated with inline comments too.,1
Documentation,"the code is documented well for the most part with each class and method described well. however, some method inputs/outputs are not described at all.",1
Documentation,the code is documented well overall with good descriptions for each class and method. input and outputs for methods are annotated well. some class descriptions are copy-pasted without modification and so are incorrect in some instances,1
Documentation,"the code is documented well throughout each class, method, and property is described in good detail and the method inputs and outputs are described with appropriate javadoc annotations. some methods have not been documented at all (such as the jay findfood() method) ",1
Documentation,"the code is documented well with most methods being annotated and described well. getters and setters are not described, however, this is reasonable in most cases",1
Documentation,the code is exceptionally well organized and easy to follow. consistent indentation and spacing is used. method and variable names are meaningful. vertical whitespace separates logical blocks of code. access modifiers appropriately hide class internals. ,1
Documentation,the code is exceptionally well organized and very easy to understand. indentation and whitespace is used consistently and appropriately to separate logical blocks and improve readability. methods are focused and cohesive. variable and method names are clear and meaningful. the code follows java best practices and naming conventions.,1
Documentation,"the code is generally well-structured and accomplishes some tasks. however, in the simulation, it seems the grasshoppers are not finding grass, and the grass is surrounded by hawks. the code provides readable comments. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes some tasks. however, the simulation process shows that eventually all the animals will be infected, which seems to be not a very reasonable phenomenon. the code provides readable comments. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. it seems not reasonable that wolves quickly extinct at the beginning of the simulation. 
it is suggested to provide more accurate comments. for example, ""wolves age, move, eat rabbits, and die"", but rabbit is not included in the system. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. one challenge task is also attempted. however, it seems to be not reasonable that the hedgehog will eventually take over the system through simulation. the code provides some readable comments. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenge tasks are also attempted. 
the code provides readable comments. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,the code is generally well-structured and accomplishes the base tasks. some challenge tasks are also attempted. it is suggested to break down some complex methods into smaller and manageable methods for better readability. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.,1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenge tasks are also attempted. it is suggested to show the grass on the simulator view.
the code provides readable comments. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. 
readable comments are provided. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. however, it seems all predator animals can eat all prey animals, so lion and jaguar eating ant seems not a reasonable setting.
it is suggested to provide more accurate comments to improve readability. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. in the simulator view, it seems the animals are not moving.
it is suggested to provide more accurate comments to improve readability. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. it is suggested to provide more accurate comments to improve readability. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.,1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. some comments on class descriptions are missing, and it is suggested to provide more accurate comments. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. the simulator view can be improved by showing the infected number of each species.
readable comments are provided. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,"the code is generally well-structured and accomplishes the base tasks. some challenging tasks are also attempted. the system can be improved by incorporating the actions of plants.
it is suggested to provide more accurate comments to improve readability. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.",1
Documentation,the code is generally well-structured and accomplishes the tasks. it is suggested to provide more accurate comments to improve readability. it is also suggested to provide general documentation with detailed elaborations on how the system is accomplished.,1
Documentation,the code is generally well-structured and accomplishes the tasks. the code is well-commented and readable. it is suggested to provide more detailed documentation with elaboration on how the system is achieved by each class. the readability of the code can be better by replacing some magical numbers with named constants and avoiding some duplication.,1
Documentation,"the code is mostly easy to read, but many sections do not have enough comments, while some sections have redundant comments.",1
Documentation,"the code is mostly well-documented, but there are some places in the code where the comments are not present.",1
Documentation,"the code is thoroughly documented. each class and method has a clear, well-written javadoc comment explaining its purpose and parameters. inline comments are used judiciously to clarify complex or non-obvious logic. some classes use comments to separate logical blocks of code.",1
Documentation,the code is very well documented across each class. the methods are described well with good javadoc annotations for method parameters and return types,1
Documentation,the code is very well documented with appropriate use of javadoc annotations for method input and outputs,1
Documentation,the code is very well documented with each class and containing method described well. appropriate javadoc annotations are also used throughout.,1
Documentation,the code is very well documented with each class and method described well. inputs and outputs are also described well with javadoc annotations,1
Documentation,"the code is very well documented. each class and method has a good, comprehensive description. appropriate javadoc annotations are used throughout",1
Documentation,"the code is very well documented. each class and method has clear, concise comments explaining the purpose and functionality. important variables have useful comments as well. the header comments are detailed and include the key information. ",1
Documentation,"the code is very well documented. each class, method and property is described in appropriate detail. suitable javadoc annotations are also used throughout",1
Documentation,"the code is very well documented. nearly every class, method and complex code block has clear, useful comments explaining the purpose and functionality. header comments provide good high-level documentation for each file. ",1
Documentation,"the code is very well documented. nearly every class, method and complex code block has clear, useful comments explaining the purpose and functionality. header comments provide good high-level documentation for each file. javadoc style is used effectively.",1
Documentation,"the code is very well documented. the classes and methods are described to an excellent standard , inputs and outputs are described in detail.",1
Documentation,"the code is well documented and explained, every method has explanation and every variable is explained.",1
Documentation,the code is well documented throughout,1
Documentation,the code is well documented throughout with good use of javadoc annotations to describe parameters and return values. sufficient detail is given in the documentation to describe each class and method ,1
Documentation,"the code is well-structured and accomplishes the base tasks as well as some challenges. the code is well-commented, readable and easy to understand. it is suggested to provide a more detailed documentation with elaboration on how the system is achieved by each class. the readability of the code can be better by replacing some magical numbers with named constants and avoiding some duplication.",1
Documentation,"the code is well-structured, and tasks are very well achieved with good simulator views. the code is well-commented, readable and easy to understand. it is suggested to provide more detailed documentation with elaboration on how the system is achieved by each class. the readability of the code can be better by replacing some magical numbers with named constants and avoiding some duplication.",1
Documentation,"the codebase is very well documented throughout. all classes, methods and properties are described well. javadoc annotations are used effectively to define method inputs and outputs",1
Documentation,"the comments are useful in understanding the code, however, the code is incomplete",1
Documentation,"the configurations class has no explanations about its utility. in many sections of the code, there is a lack of comments. there are multiple redundant comments. the way the comments are used does not show good practice. many classes are not explained enough in the comments.",1
Documentation,the documentation consists of comments that are some-what useful in understanding the code.,1
Documentation,the documentation consists of comments that are somewhat useful in understanding the code; there are minor issues,1
Documentation,the documentation consists of comments that are useful in understanding the code and structure of the program,1
Documentation,the documentation consists of comments that are useful in understanding the code.,1
Documentation,the documentation consists of comments that are useful in understanding the code/structure of the program.,1
Documentation,"the documentation is complete and comprehensive. each class is described well, each method and property are described in detail and appropriate javadoc annotations are used to define method inputs and outputs. more complex blocks of code are also commented well",1
Documentation,the documentation is complete and well-written. the javadoc annotations are used well to define parameters and return values. meaningful descriptions are provided for all code.,1
Documentation,"the documentation is comprehensive and well-written. each class and function is thoroughly documented with clear explanations of their purpose, parameters, and return values.",1
Documentation,the documentation is excellent. each class and method has a clear comment explaining its purpose. important methods have a descriptive docstring detailing the parameters and return values. in-line comments highlight key logical steps in the code without being excessive.,1
Documentation,"the documentation is excellent. each class and method has a clear, well-written comment explaining its purpose, parameters and return values. key variables are documented. header comments provide a class overview. the documentation allows the code to be easily understood and maintained.",1
Documentation,"the documentation is of very high quality and is complete for each class, function, and description of each complex block of code. ",1
Documentation,"the documentation is thorough and well-written. each class and method includes a clear description of its purpose, parameters, and return values. important code blocks are documented to explain non-obvious operations. ",1
Documentation,"the documentation is well-written, organised and clearly explains what the code is accomplishing and how",1
Documentation,the documentation of comments is useful in understanding the code or structure of the program.,1
Documentation,the documentation of the code is competent overall however there is a lack of consistency. some descriptions of classes have been copied-and-pasted leading to confusion. javadoc annotations are used appropriately and all properties are described well.,1
Documentation,"the student demonstrates a solid understanding of object oriented principles and simulation modelling concepts. there is room for minor improvements in code readability and documentation, the implementation is effective and meets the requirements outlined.",1
Documentation,"the student has documented the classes and methods well. each block is described well with appropriate use of javadoc annotations. unfortunately, the code does include commented-out dead code.",1
Documentation,the student has submitted the original task code unmodified with no extensions,1
Documentation,"the submission includes a large number of classes, and still each is documented well. appropriate javadoc annotations are used for parameters and return values of methods. each class and method is described well",1
Documentation,the submission is identical to the provided sample code.,1
Documentation,the submission is merely the handout code.,1
Documentation,the tasks are well achieved. the code is generally well-structured and provides readable comments. it is suggested to specify the representation of colors in the simulator view.,1
Documentation,there are class-level and method-level comments explaining the purpose of each class and method. some key variables are also commented. this makes the overall structure and intent of the code much clearer.,1
Documentation,there are lack of comments in some places,1
Documentation,there are many areas in the code where the behaviour is not correctly and completely explained.,1
Documentation,there are some locations in the code that lack of comments and other explanations.,1
Documentation,there are some parts of the code that are hard to read because there are not enough comments. there are some methods that are not explained at all.,1
Documentation,"there are some sections in the code that do not contain enough comments, and it becomes hard to understand.",1
Documentation,there are some sections where there are not enough comments. some of the comments do not correspond,1
Documentation,there does not seem to be any code added to the handout that is the work of the individual,1
Documentation,"this assignment consists of a lot of code duplication which can be optimized well, there are some issues in the documentation like copy/paste issues, not clearly defined behavior descriptions, and variable naming issues and format problems",1
Documentation,"this submission consists of some naming issues, unused methods, and confusion in the usage of this and super. ",1
Documentation,this submission is completely identical to the submission by student 682. plagiarism is considered.,1
Documentation,this submission is completely identical to the submission by student 97. plagiarism is considered.,1
Documentation,"unclear, no documentation for most files",1
Documentation,unnecessary paragraph tags in comments. some sections contain redundant comments.,1
Documentation,very good detailed documentation,1
Documentation,very good documentation. descriptions of classes are a little verbose.,1
Documentation,very minimal documentation. ,1
Documentation,very well documented. every comment explains each line of code perfectly.,1
Documentation,well commented,1
Documentation,well documented ,1
Documentation,"well documented, easy to read and understand ",1
Documentation,"well documented, every function and class has good comments to help understand what they do.",1
Documentation,well thought comments at beginning of file and explaining non-obvious operations.,1
Documentation,well-structured documentation,1
Documentation,"where code has hard to read blocks, there is insufficient documentation on how it works.",1
Documentation,white-space missing between functions in some files.,1
Readability,"the code demonstrates a high level of organisation, consistent indentation, and meaningful identifier names.",20
Readability,"the codebase demonstrates a high level of organisation, consistent indentation, and meaningful identifier names.",18
Readability,"appropriate function, class and variable names used. indentation and general code structure is clear. good use of self-contained classes.",16
Readability,easy to read.,16
Readability,"it is readable, though not perfect.",15
Readability,"good variable and functions names, missing some comments",14
Readability,"the code is clean, understandable and organised; the student used meaningful identifier names",14
Readability,"great function, class and variable names used. indentation and general code structure is clear. great use of self-contained classes.",12
Readability,code is clear and follows consistent structure,8
Readability,code is understandable and organised,6
Readability,"good variable naming and use of private and public, protected used when class has no subclasses",6
Readability,protected where private could be used,6
Readability,consistent indentation. some inconsistent whitespace. meaningful identifier names used. good use of private/public.,5
Readability,"generally good identifier names for functions and variables and consistent level of indentation. however, some conditions and functions can be slightly too long or have multiple responsibilities.",5
Readability,generally good readability.,5
Readability,"good maintainability, extensibility, and debuggability of the code.",5
Readability,"good variable naming, public used where could be private",5
Readability,minor issues with extra whitespace.,5
Readability,"appropriate function, class and variable names used. indentation and general code structure is clear.",4
Readability,code is readable with good function and variable names being used,4
Readability,code structure is intuitive and predictable.,4
Readability,code uses consistent spacings - good function and variable names are used.,4
Readability,consistent indentation and whitespace. meaningful identifier names used. good use of private/public.,4
Readability,good readability.,4
Readability,"meaningful identifier names, good whitespace, appropriate public/private, function performs single operation.",4
Readability, well-commented,3
Readability,adopts a clear and logical flow.,3
Readability,"appropriate identifier names, function performs single operation, public/private could be improved",3
Readability,"clear naming conventions, consistent formatting, and well-organized structure. ",3
Readability,generally good identifier names and indentation. some function has side effects or are overly long.,3
Readability,generally the functions are quite consistent and functions are not excessively long. good function and identifier names in general.,3
Readability,"generally, good identifier names are used. some functions might be a little long or involve many conditional levels.",3
Readability,"good identifier names, semi-appropriate public/private, function performs single operation.",3
Readability,good.,3
Readability,"high readability in code is achieved through clear naming conventions, consistent formatting, and well-organized structure. ",3
Readability,the application has minor issues such as inconsistent indentation.,3
Readability,"the code is clean, understandable and organised.",3
Readability,"the code is clean, understandable and organised; the student used meaningful identifier names.",3
Readability,the variables are defined well and the codes are easy to understand.,3
Readability,clear and concise coding style,2
Readability,code is readable and consistently spaced.,2
Readability,"code is readable and understandable, they are ordered in a consistent manner.",2
Readability,code readability can be improved by using consistent spacing,2
Readability,"concise, clean and well organised.",2
Readability,confident indentation and whitespace. meaningful identifier names used. good use of private/public.,2
Readability,each function performs a single well-defined operation; the student used meaningful identifier names,2
Readability,easy to read,2
Readability,easy to read ,2
Readability,excessively long conditions should be extracted for ease of interpretation. generally good identifier names and indentation. some function has side effects.,2
Readability,formatting and naming could be  more proper,2
Readability,"generally good identifier names and nice indentation and white spaces for segregating methods. however, some functions seem a little long.",2
Readability,generally good identifier names and nice indentation for segregating methods.,2
Readability,generally good. occasional excess white-space,2
Readability,"generally, good identifier names for functions and variables however, some conditions and functions can be slightly too long or have multiple responsibilities. indentation sometimes is inconsistent to the rest of the project",2
Readability,good code readability.,2
Readability,good comments but some state the obvious,2
Readability,good function and variable names,2
Readability,good function and variable names.,2
Readability,good readability and clarity,2
Readability,good use of variable names. some comments state the obvious but mostly good. ,2
Readability,it is easy to navigate and understand.,2
Readability,"meaningful identifier names, appropriate public/private. some functions do not perform single operation.",2
Readability,"namings could be improved, in java we should name static variables with letters that all upper, otherwise camelcase should be followed. ",2
Readability,no attempt made,2
Readability,overall very readable code for functions and appropriate use for identifier names.,2
Readability,overall very readable code for functions appropriate use for identifier names and good visibility use for methods.,2
Readability,public where private could be used,2
Readability,some disorganisation with the classes and files included.,2
Readability,some method names are misleading,2
Readability,the application is exceptionally well-organised and very easy to understand.,2
Readability,the application is well organised; the student used indentation appropriately and consistently to delineate code blocks.,2
Readability,the code is greatly readable ,2
Readability,the code is somewhat challenging to read.,2
Readability,"the code is well organized and easy to understand. good use of meaningful class, variable and method names. indentation and whitespace is used consistently. some longer methods could potentially be refactored into smaller single-purpose methods to further enhance readability.",2
Readability,the code is well organized and readable. indentation and whitespace are used consistently. variable and method names are clear and meaningful. ,2
Readability,"the code is well-organized, consistently indented, and uses meaningful names, whitespace and consistent spacing. methods are focused and classes encapsulate data and behavior appropriately. this makes the overall program quite easy to read and understand.",2
Readability,the submission is the same as the original folder,2
Readability,"though it can be understood, it should be better even for a student (because the original example is very readable.)",2
Readability,very neatly structured and ordered,2
Readability,"
- class names should begin with upper letter in java
- variable names should be camelcase, usually static variables is named with uppercase letters
-missing/unclear documentation for some of the classes 
- code formatting is missing in some classes ",1
Readability, meaningful comments and documentation,1
Readability,'wildlife' or 'spring' are hard to reused as they do not provide enough information.,1
Readability,.,1
Readability,a few hacky lines and strange name choices but overall good quality layout.,1
Readability,"a significant amount of commented out code. generally good readability, otherwise.",1
Readability,"all caps snake case variables should be reserved for final, absolute variables. generally good readability otherwise.",1
Readability,application contains inconsistent indentation.,1
Readability,"appropriate function, class and variable names used. indentation and general code structure is clear. classes could be better encapsulated.",1
Readability,"appropriate function, class and variable names used. indentation and general code structure is clear. good use of self-contained classes. but could be organised in a simpler way without packaging actors.",1
Readability,"appropriate function, class and variable names used. indentation and general code structure is clear. good use of self-contained classes. some over-complicated methods.",1
Readability,"appropriate identifier names, function performs single operation, public/private should be improved",1
Readability,"as many methods are not explained correctly, the code is hard to understand. also, there are many classes, subclasses and interfaces that are not required.",1
Readability,bad indentation. mostly appropriate use of variable names.,1
Readability,better class and variable naming should be used.,1
Readability,broadly good readability however some functions have extra white-space and poorly placed comments.,1
Readability,"clear, variables well named",1
Readability,code easy to read and to understand,1
Readability,code generally reads well. some inconsistencies in documentation styling.,1
Readability,"code has some blocks that are not easy to understand, and could use some further documentation.",1
Readability,code is clean and generally readable.,1
Readability,code is clean and simple to read,1
Readability,code is clear and follows a consistent  structure,1
Readability,code is consistently organised and written well. very easy to read.,1
Readability,code is organized well and consistently spaced.,1
Readability,code is readable and consistently spaced,1
Readability,code is readable and consistently spaced ,1
Readability,"code is readable and consistently spaced,",1
Readability,code is readable and follows a consistent structure,1
Readability,code is readable and follows consistent structure,1
Readability,code is readable and follows good structure,1
Readability,code is readable and kept consistency throughout the project,1
Readability,code is readable and organized well.,1
Readability,code is readable and well organized.,1
Readability,code is readible but seems to be the same as the default submission.,1
Readability,code is simple and readable. ,1
Readability,code is structured consistently ,1
Readability,code is understandable and well organised,1
Readability,"code is very readable, consistently spaced and good identifier names.",1
Readability,code is well organized into logical classes and methods. indentation and whitespace is used consistently. variable and method names are clear and meaningful. methods are focused on single responsibilities. access modifiers are appropriately used to encapsulate data.,1
Readability,code is well structured ,1
Readability,code is well-formatted with consistent indentation and whitespace usage. methods are focused and names are meaningful. public vs private access is used appropriately. the code is easy to follow and self-explanatory.,1
Readability,"code not very easy to read, names of variables not explicit. ",1
Readability,code reads well.,1
Readability,code styling is consistent.,1
Readability,code suffers from whitespace inconsistencies and needlessly long lines.,1
Readability,code very easy to read,1
Readability,code very easy to understand and meaningful identifier names are used,1
Readability,code very well strucutred and easy to understand,1
Readability,code well strucutred and easy to read,1
Readability,concise and readable.,1
Readability,"concise code, but there is some dead code in comments.",1
Readability,"consistent formatting, and well-structured",1
Readability,consistent indentation and whitespace. meaningful identifier names used. more classes could be made private.,1
Readability,consistent indentation and whitespace. meaningful identifier names used. some protected classes could be made private.,1
Readability,consistent indentation and whitespace. meaningful identifier names used. work can be done on private/public.,1
Readability,consistent indentation. some inconsistent whitespace. meaningful identifier names used. good use of private/public. self-contained classes.,1
Readability,"consistent naming conventions and a clear, logical structure",1
Readability,"despite the fact that there are some format, naming issues overall sumbission is easy to understand. some optimizations can be applied",1
Readability,easy to follow and understand,1
Readability,easy to follow and understand the code,1
Readability,"easy to follow the strucure, variable names wisely chosen",1
Readability,"easy to follow, good choice of names for the variables",1
Readability,"easy to follow, good variables, straightforward",1
Readability,"easy to read and understand, variable names clear",1
Readability,easy to read and well structured,1
Readability,"easy to read, good choise of variable names",1
Readability,"easy to read, good job",1
Readability,"easy to read, good variable names and well structured",1
Readability,"easy to read, well structured, good variable names",1
Readability,"easy to understand, good choice of variable names",1
Readability,"easy to understand, some redundant statements",1
Readability,empty submission,1
Readability,"excess white space. class variables could be grouped for clarity, e.g. static vars. ",1
Readability,"excess whitespace, occasional indentation issues.",1
Readability,few variable names that were not meaningful.,1
Readability,follows a clean consistent structure,1
Readability,"follows consistent structure, files are separated into folders.",1
Readability,"for the findfood method, it is quite hard to understand what happens behind the code as the names themselves for the methods and variables do not explain enough. sometimes, the code is not split into lines and it becomes hard to read.",1
Readability,"formatting and method/class naming could be  more proper since some places namings are confusing, like getgender returns boolean, condition class keeps conditions which is too general",1
Readability,"formatting and naming could be  improved
- method/variable names should begin with lower case letters according to best practices
- check spelling virus instead of vrius
- use all upper case letter namings for static variables",1
Readability,generally good identifier names and indentation. however probably be much better if the trackreader and everything ui related be in another directory,1
Readability,generally good identifier names and nice indentation and white spaces for segregating methods.,1
Readability,"generally good identifier names and ok indentation for segregating methods. however, some functions are overly long and lack separation.",1
Readability,"generally good identifier names for functions and variables and consistent level of indentation. however, some functions can be slightly too long or have multiple responsibilities.",1
Readability,generally good readability,1
Readability,"generally good readability, otherwise.",1
Readability,generally good readability. some inconsistent spacing in places.,1
Readability,generally good readability. some minor erroneous spaces/tabs.,1
Readability,"generally good. some functions are very long, with many nested loops which does not aid readability.",1
Readability,"generally, codes are organized in cohesive ways. meaningful names are used for functions and variable names.",1
Readability,"generally, good identifier names for functions and variables however, some conditions and functions can be slightly too long or have multiple responsibilities. indentation sometimes is inconsistent with the rest of the project",1
Readability,"generally, good visibility on fields and functions and good use of arguments as some variables do not need to be passed all the time. however, this can lead to a long parameter list hence consider the use of dataclasses. occasional function size might be too long.",1
Readability,"generally, the code is clean and organized. good identifier names and indentation levels have been used throughout the project.",1
Readability,"generally, the code is clean and organized. good identifier names and indentation levels have been used throughout the project. classes are kept concise and clean.",1
Readability,"getter methods don't follow traditional naming convention, though understandable",1
Readability,good choice of variable and function names.,1
Readability,good choice of variable names but needed to add more comments explaining some functions.,1
Readability,good code readability. some inconsistent styling with if statements.,1
Readability,good consistent structure,1
Readability,good function and identifier names in general. however some functions have multiple responsibilities and they are too long.,1
Readability,good function and variable names but missing comments in some places.,1
Readability,"good function and variable names, well explained code",1
Readability,good maintainability,1
Readability,"good naming of variables, good structure",1
Readability,"good readability. some variable names not specific enough e.g. ""rand"" for a random number.",1
Readability,good use of function and variable names. some long functions that should of been broken down.,1
Readability,"good use of variable, easy to understand",1
Readability,"good variable and functions names, missing some comments
what's with the indentation?",1
Readability,good variable names but some functions are very long and not explained well.,1
Readability,"good variable naming, protected used in place of private for methods in classes with no subclasses",1
Readability,"great choice of variable, very well structured, easy and enjoyable to read",1
Readability,"great use of variables, easy to understand",1
Readability,hard to read.,1
Readability,high readability in code,1
Readability,"i see the effort, but they have made things worse.",1
Readability,inconsistent bracing style and tabs.,1
Readability,"inconsistent casing where unnecessary. generally good readability, otherwise.",1
Readability,inconsistent indentation,1
Readability,informative variable and function names,1
Readability,it is quite hard to find the place where the animals are defined. the code is not elegantly written and correctly stratified into multiple classes.,1
Readability,it is readable in general.,1
Readability,lots of inconsistent indentation and whitespace. meaningful identifier names used. good use of private/public.,1
Readability,"meaningful identifier names, appropriate public/private.",1
Readability,"meaningful identifier names, inconsistent spacing ",1
Readability,method names are suitable. methods encapsulate single responsibilities well. suitable access modifiers are used for class properties and methods. ,1
Readability,"method naming conventions are not correct:
method names should be verbs:
in java method names should begin with lowercase letter and camelcase.
formatting can be fixed in some regions of code",1
Readability,missing comments in some places but overall good.,1
Readability,more thoughtful than others.,1
Readability,no changes were made to the default code provided.,1
Readability,no changes were made to the default code provided. same code as the default files provided. no changes were made.,1
Readability,no java source files were included in the submission - only java files and so the code cannot be compiled,1
Readability,no modifications have been made to the original code distributed to students as part of the assignment. ,1
Readability,no submission,1
Readability,"not consistent, code is hard to read and follow",1
Readability,occasional unnecessary whitespace,1
Readability,okay readability. a lot of commented out code.,1
Readability,okay readability. breaklines between methods would be helpful.,1
Readability,"overall code readability is high with good property and method naming, code indentation, etc. some access modifiers are inappropriate - for example the act() and incrementage() behaviours in animals are public. ",1
Readability,overall good but method names could be improved,1
Readability,overall the code is clean and understandable. good use of indentation and identifier names throughout the project.,1
Readability,perfectly indented and readable,1
Readability,protected and public where private could be used,1
Readability,readability is generally good.,1
Readability,readability is good.,1
Readability,"reads well, no inconsistencies.",1
Readability,some areas are missing comments,1
Readability,some condition statement can be extracted as a method for more readability.,1
Readability,some inconsistent indentation  and whitespace. meaningful identifier names used. good use of private/public.,1
Readability,some inconsistent indentation and whitespace. meaningful identifier names used. good use of private/public.,1
Readability,some inconsistent indentation. consistent whitespace. meaningful identifier names used. good use of private/public.,1
Readability,"some inconsistent whitespace, appropriate variable names, good public/private",1
Readability,some inconsistent whitespace.,1
Readability,some methods do not present a correct layout. the spacing makes the program hard to read.,1
Readability,some of the methods are too long and are hard to read. more explanations are required as some components of the code are hard to understand.,1
Readability,some of the methods do not have a name that is suitable for the operation they perform. there are some methods that could be broken into multiple parts.,1
Readability,some parts of the card are hard to read as they are not commented with enough useful information.,1
Readability,some parts of the code are hard to read because the names assigned are not easy to understand and there are no helpful comments.,1
Readability,"some parts of the code have some odd spacing. also, some long methods are not described well enough to be easy to understand.",1
Readability,some spacing characteristics make the code hard to read.,1
Readability,some spacing in the code makes it hard sometimes to read.,1
Readability,some spacing in the code makes the readability a bit hard - there are some problems with the spacing.,1
Readability,"some spacing is not in place, and this makes the code hard to read sometimes. some methods are very long and it is very hard to read through the code.",1
Readability,some spacing makes the code hard to read through.,1
Readability,some unconvential shorthands are used for some variables. it is ,1
Readability,some variable and function names are difficult to understand,1
Readability,some variable names are difficult to understand,1
Readability,some variable names were not meaningful,1
Readability,some variables are not descriptive.,1
Readability,some whitespace inconsistencies and poorly structured code.,1
Readability,some whitespace inconsistencies. ,1
Readability,"sometimes, a bad design choice was chosen and the indentation is missing is some places.",1
Readability,"sometimes, the code is too crammed and it becomes hard to read.",1
Readability,"sometimes, the code is vague and hard to properly understand. some components lack proper explanation.",1
Readability,structured well,1
Readability,"styling is consistent, some commented out code",1
Readability,submission only contains original template,1
Readability,submitted template ,1
Readability,the 'predator' class does not make the code easy to refactor.,1
Readability,the application contains inconsistent indentation,1
Readability,the application has minor issues,1
Readability,the application has more than two issues that make the program difficult to understand.,1
Readability,the application has one or two issues that make the program difficult to understand such as poorly named identifiers and disorganised code.,1
Readability,the application has one or two issues that makes the program difficult to understand such as disorganised code,1
Readability,the application is exceptionally well organized and very easy to understand. indentation and whitespace are used consistently and appropriately. method and variable names are meaningful. comments are used effectively to explain less obvious code. the code follows java conventions and is easily readable.,1
Readability,the application is exceptionally well-organised and very easy to understand;,1
Readability,the application is well organised and easy to understand. consistent white spacing is used,1
Readability,"the code follows consistent indentation and naming conventions, making it easy to read and understand. methods and variables have meaningful names that convey their purpose. the use of whitespace and comments enhances readability. ",1
Readability,the code follows good naming conventions and is formatted consistently. meaningful variable and method names are used everywhere. whitespace and indentation are applied well to separate logical parts of the code. methods are focused and not overly complex. the code is easy to read and follow.,1
Readability,"the code formatting is decent, with consistent indentation and spacing. meaningful names are used for variables and methods. the code is organized logically and is fairly easy to follow.",1
Readability,"the code has good readability overall with consistent naming conventions and code formatting. however, there are some consistency issues with use of whitespace such as the space between 'protected' and 'int' in getter methods. some methods use inappropriate access modifiers such as the givebirth() method being public. getters and setters should be named as such",1
Readability,the code has good readability overall. appropriate naming conventions are used and code formatting is good in most cases. some consistency with curly brace placement could be improved such as whether the bracket starts on the line of the statement or the line after. appropriate access modifiers are used for methods and properties ,1
Readability,the code is clean and organised which makes it easy to understand,1
Readability,"the code is clean, understandable and organised",1
Readability,"the code is clean, understandable and organised, however the code is incomplete",1
Readability,"the code is clean, understandable, and well-organized. meaningful identifier names are used for functions and variables. white space is utilized to separate logical code blocks. indentation is consistent.",1
Readability,"the code is competently laid out, however there is a lack in consistency with formatting. the indenting of classes is messy and difficult to read, there is inconsistent spacing between operators and lines of code. some class methods such as the act() methods are too large to be maintainable",1
Readability,the code is easy to read due to its simplicity.,1
Readability,"the code is easy to read, but there are some places where it is not clear the behaviour of the methods.",1
Readability,"the code is exceptionally organized and easy to follow. your consistent use of indentation, meaningful variable names, and logical structuring of blocks enhances readability significantly.",1
Readability,"the code is exceptionally readable, with clear variable names and straightforward logic that any developer can understand.",1
Readability,the code is exceptionally well organized and easy to follow. consistent indentation and spacing is used. method and variable names are meaningful. vertical whitespace separates logical blocks of code. access modifiers appropriately hide class internals. ,1
Readability,the code is exceptionally well organized and very easy to follow. indentation and whitespace is used consistently. method and variable names are clear and meaningful. classes are focused and self-contained. the code follows java best practices and naming conventions.,1
Readability,"the code is exceptionally well organized and very easy to read. indentation and whitespace is used consistently and appropriately. method and variable names are meaningful (e.g. getid(), givebirth()). comments are present to explain important sections without being excessive. overall the code is very clean and easy to follow.",1
Readability,"the code is exceptionally well-organized and easy to understand. consistent indentation, meaningful identifier names, and appropriate use of whitespace enhance readability. each class and function serves a clear purpose, and the code follows good practices such as encapsulation and information hiding.",1
Readability,"the code is exceptionally well-organized and easy to understand. consistent indentation, meaningful variable and method names, and appropriate use of whitespace greatly improve readability. each class and method has a clear purpose, and the logic is easy to follow. the code adheres to good programming practices, making it highly readable and maintainable.",1
Readability,"the code is formatted very well with good naming conventions and formatting. access modifiers are used correctly and spacing, tabbing is generally good. some lines of code are too long. ",1
Readability,the code is generally clean and organized with consistent indentation and spacing. meaningful variable and method names are used.,1
Readability,the code is generally clean and well organized. indentation and white space are used consistently. variables and methods have clear names.,1
Readability,the code is generally readable and well-organized. class and variable names are meaningfu. related code is typically grouped together logically within each class. indentation and whitespace are used consistently.,1
Readability,"the code is generally well organized and readable. class, method, and variable names are descriptive. indentation and white space are used consistently. a few methods are on the longer side and could potentially be refactored into sub-methods to improve readability.",1
Readability,"the code is generally well organized, with clear naming of variables and methods. indentation and spacing is mostly consistent which aids readability. ",1
Readability,"the code is highly readable with good naming conventions, formatting, and whitespace. the methods are of a god size and appropriate access modifiers are used. the 'creatures' class should not have a plural name",1
Readability,"the code is mostly easy to read, and well stratified into classes and variables.",1
Readability,the code is organised to a professional standard. sound naming conventions are used throughout and appropriate access modifiers are used for all properties and methods. the code is well formatted and is therefore highly readable,1
Readability,the code is presented cleanly with good naming conventions and formatting. appropriate access modifiers are used throughout,1
Readability,the code is presented incredibly well with good naming conventions and formatting. correct access modifiers are used throughout,1
Readability,the code is presented reasonably well overall with good naming conventions. some of the formatting is inconsistent particularly with new-line and tabbing. some methods should have a more limited access modifier,1
Readability,the code is presented to a good standard with appropriate naming and use of access modifiers. some lines of code are too long and there is some inconsistent use of indentation.,1
Readability,"the code is presented to a high standard. the methods are structured well with good naming conventions, formatting and whitespace. formatting is consistent throughout",1
Readability,the code is presented very well with clear naming and formatting. appropriate access modifiers are used for methods. the methods themselves are formatted clearly,1
Readability,"the code is presented well overall with good naming conventions, formatting, and use of access modifiers. some methods are left unimplemented with just signatures remaining which should be avoided.",1
Readability,"the code is presented well throughout with good naming conventions, formatting, and use of whitespace. appropriate access modifiers are used throughout. ",1
Readability,the code is presented well with good consistent naming conventions and formatting. appropriate access modifiers are used throughout,1
Readability,"the code is presented well with good consistent naming conventions and overall good formatting. again, lengthy methods makes the readability of the code more challenging than it should be",1
Readability,"the code is presented well with good naming conventions and formatting. access modifiers are used appropriately. however, some spacing and tabbing is used inconsistently",1
Readability,the code is presented well with good naming conventions and formatting. some lines of code are too long and as such overrun. ,1
Readability,the code is presented well with good naming conventions and formatting. unfortunately some access modifiers are not appropriate with many methods being left public,1
Readability,"the code is presented well with good naming conventions, formatting, and access modifiers.",1
Readability,"the code is readable, but there are some places where the comments are redundant. however, it is easy to understand the code.",1
Readability,"the code is structured competently and appropriate method and property names are used for the most part. formatting of code within blocks is inconsistent - for example, the placement of curly brackets after if statements and for loops varies throughout the code. some methods, such as 'act()' are too large and contain disparate parts of logic that should ideally be separated into their own methods",1
Readability,"the code is very easy to understand and read. however, the way the values are named might be a bit ambiguous sometimes.",1
Readability,"the code is very well documented. each class and method has clear, concise comments describing its purpose, parameters and return values. important fields and blocks of code are documented. ",1
Readability,the code is very well organized and easy to follow. class and method names are meaningful making the purpose of each code block clear. indentation and white space is used consistently.,1
Readability,"the code is very well presented with good formatting, naming conventions, and use of access modifiers. naming the animals as destiny characters is interesting.",1
Readability,the code is well organised and meaningful identifier names are used for functions and variables,1
Readability,"the code is well organized and easy to follow. good naming conventions are used for classes, methods and variables. indentation and whitespace are used consistently. a few very long methods could benefit from being broken up for better readability.",1
Readability,"the code is well organized into clean, understandable classes and methods. indentation and whitespace is used consistently. method and variable names are clear and meaningful.",1
Readability,the code is well organized into logical classes and methods with clear names. indentation and whitespace are used consistently to separate code blocks. lines are not excessively long. ,1
Readability,the code is well presented and is easy to read. appropriate access modifiers are used throughout. good naming conventions and formatting is used throughout,1
Readability,the code is well presented and uses appropriate naming conventions. the access modifiers used for methods and properties are appropriate. the code formatting style is used consistently throughout.,1
Readability,"the code is well presented with good naming conventions, indentation, and separation of concerns. ",1
Readability,the code is well structured and highly readable. the naming conventions are good and the access modifiers are used appropriately. the formatting of the code is clean,1
Readability,the code is well structured and is readable. consistent formatting and appropriate naming conventions are used throughout. suitable access modifiers for methods and properties are also used. some methods (such as findfood) could be sub-divided into smaller contained methods.,1
Readability,"the code is well-developed and fairly easy to understand. however, not all the methods present their explanations of use.",1
Readability,"the code is well-organized and easy to follow. class and variable names are meaningful (e.g. incrementhunger, givebirth). indentation and whitespace is used consistently. methods are focused on single responsibilities. access modifiers are appropriately applied to fields.",1
Readability,the code is well-organized and easy to follow. classes are broken into logical methods. variable and method names are clear and meaningful. indentation and white space is used consistently and appropriately to separate logical blocks of code. ,1
Readability,the code is well-organized and easy to follow. indentation and whitespace are used consistently. ,1
Readability,the code is well-organized and easy to understand. classes are separated into logical files. naming of variables and methods is generally clear and meaningful. indentation and whitespace usage is mostly consistent. some longer methods could benefit from more explanatory comments or being broken into smaller sub-methods. ,1
Readability,"the code is well-organized and easy to understand. good naming is used for classes, methods and variables. indentation and whitespace is used consistently to enhance readability. methods are focused and perform clear tasks. comments are provided to explain less obvious sections of code.",1
Readability,the code is well-organized and very easy to understand. indentation and whitespace are used consistently and appropriately. variable and method names are meaningful and descriptive. classes are self-contained with proper access modifiers used.,1
Readability,the code is well-organized into separate files for each class. indentation and whitespace are used consistently and appropriately. method and variable names are clear and meaningful. logical blocks of code are spaced out with comments for readability.,1
Readability,"the code is well-organized, consistently indented, and easy to follow. class and method names are meaningful. whitespace is used well to separate logical blocks.",1
Readability,"the code is well-structured and easy to understand. meaningful class, method, and variable names are used throughout the project. indentation and whitespace are used consistently to improve readability. however, some methods, like the move() method in the animal classes, could benefit from additional comments or refactoring to enhance clarity.",1
Readability,"the code makes excellent use of inheritance with base animal, plant and species classes. behavior is customized through polymorphism and constants defined in species-specific data classes. this allows new species to be added easily. the simulator is well structured, encapsulating field and simulation state. the code is quite efficient, using enums for weather and time calculations. readability is not sacrificed.",1
Readability,"the code readability is high overall, however particular limitations have been noted. for example, some method names are not sufficiently descriptive, and some methods violate the single-responsibility principle.",1
Readability,the code readability is very high with good formatting throughout. good naming conventions and indenting is used and general ,1
Readability,"the code readability is very high with good presentation. good naming conventions and formatting is used throughout and classes are even organised according to their abstract, non-abstract methods in alphabetical order",1
Readability,the code seems sometimes a bit hard to read because of the lack of comments in some places and the stratification of the data.,1
Readability,the code use meaningful identifier names and are organized in a way that makes the logical flow of operations somewhat easy to follow. ,1
Readability,"the codebase is incredibly clean and well-organised. appropriate naming conventions, indenting, and formatting is used throughout. the access modifiers for properties and methods are correct. ",1
Readability,"the overall readability is relatively high. coding style, naming, and documentation across files are consistent. ",1
Readability,the program is well structured for readability. appropriate access modifiers are used and the formatting of code blocks is consistent and clean. good naming conventions are used throughout,1
Readability,"the readability of the code is exceptional with clear naming conventions, code formatting, and appropriate use of access modifiers. the code is clearly and consistently laid out with simplicity.",1
Readability,"the readability of the code is high in general with good, consistent formatting. the naming of entities is largely appropriate, however, the use of yellowy, bluy, etc. can be confusing and difficult to parse. access modifiers are used appropriately",1
Readability,"the simulator contains weather logic, ideally, weather should contain its logic and be called by the simulator.",1
Readability,"the student employs good naming conventions and code organisation. unfortunately, however, many fields and methods are public when they should be private or protected. the populationcontrols initialiser is difficult to read and hence may be difficult to maintain/ debug.",1
Readability,the student has submitted the original task code unmodified with no extensions,1
Readability,the student used indentation appropriately and consistently to delineate code blocks,1
Readability,the submission is merely the handout code.,1
Readability,"the use of hash maps makes the code quite hard to read through. 'gender' should not be a superclass, it makes the code quite hard to read. there are many places where the lack of comments makes the code hard to understand.",1
Readability,"there are a few instances where naming consistency could be improved.  for example, 't'.",1
Readability,there are functional lines that are too long. some functions contain many conditional levels. some are indented inconsistently. okay identifier names are used throughout the program.,1
Readability,"there are missing method descriptions, plus some descriptions are copy-pasted and the animals are not changed.",1
Readability,"there are some methods that are very long, but they could have been split into multiple ones.",1
Readability,there are two classes with the same name.,1
Readability,"this assignment consists of a lot of code duplication which can be optimized well, there are some issues in the documentation like copy/paste issues, not clearly defined behavior descriptions, and variable naming issues and format problems",1
Readability,"this student has kept each of the specific animal classes very minimal. functions are generally concise. generally, good identifier names and formats are used throughout the file. good uses of visibility on variables.",1
Readability,uncommented sections make the code hard to read as it is quite complicated to discover its functionality.,1
Readability,"variable and function names are descriptive and accurately reflect their purpose. however, absence of indentation in conditional statements reduces readability",1
Readability,variable and function names are descriptive and accurately reflect their purpose. white space is used between code blocks.,1
Readability,"variable naming can be hard to understand, e.g. x for plant death time",1
Readability,"variables names clear well chosen, easy to follow",1
Readability,"variables names wisely chosen, easy to follow the code.",1
Readability,very cleanly organized into folders and code is consistently maintained with white spaces and good identifiers,1
Readability,very easy and compact code,1
Readability,"very easy to follow, variable names clear, well strucutred",1
Readability,very easy to read,1
Readability,"very easy to read, clear and concise code",1
Readability,very easy to understand and to read,1
Readability,"very good use of variables, easy to follow",1
Readability,very readable code. informative variable names and good use of white space and indentation.,1
Readability,"very readable, code is consistently spaced and well organized",1
Readability,"very readable. variable names great, whitespace perfect.",1
Readability,"very readable. variable names great, whitespace used to good effect.",1
Readability,"very well written, code is simple and well maintained following an organized manner ",1
Readability,well structure and easy to read,1
Readability,"well structured, code is easy to read",1
Readability,with clear variable names and straightforward logic.,1
Readability,"within the givebirth method in animal class, many exceptions should not be present.",1
