assignment_number,skill,participant_id,feedback_1,feedback_2,sim
97.0,Code Elegance,11,Good usage of organism abstract class. animals extend prey or predator class which allows for code to not be rewritten,"good abstraction level, code is not rewritten and a lot of generalization",0.4757145
97.0,Correctness,11,unclear what the natural disasters do; they just kill the organism and doesn't change their behaviour. ,core and challenging tasks completed. added natural disasters,0.52251613
97.0,Documentation,10,This submission is completely identical to the submission by student 682. Plagiarism is considered.,This submission is completely identical to the submission by student 97. Plagiarism is considered.,0.8995806
97.0,Documentation,11,documented well. every function is defined,documentation is clear and defines every class and function,0.7436129
97.0,Readability,11,code is clean and simple to read,code is clear and follows consistent structure,0.6623362
144.0,Code Elegance,1,Class hierarchy allows addition of more organisms. Food chain class does not seem the best approach. The food chain should be able to be implied from the class hierarchy.,Class design is sensical. A lot of copied and pasted code.,0.31854495
144.0,Code Elegance,2,May be useful to have superclass for preys and predators to better differentiate between them,Code is written in a reusable manner by utilising abstract classes and loosely coupling components,0.23794274
144.0,Code Elegance,3,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.","Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",1.0000001
144.0,Code Elegance,4,Perfect use of the notion of the course and great creativity work to create a unique simulation. Very good job,Very well structured code,0.2856033
144.0,Correctness,1,Code is implemented well. Some challenge tasks are implemented.,Code runs well. Challenge tasks were attempted. A significant extension to the program has been attempted.,0.80479383
144.0,Correctness,2,All base tasks completed and most challenge tasks completed - Entities not influenced by weather,All base and challenge tasks completed,0.61946654
144.0,Correctness,3,"Core Tasks: All listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

Challenge Tasks:  Three challenge tasks are completed (Plants, Weather, Disease), demonstrating exceptional technical aptitude and creativity in extending the simulation beyond the basic requirements.

BlueJ: Run's in BlueJ without any issues.","Core Tasks: All listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

Challenge Tasks:  Three challenge tasks are completed (Plants, Weather, Disease), demonstrating exceptional technical aptitude and creativity in extending the simulation beyond the basic requirements.

BlueJ: Run's in BlueJ without any issues.",1.0000002
144.0,Correctness,4,"Runs very well, Very interesting proposition in the challenge tasks","Very good implementation of both base and challenge tasks, but the simulation stops fairly quickly",0.56379056
144.0,Documentation,1,Code is documented well.,Generally good documentation. There are some incorrect/needless comments in some classes.,0.5861063
144.0,Documentation,2,Generally good documenation. Comments are useful and concise,Code is well documented,0.42842314
144.0,Documentation,3,"Each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. Well documented.","Each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. Well documented.",1.0
144.0,Documentation,4,Very clear and detailed documentation,Very good documentation,0.7892677
144.0,Readability,1,Some whitespace inconsistencies. ,Code styling is consistent.,0.44036815
144.0,Readability,2,Code is readable with good function and variable names being used,code is understandable and organised,0.54250085
144.0,Readability,3,"The codebase demonstrates a high level of organisation, consistent indentation, and meaningful identifier names.","The code demonstrates a high level of organisation, consistent indentation, and meaningful identifier names.",0.92719024
144.0,Readability,4,"Great choice of variable, very well structured, easy and enjoyable to read",Easy to follow and understand,0.44423762
160.0,Code Elegance,22,No comment supplied,"Abstraction could go further, e.g. some methods within the animal classes could be within the class animal",-0.027372383
160.0,Code Elegance,24,The code is fairly efficient without sacrificing readability and understanding.,"Student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks",0.45622385
160.0,Correctness,22,No comment supplied,All core tasks completed. Extension tasks completed except for disease implenetation.,0.09587511
160.0,Correctness,24,"The application works as described in the assignment, although some minor issues have been encountered in the application.",The application works as described in the assignment; all base tasks are completed; the student has completed all of the challenge tasks;,0.59414184
160.0,Documentation,22,No comment supplied,"Confusion between animal class names in description of functions. Also incorrect description of grass behaviour, i.e. is documented as eating antelopes.",0.0028878557
160.0,Documentation,24,The documentation consists od comments that are some-what useful in understanding the code.,"The documentation is well written, organised and clearly explains what the code is accomplishing and how",0.7386504
160.0,Readability,24,The student used indentation appropriately and consistently to delineate code blocks,The application is exceptionally well-organised and very easy to understand.,0.22664282
176.0,Code Elegance,27,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.","Code can be re-used. Code is maintainable. Plant not implemented separately, inhibits re-use.",0.772666
176.0,Code Elegance,28,"The code is well organised and for the most part, classes are well modularised and contained. I like the Animal class exposing the cold, hot, etc. behaviours. However, there is a considerable amount of repeated code which could be delegated to a common super-type for predator/prey, etc. ","The code is structured reasonably well, however, some improvements could be made. For example, the weather types should be an enum rather than an int assigned by methods. The common methods for animals should be placed in superclasses such as predator, prey. The plant class should have its own subtype and specific plant instances.",0.6499121
176.0,Correctness,27,"The application works. Base Tasks completed. 3 Challenge tasks attempted (plants, weather, hunger level). ","The application works. Base Tasks completed. 2 Challenge tasks attempted (plants, weather). Plants implemented as an animal.",0.8980641
176.0,Correctness,28,All baseline requirements are implemented well. Some challenges are implemented but the student did not implement disease spread. The weather-influenced behaviours are interesting and creative. ,The student has met all baseline requirements and has implemented some of the challenge extensions including weather-based behaviours and plants. ,0.7583792
176.0,Documentation,27,Some comments state the obvious. Good comments at the beginning of files.,Good use of comments. Each function block commented. ,0.525822
176.0,Documentation,28,The code is very well documented across each class. The methods are described well with good JavaDoc annotations for method parameters and return types,"The code documentation is good overall, however, is inconsistent in places. In particular some methods are not annotated with inputs and output descriptions whilst others are",0.63147235
176.0,Readability,27,"Appropriate identifier names, function performs single operation, public/private should be improved",Some inconsistent indentation. Consistent whitespace. Meaningful identifier names used. Good use of private/public.,0.61133903
176.0,Readability,28,"Overall code readability is high with good property and method naming, code indentation, etc. Some access modifiers are inappropriate - for example the act() and incrementAge() behaviours in Animals are public. ",The code is presented well with good consistent naming conventions and formatting. Appropriate access modifiers are used throughout,0.5990432
358.0,Code Elegance,13,The code have a good use of classed and functions and nicely laid out.,The code is well written.,0.6444744
358.0,Code Elegance,15,"The code demonstrates good use of classes and functions, producing fairly reusable and maintainable code. Inheritance is used effectively with base Animal class. The code is readable and understandable without being overly complex.","The code makes good use of inheritance, with an abstract Animal class that the concrete species classes extend. This allows for code reuse. The logic for animal behaviors like moving, eating, and breeding is encapsulated within each class. ",0.82356775
358.0,Code Elegance,16,"Generally okay use of classes. However, some more work will be needed to reduce repeated code segments in animal classes, such as their behaviour. ",A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior.,0.58825105
358.0,Correctness,13,"This submission does not keep track of the time of day, which is one requirement of core tasks. What is worst, it skips the challenge task.",The simulation finished the core and challenge task well.,0.4194713
358.0,Correctness,15,"All of the base tasks are completed - the simulation has at least 5 species (rabbits, foxes, plants, squirrels, nuts, vultures, mice). Males and females are distinguished, requiring them to meet to propagate. Time of day is tracked, with some creatures like rabbits and squirrels unable to move at night. However, a few details are missing - the original Fox and Rabbit classes were used rather than being replaced by different predator/prey species as specified. No challenge tasks like weather or disease simulation were attempted.","The simulation includes at least 5 acting species (Fox, Rabbit, Plants, Vulture, Nuts, Squirrel, Mouse), with foxes and vultures as predators, and rabbits, squirrels and mice as non-predators that eat plants/nuts. Foxes and vultures compete for rabbits and squirrels as shared food sources. The species distinguish males and females which must meet to propagate. Time of day is tracked, with some creatures like rabbits and squirrels not moving at night. One of the challenge tasks, adding plants, was also implemented successfully. However, one flaw is that the Fox and Rabbit classes from the original template were retained instead of being fully replaced by new species.",0.859952
358.0,Correctness,16,"Completed all base tasks and one extension task. Generally, more explanation is needed for easier identification of these tasks.",All base tasks and some extension tasks have been completed. Documentation is provided for how each of the tasks is completed.,0.81805485
358.0,Documentation,13,"Clear, concise, accurate documentation. ",The code is accessible and maintainable,0.2708644
358.0,Documentation,15,"Most classes and functions have clear, useful comments explaining their purpose. A few more inline comments explaining complex logic would be helpful.",Each class and method has clear header comments describing its purpose. Some key sections of code within methods also have inline comments explaining their logic.,0.628041
358.0,Documentation,16,"Generally included comments on all methods. However, some state the obvious which seems to be redundant.",Comments for the fields generally state the obvious. Functional comments are generally ok and explain the purpose of its function. Documentation on arguments and return types is ok.,0.5929732
358.0,Readability,13,"Clear naming conventions, consistent formatting, and well-organized structure. ",It is easy to navigate and understand.,0.2594238
358.0,Readability,14,"there are a few instances where naming consistency could be improved.  For example, 't'.",No comment supplied,-0.003756402
358.0,Readability,15,The code is generally clean and organized with consistent indentation and spacing. Meaningful variable and method names are used.,"The code is well-organized and easy to follow. Class and variable names are meaningful (e.g. incrementHunger, giveBirth). Indentation and whitespace is used consistently. Methods are focused on single responsibilities. Access modifiers are appropriately applied to fields.",0.7015822
358.0,Readability,16,"Generally good identifier names and ok indentation for segregating methods. However, some functions are overly long and lack separation.",Generally the functions are quite consistent and functions are not excessively long. Good function and identifier names in general.,0.5835994
389.0,Code Elegance,17,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,1.0
389.0,Code Elegance,18,"The code is efficient and the use of classes is well specified. Good indentation is present, and the classes are well-stratified.",No comment supplied,0.04480635
389.0,Code Elegance,20,No comment supplied,"Lots of repeated code, could have implemented the findFood and find-airs functions in the animal class. Some functions are very long and should break them down.",0.039266273
389.0,Correctness,17,All challenge and base classes are implemented correctly to a high standard.,All base and some challenge tasks completed to a high standard. Disease class has probability so low that it will never come into effect during simulation.,0.45404088
389.0,Correctness,18,"More than five animals were used. At least 2 of them compete for the same prayer. At least 2 of them eat just grass. Male or female animals are identified for some of the animals. Time of the day is tracked. Extra additions: plants that act as grass, different levels of diseases.","There are at least five species that are created. There are at least two species that fight for the same resource, while there are at least two species that do not fight for any resource. The behaviour changes based on the time of the day and there is a difference of breeding between males and females. Extra features added: Plants + Disease + Weather.",0.47565943
389.0,Correctness,20,No comment supplied,all basic tasks and challenges completed.,0.099986635
389.0,Documentation,17,"Solid use of comments and javadocs, however sometimes displays some overcommenting on lines which have obvious functionality. ",Solid use of comments and javadocs.,0.85569394
389.0,Documentation,18,"The code is mostly easy to read, but many sections do not have enough comments, while some sections have redundant comments.",Some parts of the code do not have enough comments.,0.7608412
389.0,Documentation,20,"did not add student name and number as header for each file.
some obvious comments. Some places missing comments.","No report, some code not explained",0.34036362
389.0,Readability,17,"Appropriate function, class and variable names used. Indentation and general code structure is clear. Good use of self-contained classes.","Great function, class and variable names used. Indentation and general code structure is clear. Great use of self-contained classes.",0.88436383
389.0,Readability,18,"The code is mostly easy to read, and well stratified into classes and variables.","Some spacing is not in place, and this makes the code hard to read sometimes. Some methods are very long and it is very hard to read through the code.",0.4466086
389.0,Readability,20,few variable names that were not meaningful.,"Good variable and functions names, missing some comments",0.6945377
559.0,Code Elegance,6,"Methods are reusable and readable, but some code repetition  and class redundancy","Inheritance is not fully made use of, with a lot of code duplication where not necessary.",0.45852426
559.0,Code Elegance,7,"It is good, though there are little problems here and there.",The design could have been better.,0.19516237
559.0,Correctness,6,Convoluted implementation of weather and disease,Both genders can breed around males,-0.018279823
559.0,Correctness,7,It is basically correct.,Some efforts have been put into this project.,0.07871307
559.0,Documentation,6,Missing return and parameter comments for some methods,Missing param comment in method header comments ,0.6608061
559.0,Documentation,7,Better than others.,"It is good, though not perfect.",0.45497775
559.0,Readability,6,"Good variable naming, public used where could be private",No comment supplied,0.06864227
559.0,Readability,7,Easy to read.,"It is readable, though not perfect.",0.54764646
