assignment_number,comments,participant_id,batch,processed_text,Dominant_Topic,Perc_Contribution,Topic_Keywords,All_Topics
18.0,"The code is broken out into many separate classes for each species and simulation component, enabling decent modularity and reuse. The logic could likely be simplified in places, but overall the design and efficiency are reasonable without overly sacrificing readability.",15,1,"['code', 'class', 'component', 'reuse', 'logic', 'place', 'design', 'efficiency']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
620.0,"The code makes excellent use of inheritance with base Animal, Predator, and Plant classes. Shared constants and methods are defined in parent classes. Each specific animal and plant type extends the base classes with their unique characteristics. This produces very clean, readable and maintainable code.",15,1,"['code', 'class', 'constant', 'parent', 'class', 'type', 'class', 'characteristic', 'code']",Abstraction,0.66656476,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66656476), ('Inheritance', 0.16671798), ('Design', 0.16671723)]"
466.0,"The code is broken out into many separate classes for each species and simulation component, enabling decent modularity and reuse. The logic could likely be simplified in places, but overall the design and efficiency are reasonable without overly sacrificing readability.",15,1,"['code', 'class', 'component', 'reuse', 'logic', 'place', 'design', 'efficiency']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
591.0,"The code follows good object-oriented design patterns, with a logical separation of concerns between classes. The base Animal class encapsulates shared functionality. The individual creature classes inherit from Animal and define their unique properties and behaviors. Constants are used effectively to avoid magic numbers. There are opportunities to further refactor some of the duplicated logic between creature classes.",15,1,"['design', 'pattern', 'separation', 'concern', 'class', 'class', 'functionality', 'creature', 'class', 'inherit', 'property', 'constant', 'number', 'opportunity', 'refactor', 'creature', 'class']",Inheritance,0.47443423,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.47443423), ('Design', 0.38640442), ('Abstraction', 0.13916138)]"
587.0,"The code follows good object-oriented design patterns, with a logical separation of concerns between classes. The base Animal class encapsulates shared functionality. The individual creature classes inherit from Animal and define their unique properties and behaviors. Constants are used effectively to avoid magic numbers. There are opportunities to further refactor some of the duplicated logic between creature classes.",15,1,"['design', 'pattern', 'separation', 'concern', 'class', 'class', 'functionality', 'creature', 'class', 'inherit', 'property', 'constant', 'number', 'opportunity', 'refactor', 'creature', 'class']",Inheritance,0.47443438,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.47443438), ('Design', 0.38640428), ('Abstraction', 0.13916136)]"
50.0,"The code follows good object-oriented design patterns, with a logical separation of concerns between classes. The base Animal class encapsulates shared functionality. The individual creature classes inherit from Animal and define their unique properties and behaviors. Constants are used effectively to avoid magic numbers. There are opportunities to further refactor some of the duplicated logic between creature classes.",15,1,"['design', 'pattern', 'separation', 'concern', 'class', 'class', 'functionality', 'creature', 'class', 'inherit', 'property', 'constant', 'number', 'opportunity', 'refactor', 'creature', 'class']",Inheritance,0.47443435,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.47443435), ('Design', 0.38640434), ('Abstraction', 0.13916136)]"
655.0,"The code demonstrates very good use of classes and inheritance to produce reusable and maintainable code. Abstract base classes like Animal, Predator and Prey allow for shared functionality. The code appears well organized into logical classes and methods.",15,1,"['code', 'class', 'code', 'class', 'functionality', 'code', 'class']",Inheritance,0.6664716,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6664716), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
47.0,"The code demonstrates excellent use of classes and inheritance to enable code reuse. For example, the various animal classes extend an abstract Animal class. Functionality is broken out well into different classes and methods. The code looks quite efficient and readable.",15,1,"['code', 'class', 'code', 'class', 'class', 'functionality', 'class', 'code']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678007), ('Design', 0.16674829)]"
262.0,Your code structure is commendable. The use of inheritance and abstraction to define common behaviors across different species shows advanced programming skills. This approach not only avoids redundancy but also facilitates code maintenance and future expansions.,15,1,"['code', 'structure', 'abstraction', 'programming', 'skill', 'redundancy', 'code', 'maintenance', 'future', 'expansion']",Abstraction,0.7223865,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7223865), ('Inheritance', 0.13880734), ('Design', 0.13880615)]"
2.0,Your code structure is commendable. The use of inheritance and abstraction to define common behaviors across different species shows advanced programming skills. This approach not only avoids redundancy but also facilitates code maintenance and future expansions.,15,1,"['code', 'structure', 'abstraction', 'programming', 'skill', 'redundancy', 'code', 'maintenance', 'future', 'expansion']",Abstraction,0.72238654,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.72238654), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
400.0,"The code makes excellent use of classes, inheritance, and interfaces to create well-organized, reusable and maintainable code. Class responsibilities are clearly delineated. Abstractions like Animal, Disease, Weather allow shared behavior to be cleanly captured. The code is efficient and readable.",15,1,"['code', 'class', 'code', 'class', 'abstraction', 'code']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
525.0,"The code follows good object-oriented design principles, with a clean separation of concerns between classes. Inheritance is used effectively for the animal classes. Methods are focused and not overly complex. Some code duplication exists that could potentially be refactored.",15,1,"['design', 'separation', 'concern', 'class', 'class', 'code', 'duplication']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
358.0,"The code demonstrates good use of classes and functions, producing fairly reusable and maintainable code. Inheritance is used effectively with base Animal class. The code is readable and understandable without being overly complex.",15,1,"['code', 'class', 'code', 'class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
137.0,"The student demonstrates excellent use of classes, inheritance (abstract Animal class extended by Predator and Prey) and polymorphism to create a well-structured, extensible design. The code is broken into logical methods and avoids redundancy. Fields and methods have appropriate access modifiers. The act() methods delegate work to other methods with clear purposes like giveBirth(), findFood() etc. Smart optimizations are made, like caching free adjacent locations. ",15,1,"['class', 'class', 'polymorphism', 'design', 'code', 'redundancy', 'field', 'access', 'modifier', 'work', 'purpose', 'optimization', 'location']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
125.0,"The code makes good use of inheritance with an abstract Animal class and specific subclasses for each species. Behavior is encapsulated within each class. Fields and methods have clear, descriptive names. The code is efficient, using collections effectively.",15,1,"['code', 'class', 'subclass', 'class', 'field', 'name', 'code', 'collection']",Inheritance,0.66590965,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66590965), ('Abstraction', 0.16710818), ('Design', 0.16698217)]"
58.0,"The code is broken out into separate classes for each animal type, which allows for specialization while inheriting shared behavior from the abstract Animal class. This enables code reuse. The logic for animal behaviors like eating, breeding, and aging is mostly encapsulated within each class.",15,1,"['class', 'type', 'specialization', 'class', 'code', 'breeding', 'aging', 'class']",Abstraction,0.66656476,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66656476), ('Inheritance', 0.16671798), ('Design', 0.16671723)]"
353.0,The code makes good use of inheritance with an abstract Animal class. Behavior is encapsulated within each animal subclass. Fields and methods have clear purposes.,15,1,"['code', 'class', 'subclass', 'field', 'purpose']",Inheritance,0.66590935,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66590935), ('Abstraction', 0.16710828), ('Design', 0.16698237)]"
422.0,"The code demonstrates good use of classes and inheritance to represent the different species and their shared characteristics. The Animal and Plant abstract classes provide a clean separation of common functionality. The code is generally efficient and readable. A few areas could potentially be improved, such as reducing some repetition between similar classes, but overall the code is quite elegant.",15,1,"['code', 'class', 'characteristic', 'class', 'separation', 'functionality', 'code', 'area', 'repetition', 'class', 'code']",Abstraction,0.4309779,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.4309779), ('Inheritance', 0.43078968), ('Design', 0.13823238)]"
480.0,"The code is structured reasonably with separate classes for each species inheriting from an Animal superclass. However, there is a lot of duplicated code between species classes that could be refactored into the superclass to improve reusability. The code is readable but some design decisions are questionable, like having so many static constants.",15,1,"['class', 'superclass', 'code', 'class', 'superclass', 'reusability', 'code', 'design', 'decision', 'constant']",Inheritance,0.5969274,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.5969274), ('Design', 0.27325365), ('Abstraction', 0.12981889)]"
334.0,"The student demonstrates excellent use of classes and inheritance to produce reusable and maintainable code. The Animal and HabitatFood abstract classes define shared functionality. Each species extends these appropriately (e.g. Mouse, Hyena, Flower). Methods are used effectively to encapsulate behaviors like eating, breeding, aging, and disease transmission. The code is efficient and readable.",15,1,"['class', 'code', 'habitatfood', 'class', 'functionality', 'flower', 'transmission', 'code']",Inheritance,0.6664716,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6664716), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
160.0,The code is fairly efficient without sacrificing readability and understanding.,24,1,['understanding'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
473.0,the code is efficient without sacrificing readability and understanding.,24,1,"['code', 'understanding']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
624.0,some of the code is unnecessarily complex or poorly designed.,24,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
311.0,The application is unnecessarily complex,24,1,['application'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
105.0,The application is unnecessarily complex,24,1,['application'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
654.0,"The student demonstrate excellent use of classes and functions to produce reusable and maintainable code, the only downside would be decoupling the weather functionality from the simulator as a separate class.",24,1,"['class', 'code', 'downside', 'functionality', 'simulator', 'class']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678007), ('Design', 0.16674829)]"
79.0,"Some codes are repeated, such as the switch statement, which can nested in a private method in the parent class and inherited by the animals when breeding not to repeat the same code in different classes.",24,1,"['code', 'switch', 'statement', 'parent', 'class', 'repeat', 'code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
45.0,Some if-else statements are redundant and classes such as weather could be uncoupled from the simulator by creating a new Weather class.,24,1,"['statement', 'class', 'simulator', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
51.0,excellent use of classes and functions but the code is incomplete,24,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
523.0,"Excellent use of classes and functions, code is modular, reusable and maintainable.",24,1,"['class', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
410.0,All of the base tasks and some of the challenge tasks are implemented in such a way that code can be reused.,24,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
490.0,The application is implemented in such a way that many code segments could be rewritten and some code is unnecessarily complex and poorly designed.,24,1,"['application', 'code', 'segment']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.1668042), ('Design', 0.16679277)]"
124.0,The application is implemented in such a way that only a few code segments could be rewritten to increase re-usability. Design concepts such as interface are not clear.,24,1,"['application', 'code', 'segment', 'usability', 'design']",Abstraction,0.48595876,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.48595876), ('Design', 0.37435406), ('Inheritance', 0.13968721)]"
77.0,The application is implemented in such a way that only a few code segments can be rewritten to increase code re-usability.,24,1,"['application', 'code', 'segment', 'code', 'usability']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680422), ('Design', 0.16679281)]"
252.0,the student demonstrates excellent use of classes and functions.,24,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
236.0,The application is implemented in such a way that many code segments can be rewritten to increase code re-usability.,24,1,"['application', 'code', 'segment', 'code', 'usability']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.1668042), ('Design', 0.16679277)]"
549.0,"All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused, where possible",24,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
10.0,The student demonstrates excellent use of classes and functions to produce reusable and maintainable code; the code is efficient without sacrificing readability and understanding.,24,1,"['class', 'code', 'code', 'understanding']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
292.0,"The student demonstrate excellent use of classes and functions to produce reusable and maintainable code, the only downside would be decoupling the weather functionality from the simulator as a separate class.",24,1,"['class', 'code', 'downside', 'functionality', 'simulator', 'class']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678007), ('Design', 0.16674829)]"
451.0,All of the base tasks and some of the challenge tasks are implemented in such a way that code can be reused.,24,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
217.0,The code is structured well with good use of classes to modularise code. The codebase would benefit from the addition of predator and prey classes for improved extensibility,28,2,"['code', 'class', 'code', 'codebase', 'addition', 'class', 'extensibility']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
623.0,"The code is structured well with a good use of classes and methods. The student added an 'organism' class as a common superclass of the plants and animals, however, the animal class should extend the organism class and further encapsulate the animal types. ",28,2,"['code', 'class', 'organism', 'class', 'superclass', 'class', 'extend', 'organism', 'class', 'encapsulate', 'type']",Abstraction,0.45997512,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.45997512), ('Inheritance', 0.40147367), ('Design', 0.1385512)]"
315.0,The code is structured very well with good use of additional superclasses and extensions. The addition of ENUMS improves the code maintainability. ,28,2,"['code', 'superclass', 'extension', 'addition', 'enum', 'code', 'maintainability']",Inheritance,0.72373223,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72373223), ('Abstraction', 0.13813394), ('Design', 0.13813382)]"
21.0,The code is structured very well with good use of classes and modularisation. The addition of predator and prey classes is good and pushing common methods to superclasses makes for clean and extensible code.,28,2,"['code', 'class', 'modularisation', 'addition', 'class', 'superclass', 'code']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
212.0,The code is reasonably well structured with good use of encapsulation and modularity. The code would benefit from adding Predator and Prey subclasses. The use of the Location class is elegant and improves scalability,28,2,"['code', 'encapsulation', 'code', 'subclass', 'location', 'class', 'elegant', 'scalability']",Inheritance,0.7229405,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7229405), ('Abstraction', 0.13875555), ('Design', 0.1383039)]"
550.0,The code is well structured and shows a good understanding of classes and inheritance. The Time class is an elegant addition. The code would benefit with a Predator and Prey class to help with encapsulating common code across animals. ,28,2,"['code', 'understanding', 'class', 'class', 'addition', 'code', 'class', 'help', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
407.0,"The code is structured very well with good use of encapsulation and inheritance. The use of enums for Gender, etc. is ",28,2,"['code', 'encapsulation', 'enum', 'gender']",Inheritance,0.66546184,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66546184), ('Abstraction', 0.16775452), ('Design', 0.16678365)]"
497.0,The code is structured very well with a good display of knowledge on encapsulation and inheritance. The student uses abstract classes effectively to further enforce extensibility. ,28,2,"['code', 'display', 'encapsulation', 'class', 'extensibility']",Design,0.43160865,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.43160865), ('Inheritance', 0.42934352), ('Abstraction', 0.13904782)]"
271.0,The student shows a good understanding of code structuring with good use of inheritance and abstraction. The inclusion of predator and prey classes is clean and appropriate for encapsulation. The time and weather classes also improve dependency management. ,28,2,"['understanding', 'code', 'abstraction', 'inclusion', 'class', 'encapsulation', 'class', 'dependency', 'management']",Inheritance,0.48887405,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.48887405), ('Abstraction', 0.37075695), ('Design', 0.14036904)]"
686.0,"The code is structured reasonably well, however, some improvements could be made. For example, the weather types should be an enum rather than an int assigned by methods. The common methods for animals should be placed in superclasses such as predator, prey. The plant class should have its own subtype and specific plant instances.",28,2,"['improvement', 'type', 'superclass', 'class', 'subtype', 'instance']",Abstraction,0.45997518,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.45997518), ('Inheritance', 0.40147367), ('Design', 0.1385512)]"
539.0,The code is structured well throughout and shows good understanding of inheritance. The structure of the abstract animal and plant classes is a nice addition. The weather type could use an enum rather than being a string.,28,2,"['code', 'understanding', 'structure', 'class', 'addition', 'type']",Abstraction,0.7234317,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7234317), ('Design', 0.1382845), ('Inheritance', 0.13828379)]"
434.0,The student has submitted the original task code unmodified with no extensions,28,2,"['code', 'extension']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
510.0,"The code is well structured overall, however, some design decisions are questionnable. The introduction of predator and prey sub-types is nice, but plants extending animals makes the code more difficult to parse at a glance. The weather types should be an enum rather than just a string, but the probabilities of selecting between weather are articulated well with final static variables. ",28,2,"['code', 'design', 'decision', 'introduction', 'sub', 'type', 'code', 'parse', 'glance', 'type', 'probability', 'variable']",Abstraction,0.47617486,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.47617486), ('Design', 0.3930119), ('Inheritance', 0.13081323)]"
74.0,The code is structured very well with good use of subtyping and inheritance. The use of a predator and prey subtype helps to keep the code clean.,28,2,"['code', 'subtype', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
183.0,The code is structured very well with good demonstration of knowledge on encapsulation and inheritance. The carnivore and herbivore subclasses effectively encapsulate common methods. The specific animal instances are therefore clear and concise.,28,2,"['code', 'demonstration', 'herbivore', 'subclass', 'instance', 'concise']",Inheritance,0.66590965,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66590965), ('Abstraction', 0.1671081), ('Design', 0.16698225)]"
563.0,The code is reasonably well structured with simple use of subtyping and inheritance (for example with the plant subtypes). The animals would benefit with further sub-division such as with a predator and prey subclass. Some methods such as the findFood() methods are too large and encapsulate too many functions. These should be divided further. ,28,2,"['code', 'subtype', 'sub', 'division', 'subclass', 'findfood']",Inheritance,0.66590995,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66590995), ('Abstraction', 0.16710791), ('Design', 0.16698214)]"
286.0,"The code is structured very well with good consideration for encapsulation and inheritance. The actor and animal classes hold common functionality. The foodchain helper class helps with keeping the code clean and concise. The weather classes are probably unnecessary for this task, however, are not inherently a bad design decision.",28,2,"['code', 'consideration', 'encapsulation', 'actor', 'class', 'functionality', 'foodchain', 'helper', 'class', 'code', 'concise', 'class', 'design', 'decision']",Inheritance,0.5919979,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.5919979), ('Design', 0.28431106), ('Abstraction', 0.12369097)]"
287.0,The code is organised very well. The addition of the predator and prey classes improves the encapuslation of common functionality. The specific animal subtypes are simple and clear as a result,28,2,"['code', 'addition', 'class', 'encapuslation', 'functionality', 'subtype', 'result']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
454.0,The code is structured exceptionally with good use of inheritance and encapsulation. Abstract classes and methods have been used appropriately and the predator and prey classes help to keep animal sub-types clean and concise,28,2,"['encapsulation', 'class', 'class', 'sub', 'type', 'concise']",Abstraction,0.4312286,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.4312286), ('Inheritance', 0.43049616), ('Design', 0.13827524)]"
462.0,No java source files were included in the submission - only Java files and so the code cannot be compiled,28,2,"['source', 'file', 'submission']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
107.0,"some parts of code does not match single responsibility principle. 
Weather should not be responsible for dateTimeCheck.
Rain and Sunny implements Weather interface but they do day time check. Night or Day check could be specificly implemented ",8,2,"['part', 'code', 'match', 'responsibility', 'rain', 'implement', 'day', 'check', 'night', 'day', 'check']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
520.0,abstraction level could be more advanced,8,2,"['abstraction', 'level']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
316.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
554.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
274.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
36.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
522.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
361.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
111.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
399.0,No changes were made to the default code provided. Same code as the default files provided. No changes were made.,3,1,"['change', 'default', 'code', 'code', 'default', 'file', 'change']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
650.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
59.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
119.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
427.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
588.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
629.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.7227614,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7227614), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
601.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
234.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
29.0,No changes were made to the default code provided.,3,1,"['change', 'default', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
565.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
612.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
144.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,1,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
608.0,"The code is elegant and the creation of the new abstract class LivingBeing demonstrates a thorough understanding. The code is efficient, however, some if-then-else statements are empty.",18,1,"['creation', 'class', 'livingbeing', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
553.0,"There is a redundant class just for making use of the ArrayList, this is not desirable.",18,1,"['class', 'making', 'arraylist']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
389.0,"The code is efficient and the use of classes is well specified. Good indentation is present, and the classes are well-stratified.",18,1,"['code', 'class', 'indentation', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
377.0,The code is efficient and makes use of all the characteristics required.,18,1,['characteristic'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
46.0,"The code is elegantly written and it presents many well-designed aspects. However, the values for each animal could be enclosed in the superclass and then instantiated. This might decrease the way the code is elegant.",18,1,"['present', 'aspect', 'value', 'superclass', 'code']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
80.0,"The code presented has some elements of elegance. However, it  is too simplistic to be considered as complex enough.",18,1,"['code', 'element', 'elegance']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
82.0,"The use of the 'Actor' interface seems redundant. The variables are repeatedly initialised in the child, but a better option would be to initialise them in the superclass. The colour method is not correctly placed.",18,1,"['actor', 'variable', 'child', 'option', 'superclass', 'colour']",Design,0.4319642,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.4319642), ('Inheritance', 0.429881), ('Abstraction', 0.13815486)]"
651.0,All the values that are common for many classes could have been initialised in the superclass and then just assigned. The 'giveBirth' method is repeated many times in each class.,18,1,"['value', 'class', 'superclass', 'class']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
365.0,"It is not usually a good practice to return null in a method. The animals created are not part of different classes, they are just creations in the simulation. The code written is not very elegant as it is hard to find all the required elements.",18,1,"['practice', 'return', 'part', 'class', 'creation', 'simulation', 'code', 'element']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
526.0,"All the common variables of the animals should be enclosed in a superclass, rather than defined individually for every class. 'Female' class should be a characteristic of an animal, not a separate class. Inside many classes, there are other class instances created that are not required. Some methods are empty, this is not a good practice.",18,1,"['variable', 'superclass', 'class', 'class', 'class', 'class', 'class', 'instance', 'practice']",Design,0.43196413,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.43196413), ('Inheritance', 0.42988107), ('Abstraction', 0.13815486)]"
255.0,All the variables that are common to animals should have been enclosed in the superclass and defined through the constructor.,18,1,"['superclass', 'constructor']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
98.0,"All the values that are common to an animal should have been defined in a superclass rather than instantiated in each class. The code is quite easy to read, but a bit too simplistic.",18,1,"['value', 'superclass', 'class', 'code', 'bit']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
387.0,"The refactored class, even though it contains attributes that are common for all the animals, some of them define them again in their class. The Weather class is not correctly defined as it is empty - not good practice.",18,1,"['class', 'class', 'class', 'practice']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
574.0,Some of the attributes that are common to all animals are defined separately in each instantiation.,18,1,['instantiation'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
450.0,Many variables are common between multiple classes and they are defined in each of the subclasses instead of the superclass.,18,1,"['variable', 'class', 'subclass']",Inheritance,0.45590153,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.45590153), ('Design', 0.40523073), ('Abstraction', 0.13886778)]"
221.0,The genderequals method should have been defined in the superclass rather than exploited in each of the subclasses. This also applies to the common attributes between many different animals. The same happens also with the different kind of plants.,18,1,"['genderequal', 'superclass', 'subclass', 'attribute', 'kind']",Inheritance,0.7226874,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7226874), ('Abstraction', 0.13868387), ('Design', 0.13862874)]"
156.0,Some of the attributes that many animals have in common are defined separately in each subclass rather than in the main superclass. The getNewAnimal object is not defined only in the superclass.,18,1,"['superclass', 'getnewanimal', 'superclass']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
516.0,"Some of the constructors are empty, which is not good practice. Some variables that are common between many species are part of only the subclass, and not also the superclass. Some components that should not be part of the subclass are still instantiated in the incorrect place.",18,1,"['practice', 'variable', 'part', 'subclass', 'component', 'part', 'subclass', 'place']",Inheritance,0.54420406,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.54420406), ('Design', 0.31079373), ('Abstraction', 0.14500223)]"
18.0,"Most methods in animal classes are repeatedly defined, so perhaps some sort of inheritance can be included in. the predator and prey classes to increase reusability.",16,1,"['class', 'class', 'reusability']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
620.0,"Overall good attempt at using parent class to reduce repeated code. However, coupling to the Simulator class might be inappropriate as it contains lots of logic.",16,1,"['attempt', 'parent', 'class', 'code', 'simulator', 'class', 'logic']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
466.0,Overall good attempt at using parent class to reduce repeated code. ,16,1,"['attempt', 'parent', 'class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
591.0,"Some code are heavily repeated, perhaps a use for parent class can be more applicable",16,1,"['code', 'parent', 'class', 'applicable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
587.0,"Generally, quite good inheritance is used for the Disease class for clarity and reusability. Animal classes can be further reduced using inheritance.",16,1,"['class', 'clarity', 'reusability', 'class']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
50.0,"Generally okay use of classes. However, some more work will be needed to reduce repeated code in animal classes, such as their behaviour. ",16,1,"['class', 'work', 'code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
655.0,"Generally okay use of classes. However some more work will be needed to reduce repeated code in animal classes, such as their behaviour. ",16,1,"['class', 'work', 'code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
47.0,Nice use of LifeForm class to encapsulate repeated use of code. Good use of Environment class to encapsulate information of field.,16,1,"['lifeform', 'class', 'encapsulate', 'code', 'environment', 'class', 'information', 'field']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
262.0,Overall nice use of inheritance to reduce repeated code. Code seems to be extensible without much sacrifice of readability.,16,1,"['reduce', 'code', 'code', 'sacrifice']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
2.0,"Overall a lot of code segment seems to be repetitive and can be extracted through methods. For example, adding new children or hunting food can be extracted into generic methods in a parent class.",16,1,"['code', 'segment', 'child', 'food', 'parent', 'class']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680424), ('Design', 0.16679281)]"
400.0,Overall good attempt at using parent class to reduce repeated code. Excellent use of classes to segregate responsibiliities in program.,16,1,"['attempt', 'parent', 'class', 'code', 'class', 'program']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
525.0,"Most methods in animal classes are repeatedly defined, so perhaps some sort of inheritance can be included in. There is some misuse of the visibility of methods. Also would be quite hard to extend features for different diseases.",16,1,"['class', 'misuse', 'visibility', 'extend']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
358.0,"Generally okay use of classes. However, some more work will be needed to reduce repeated code segments in animal classes, such as their behaviour. ",16,1,"['class', 'work', 'code', 'segment', 'class']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680422), ('Design', 0.1667928)]"
137.0,"Most methods in animal classes are repeatedly defined, so perhaps some sort of inheritance can be included in. There is some misuse of the visibility of methods. Also would be quite hard to extend features for different diseases.",16,1,"['class', 'misuse', 'visibility', 'extend']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
125.0,"Generally okay use of classes. However, some more work will be needed to reduce repeated codes in animal classes, such as their behavior. This results in code a little cluttered and hard to extend for new features. Also it is hard to add new weather and diseases.",16,1,"['class', 'work', 'code', 'class', 'feature']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674054), ('Design', 0.16673361)]"
58.0,"Generally okay use of classes. However, some more work will be needed to reduce repeated codes in animal classes, such as their behavior. This results in code a little cluttered and hard to extend for new features. Also, it is hard to add new weather and diseases.",16,1,"['class', 'work', 'code', 'class', 'feature']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674054), ('Design', 0.16673361)]"
353.0,"Generally okay use of classes. However, some more work will be needed to reduce repeated codes in animal classes, such as their behavior. This results in code a little cluttered and hard to extend for new features for plants.",16,1,"['class', 'work', 'code', 'class', 'feature']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674054), ('Design', 0.16673361)]"
422.0,"Generally good use of classes. However, some more work will be needed to reduce repeated code segments in animal classes, such as their behavior. It is hard to extend the program for more sophisticated extension features such as Time, Diseases, and weather.",16,1,"['class', 'work', 'code', 'segment', 'class', 'program', 'extension']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.1668042), ('Design', 0.16679277)]"
480.0,"Generally okay use of classes. However, some more work will be needed to reduce repeated code segments in animal classes, such as their behavior. ",16,1,"['class', 'work', 'code', 'segment', 'class']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680424), ('Design', 0.1667928)]"
334.0,Code segments could be extracted to a parent class. It is hard to extend for other diseases and weather-based behavior ,16,1,"['code', 'segment', 'parent', 'class', 'extend']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680421), ('Design', 0.16679278)]"
464.0,"Many characteristics of an animal are instantiated in the same class, even though they could have been instantiated in the superclass. Long methods should have been split into more different methods.",18,2,"['characteristic', 'class', 'superclass']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
568.0,The Enum are defined in a different way. Some of the characteristics of the animals should have been shared by the superclass.,18,2,"['characteristic', 'superclass']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
216.0,"Many characteristics of a specific species should have been instantiated in the superclass rather than each subclass. The 'DeadBody' class is not required - this should be just a variable in a superclass of the species. This happens the same for the 'Undead'. 'Reproduction' should not be an interface, this should have been designed as a variable.",18,2,"['characteristic', 'superclass', 'deadbody', 'class', 'superclass', 'reproduction', 'variable']",Inheritance,0.5239668,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.5239668), ('Design', 0.333696), ('Abstraction', 0.14233717)]"
35.0,Not abstract classes have abstract methods. Code not split into many methods makes it not reusable. Every animal has characteristics that it should not have in their superclass.,18,2,"['class', 'code', 'characteristic', 'superclass']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
463.0,The spacing is not correct in some areas of the program. Some of the attributes that are common for each species are not determined in the superclass. Abstract methods inside classes that are not abstract. Methods are not either private/protected/public.,18,2,"['area', 'program', 'superclass', 'class', 'public']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
546.0,"There are many variables that should be specific to a superclass that are defined in a subclass. 'Disease' class has an empty constructor - so does 'Winter'. The difference between a male and a female should not be made by a different class. Fox acts as a superclass for foxes, instead of an animal class that is a superclass for all of them, and without a Fox class.",18,2,"['variable', 'superclass', 'subclass', 'class', 'constructor', 'winter', 'difference', 'female', 'class', 'fox', 'superclass', 'fox', 'class', 'superclass', 'fox', 'class']",Inheritance,0.6214915,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6214915), ('Design', 0.24720536), ('Abstraction', 0.13130312)]"
536.0,"The 'Creature' superclass contains multiple elements that are specific to only one sublcass, and not all of them. The species do not have their characteristics defined in their superclass - instead, all of them are repeatedly instantiated in their subclass.",18,2,"['creature', 'superclass', 'element', 'sublcass', 'characteristic', 'superclass', 'subclass']",Inheritance,0.71900433,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.71900433), ('Abstraction', 0.14051704), ('Design', 0.14047866)]"
535.0,"There are some variables that are shared by all superclasses, but they are defined in all the subclasses.",18,2,"['variable', 'superclass', 'subclass']",Inheritance,0.5572501,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.5572501), ('Design', 0.3201569), ('Abstraction', 0.122593)]"
388.0,Classes were created in different increments and there is a difference of design between them.,18,2,"['class', 'increment', 'difference', 'design']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674224), ('Inheritance', 0.1666986)]"
81.0,"Some of the methods defines outside abstract classes do not have any content. 'Plant' class does not have any getter/setter - this is not considered good practice. Some of the characteristics of a species are defined for the species itself, rather than for the superclass.",18,2,"['class', 'content', 'setter', 'practice', 'characteristic']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
373.0,Some of the attributes of the species are defined multiple times in the sublcass rather than in the superclass. Some methods should have been defined in the superclass as well. Some classes that are not abstract contain abstract methods.,18,2,"['sublcass', 'superclass', 'superclass', 'well', 'class']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
652.0,"There are many variables defines inside the subclass rather than the superclass, even though many subclasses share the same characteristics. The 'Prey' class presents only a constructor - this is not considered good practice.",18,2,"['variable', 'subclass', 'subclass', 'share', 'characteristic', 'class', 'constructor', 'practice']",Inheritance,0.54420453,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.54420453), ('Design', 0.3107932), ('Abstraction', 0.14500228)]"
103.0,There are some constructors that are empty - this is not considered good practice.,18,2,"['constructor', 'practice']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
364.0,Some of the variables that are common between multiple subclasses are defined repeatedly in each subclass instead in their superclass.,18,2,['subclass'],Inheritance,0.66590947,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66590947), ('Abstraction', 0.1671083), ('Design', 0.16698223)]"
430.0,"The 'Predator' class, even though it is defined as abstract, ti does contain some methods that are not abstract. There are some characteristics of an animal that should be shared in the superclass, but they are defines in each subclass. This is applied to some methods as well.",18,2,"['class', 'ti', 'characteristic', 'superclass', 'define', 'subclass']",Inheritance,0.7226873,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7226873), ('Abstraction', 0.13868394), ('Design', 0.13862877)]"
253.0,"The 'StartingClass' is not necessary, it complicates the code. There are some methods that are common between multiple species - instead of being defined in the superclass, they are defined in each subclass. This also applies to the methods. The 'Organism' class is abstract even though it does not define any abstract method.",18,2,"['startingclass', 'complicate', 'code', 'superclass', 'subclass', 'organism', 'class']",Inheritance,0.7226873,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7226873), ('Abstraction', 0.13868389), ('Design', 0.13862877)]"
456.0,"The methods 'createWeatherList' is redundant and it complicates the code. Similar characteristics of different species are defines repeatedly in each subclass, rather than in their superclass.",18,2,"['complicate', 'characteristic']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
483.0,"There are many characteristics common to multiple animals, but they are all defined in the subclass, rather than in the superclass. The 'Animal' class contains abstract methods, even though it is not abstract.",18,2,"['characteristic', 'subclass', 'superclass', 'class']",Inheritance,0.7226873,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7226873), ('Abstraction', 0.13868397), ('Design', 0.13862878)]"
289.0,Code can be re-used. Code is maintainable.,27,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
555.0,Excellent use of classes and functions. Efficient code.,27,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
33.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
176.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
619.0,Excellent use of classes and functions. Efficient code.,27,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
305.0,Excellent use of classes and functions. Efficient code. Good use of abstraction.,27,1,"['class', 'code', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
85.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
6.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
428.0,Excellent use of classes and functions. Efficient code.,27,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
43.0,"Code is semi-re-usable/maintainable. However, plants implementation as an animal causes problems.",27,1,"['maintainable', 'implementation', 'problem']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
267.0,Excellent use of classes and functions. Efficient code.,27,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
416.0,Code can be re-used. Code is maintainable.,27,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
340.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
394.0,Excellent use of classes and functions to make re-usable and maintainable code.,27,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
529.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
345.0,"Great use of classes and functions to make re-usable and maintainable code, but could be further improved.",27,1,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
121.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
13.0,no attempt made,27,1,['attempt'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
281.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
284.0,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable.",27,1,"['code', 'code', 'maintainable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
161.0,"Abstraction could go further, e.g. some methods within the animal classes (e.g. wolf) could be within the class animal",22,2,"['abstraction', 'class', 'class']",Abstraction,0.6666236,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666236), ('Inheritance', 0.16669172), ('Design', 0.16668469)]"
634.0,Class structure is basic and poorly utilised. Much of the code could be written for the animal class instead of being duplicated for each animal.,22,2,"['class', 'structure', 'code', 'class']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.1667039), ('Inheritance', 0.16670114)]"
609.0,Classes structure lacks abstraction.,22,2,"['class', 'structure', 'abstraction']",Abstraction,0.7223865,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7223865), ('Inheritance', 0.13880734), ('Design', 0.13880615)]"
199.0,Abstraction present in class structure however this is poorly utilised.,22,2,"['abstraction', 'class', 'structure']",Abstraction,0.7223865,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7223865), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
313.0,"Could utilise additional classes, e.g. predator/prey to provide additional elegance.",22,2,"['class', 'elegance']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
449.0,Could make use of additional classes for more abstraction - e.g. predator/prey.,22,2,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
521.0,"Some abstraction present but there remains much more that could be achieved, e.g. more common methods in the animal class.",22,2,"['abstraction', 'class']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
105.0,Basic abstraction class structure however this is well utilised with lots of methods residing in the animal class.,22,2,"['abstraction', 'class', 'structure', 'class']",Abstraction,0.72238654,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.72238654), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
96.0,Abstraction present in class structure however this is poorly utilised.,22,2,"['abstraction', 'class', 'structure']",Abstraction,0.72238654,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.72238654), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
432.0,Basic abstraction class structure however this is well utilised with lots of methods residing in the animal class.,22,2,"['abstraction', 'class', 'structure', 'class']",Abstraction,0.72238654,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.72238654), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
528.0,Advanced class structure implemented. There are one or two methods which could be-rewritten for generality in higher classes.,22,2,"['class', 'structure', 'generality', 'class']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.1667039), ('Inheritance', 0.16670114)]"
685.0,"Abstraction could go further, e.g. some methods within the animal classes could be within the class animal",22,2,"['abstraction', 'class', 'class']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
505.0,Advanced class structure implemented. There are one or two methods which could be-rewritten for generality in higher classes.,22,2,"['class', 'structure', 'generality', 'class']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.1667039), ('Inheritance', 0.16670114)]"
435.0,"Abstraction could go further, e.g. some methods within the animal classes could be within the class animal",22,2,"['abstraction', 'class', 'class']",Abstraction,0.66662353,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662353), ('Inheritance', 0.1666918), ('Design', 0.16668472)]"
665.0,Basic abstraction class structure however this is excellently utilised with lots of methods residing in the animal class.,22,2,"['abstraction', 'class', 'structure', 'class']",Abstraction,0.7223865,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7223865), ('Inheritance', 0.13880734), ('Design', 0.13880615)]"
445.0,"Some abstraction present but there remains much more that could be achieved, e.g. more common methods in the animal class.",22,2,"['abstraction', 'class']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
142.0,Advanced abstraction structure in classes however this could still be better utilised with more methods moved up to animal or organism.,22,2,"['abstraction', 'structure', 'class', 'organism']",Abstraction,0.7223865,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7223865), ('Inheritance', 0.13880734), ('Design', 0.13880615)]"
193.0,"Excellent structure, however there is scope to further utilise this by moving common features to more asbtract classes.",22,2,"['structure', 'utilise', 'feature', 'class']",Abstraction,0.7228766,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7228766), ('Inheritance', 0.13856277), ('Design', 0.13856067)]"
464.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
568.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,2,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
216.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
35.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,2,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
463.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
546.0,"No need to separate animal into two genders in two different files, this should be handled within the animal class itself. Otherwise the implementation is reasonable.",17,2,"['gender', 'file', 'class', 'implementation']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
536.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
535.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
388.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,2,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
81.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
373.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,2,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
652.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
103.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
364.0,Appropriate approaches taken for the implementation of the tasks.,17,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
430.0,No need to separate sex into it's own class this should be handled within the animal class itself. Otherwise the implementation is reasonable.,17,2,"['sex', 'class', 'class', 'implementation']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
253.0,Appropriate approaches taken for the implementation of the tasks however some methods like the canBreed() function  could benefit from further simplification.,17,2,"['implementation', 'canbreed', 'simplification']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
684.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,2,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
616.0,Submission only contains original template,17,2,"['submission', 'template']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
456.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,2,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
483.0,Appropriate approaches taken for the implementation of the tasks however inefficient implementation of the environment interactions causes the simulation to execute very slowly.,17,2,"['implementation', 'implementation', 'environment', 'interaction', 'simulation']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
302.0,Concepts of the course very well utilised to serve a clean and clever implementation. Weel done,4,2,"['implementation', 'weel']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
303.0,Comcpets of the course well utilised. Good structure,4,2,"['comcpet', 'structure']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.16670391), ('Inheritance', 0.16670115)]"
277.0,"Great structure, concepts learned well utilised",4,2,['structure'],Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.16670388), ('Inheritance', 0.16670112)]"
542.0,Concepts of the course well used,4,2,['course'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
188.0,Concepts of the class well utilised,4,2,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
261.0,Concepts f the course used wisely,4,2,['course'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
391.0,Concepts learnt in class well utilised,4,2,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
680.0,Very well structured code,4,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
672.0,Concepts of the course well utilised,4,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
575.0,Efficient and clever use of the concepts taught in class to create an original answer to the problem. Well done.,4,2,"['class', 'answer', 'problem']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
223.0,Good use of the notions learnt during the module,4,2,"['notion', 'module']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
143.0,Good implementation of the notions learnt in class,4,2,"['implementation', 'notion', 'class']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
453.0,Very well done ! All the concepts learnt during the module are wisely used to serve your project,4,2,"['module', 'serve', 'project']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
484.0,Concepts of the module well utilised,4,2,['module'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
218.0,Very good application of the notions of the module,4,2,"['application', 'notion', 'module']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
219.0,"Attempt to use difficult concepts, but the implementation does not run as required...",4,2,['implementation'],Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
327.0,Great use of the concepts taught during the module to serve your project,4,2,"['module', 'serve', 'project']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
290.0,Concepts of the module well utilised,4,2,['module'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
167.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
585.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
474.0,Worse than the example.,7,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
86.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
681.0,The design could have been better.,7,2,['design'],Design,0.6665591,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665591), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
107.0,Some efforts have been put into this project.,7,2,"['effort', 'project']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
520.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
415.0,Worse than the example.,7,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
265.0,"Though I see the effort, I do not think they know what inheritance really means, which results in a worse design compared to the example.",7,2,"['effort', 'result', 'design']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
40.0,Some efforts have been put into this project.,7,2,"['effort', 'project']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
269.0,Some efforts have been put into this project.,7,2,"['effort', 'project']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
661.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
501.0,Some efforts have been put into this project.,7,2,"['effort', 'project']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
8.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674224), ('Inheritance', 0.1666986)]"
109.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
168.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
182.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
283.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
639.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
99.0,The design could have been better.,7,2,['design'],Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
302.0,Good code practice. Class design is sensible.,1,2,"['code', 'practice', 'class', 'design', 'sensible']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
303.0,Class hierarchy is sensible. Minimal code redundancy.,1,2,"['class', 'hierarchy', 'code', 'redundancy']",Inheritance,0.6663843,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6663843), ('Abstraction', 0.16683221), ('Design', 0.16678348)]"
277.0,Class hierarchy is sensical and uses it well.,1,2,"['class', 'hierarchy']",Inheritance,0.66638434,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66638434), ('Abstraction', 0.1668322), ('Design', 0.16678348)]"
542.0,Class hierarchy is sensical and allows for extension. Images could be stored in a separate folder to clean folder structure.,1,2,"['class', 'hierarchy', 'extension', 'image', 'folder', 'folder', 'structure']",Inheritance,0.4341101,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.4341101), ('Abstraction', 0.42767623), ('Design', 0.13821362)]"
188.0,Class hierarchy is good and supports extension. Non final variables should not be CAPITALISED.,1,2,"['class', 'hierarchy', 'support', 'variable']",Inheritance,0.44365478,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.44365478), ('Design', 0.41799662), ('Abstraction', 0.1383486)]"
261.0,"Class hierarchy is sensical, but does not use inheritance features to its fullest extent. A lot of copied and pasted code.",1,2,"['class', 'hierarchy', 'feature', 'extent', 'code']",Abstraction,0.4582259,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.4582259), ('Inheritance', 0.40322408), ('Design', 0.13855)]"
391.0,Class hierarchy is sensical and designed well.,1,2,"['class', 'hierarchy']",Inheritance,0.6663843,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6663843), ('Abstraction', 0.16683221), ('Design', 0.16678348)]"
680.0,Class design is sensical. A lot of copied and pasted code.,1,2,"['class', 'design', 'code']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
672.0,Generally good class design.,1,2,"['class', 'design']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
575.0,Class design and hierarchy is sensical. Some shared variables can be put into the superclass.,1,2,"['class', 'design', 'hierarchy', 'variable', 'superclass']",Inheritance,0.46437514,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.46437514), ('Design', 0.4240934), ('Abstraction', 0.11153145)]"
223.0,Class design and hierarchy is sensical.,1,2,"['class', 'design', 'hierarchy']",Inheritance,0.46742752,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.46742752), ('Design', 0.3936258), ('Abstraction', 0.13894671)]"
143.0,Class hierarchy is sensical. Some copied and pasted code. Some questionable code design (why is foodSource instantiated each time getFoodSource is called?).,1,2,"['class', 'hierarchy', 'code', 'code', 'design', 'foodsource', 'getfoodsource']",Inheritance,0.4674274,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.4674274), ('Design', 0.3936259), ('Abstraction', 0.13894671)]"
453.0,Class design and hierarchy is sensical. Smart choice on making manager classes.,1,2,"['class', 'design', 'hierarchy', 'choice', 'manager', 'class']",Inheritance,0.4674274,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.4674274), ('Design', 0.39362586), ('Abstraction', 0.13894673)]"
484.0,Generally good and sensical class design. ,1,2,"['class', 'design']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
218.0,Generally good class design and hierarchy. Some child variables can be moved to the superclass.,1,2,"['class', 'design', 'hierarchy', 'child', 'variable', 'superclass']",Inheritance,0.46437508,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.46437508), ('Design', 0.42409346), ('Abstraction', 0.11153145)]"
481.0,Class hierarchy and design is sensical.,1,2,"['class', 'hierarchy', 'design']",Inheritance,0.4674275,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.4674275), ('Design', 0.39362583), ('Abstraction', 0.13894673)]"
219.0,Generally good class design and hierarchy. Further abstractions can be made between prey and predator.,1,2,"['class', 'design', 'hierarchy', 'abstraction']",Inheritance,0.37274325,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.37274325), ('Design', 0.31689173), ('Abstraction', 0.310365)]"
327.0,Generally good class design and sensical hierarchy. Some child class methods can be moved to the super class.,1,2,"['class', 'design', 'hierarchy', 'child', 'class', 'class']",Inheritance,0.4674275,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.4674275), ('Design', 0.39362583), ('Abstraction', 0.13894671)]"
290.0,Generally good class design and hierarchy.,1,2,"['class', 'design', 'hierarchy']",Inheritance,0.46742767,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.46742767), ('Design', 0.39362565), ('Abstraction', 0.1389467)]"
79.0,The food chain class is an elegant way to represent the predator/prey relations.,22,1,"['food', 'chain', 'class', 'elegant', 'relation']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
45.0,Predator class is a useful way of representing the predator/prey relations in the simulation. ,22,1,"['class', 'relation', 'simulation']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
51.0,The submission is merely the handout code.,22,1,"['submission', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
523.0,"Excellent use of abstraction with predator type classes, consumable class, etc.",22,1,"['abstraction', 'type', 'class', 'class']",Abstraction,0.72068524,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.72068524), ('Inheritance', 0.13965872), ('Design', 0.13965607)]"
124.0,"Use of Actor interface, predator and prey classes helps keep the code elegant.",22,1,"['actor', 'class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
77.0,"Scope for additional use of structures (classes, etc.) to make code more elegant.",22,1,"['structure', 'class', 'code']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.1667039), ('Inheritance', 0.16670114)]"
252.0,Good use of abstract classes however the implementation is a little cumbersome and causes slow running of the program.,22,1,"['class', 'implementation', 'running', 'program']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
236.0,Superb use of abstract classes and interfaces. Code is very elegant.,22,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
549.0,Good use of abstract classes to capture animal behaviour. Could go further in this regard.,22,1,"['class', 'capture']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
10.0,"Scope for additional use of structures (classes, etc.) to make code more elegant, e.g. representation of predator/prey relations.",22,1,"['structure', 'class', 'code', 'representation', 'relation']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.1667039), ('Inheritance', 0.16670114)]"
292.0,Superb use of abstract classes. Code is very elegant.,22,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
139.0,super keyword usage in variables,8,1,"['keyword', 'usage', 'variable']",Design,0.6665436,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665436), ('Inheritance', 0.16672972), ('Abstraction', 0.16672663)]"
115.0,"has formatting issues, a lot of places that can be improved through separate methods instead of writing long lines and if statements, copy/paste issues in documentation, super keyword can be used for readability, consist of duplications",8,1,"['issue', 'place', 'line', 'statement', 'paste', 'issue', 'consist', 'duplication']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
118.0,contains some small format and naming glitches,8,1,"['format', 'glitch']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
675.0,"format, naming issues + does not satisfy clean code principles ",8,1,"['format', 'issue', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
382.0,overall design of the implementation could be improved for reusability of methods ,8,1,"['design', 'implementation', 'reusability']",Design,0.56603676,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.56603676), ('Inheritance', 0.31163752), ('Abstraction', 0.12232569)]"
663.0,"lots of code duplications, good level of abstraction could be used",8,1,"['code', 'duplication', 'level', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
62.0,code reusability can be improved,8,1,"['code', 'reusability']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
567.0,clean code standards could be followed. ,8,1,"['code', 'standard']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
227.0,"contains couple of formatting, naming issues, some methods can be extracted to abstract class or interface, code reusability sacrificed",8,1,"['couple', 'issue', 'class', 'code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
217.0,Code can be re-used. Code is maintainable.,27,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
623.0,Code can be re-used. Code is maintainable. Good use of abstract classes.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
315.0,Code can be re-used. Code is maintainable.,27,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
21.0,Code can be re-used. Code is maintainable. Excellent use of abstract classes for predators/prey.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
212.0,Code can be re-used. Code is maintainable. Good use of abstract classes.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
550.0,Code can be re-used. Code is maintainable. Good use of abstract classes.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
407.0,Code can be re-used. Code is maintainable. Good use of abstract classes and enums.,27,2,"['code', 'class', 'enum']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
497.0,Code can be re-used. Code is maintainable. Excellent use of abstract classes and use of CSV for animals. GUI elements built in modular manner onto of simulator.,27,2,"['code', 'class', 'gui', 'element', 'manner', 'simulator']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
271.0,Code can be re-used. Code is maintainable. Excellent use of abstract classes.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
686.0,"Code can be re-used. Code is maintainable. Plant not implemented separately, inhibits re-use.",27,2,"['code', 'maintainable', 'inhibit']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
539.0,Code can be re-used. Code is maintainable. Good use of abstract classes. Some improvements could be made to make code more re-usable (such as disease in plant class rather then grass.),27,2,"['code', 'class', 'improvement', 'code', 'class', 'grass']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
434.0,No attempt made,27,2,['attempt'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
510.0,Code can be re-used. Code is maintainable. Good use of abstract classes for predators/prey but Plant implemented as Animal.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
74.0,Code can be re-used. Code is maintainable. Excellent use of abstract classes.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
183.0,Code can be re-used. Code is maintainable. Excellent use of abstract classes.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
563.0,Code can be re-used. Code is maintainable.,27,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
286.0,Code can be re-used. Code is maintainable. Good use of abstract classes. Weather implementation is inefficient.,27,2,"['code', 'class', 'implementation']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
287.0,Code can be re-used. Code is maintainable. Good use of abstract classes for predators/prey.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
454.0,Code can be re-used. Code is maintainable. Excellent use of abstract classes. Good use of enum for weather.,27,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
462.0,Code can be re-used. Code is semi-maintainable. Abstract classes used but pointless. Separate class for each weather inefficient.,27,2,"['class', 'class', 'inefficient']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
276.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677354), ('Inheritance', 0.16677111)]"
31.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677354), ('Inheritance', 0.16677111)]"
627.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
312.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677354), ('Inheritance', 0.16677111)]"
360.0,"Methods are reusable and readable, but some code repetition  and class redundancy",6,1,"['code', 'repetition', 'class', 'redundancy']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
115.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664553,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664553), ('Design', 0.16677351), ('Inheritance', 0.1667711)]"
532.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
71.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
354.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677354), ('Inheritance', 0.16677111)]"
118.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664553,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664553), ('Design', 0.16677354), ('Inheritance', 0.16677113)]"
382.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
663.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664553,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664553), ('Design', 0.16677351), ('Inheritance', 0.1667711)]"
62.0,"Methods are reusable and readable, but few code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677351), ('Inheritance', 0.1667711)]"
599.0,It is overly complex and has lots of segregation,6,1,['segregation'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
567.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
227.0,"Methods are reusable and readable, but some code repetition",6,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677353), ('Inheritance', 0.16677111)]"
559.0,"Methods are reusable and readable, but some code repetition  and class redundancy",6,1,"['code', 'repetition', 'class', 'redundancy']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677354), ('Inheritance', 0.16677111)]"
18.0,The code have a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
620.0,The code have a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
466.0,"High clarity, simplicity, and efficiency.",13,1,"['clarity', 'simplicity', 'efficiency']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
591.0,combines functionality with simplicity,13,1,"['functionality', 'simplicity']",Inheritance,0.6664716,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6664716), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
587.0," Good modularity, reusability, and encapsulation ",13,1,"['reusability', 'encapsulation']",Inheritance,0.71760297,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.71760297), ('Abstraction', 0.14144847), ('Design', 0.14094856)]"
50.0,"High clarity, simplicity, and efficiency.",13,1,"['clarity', 'simplicity', 'efficiency']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
655.0,The code have a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
47.0,combines functionality with simplicity,13,1,"['functionality', 'simplicity']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
262.0,"High clarity, simplicity, and efficiency.",13,1,"['clarity', 'simplicity', 'efficiency']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
2.0,combines functionality with simplicity,13,1,"['functionality', 'simplicity']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
400.0,"High clarity, simplicity, and efficiency.",13,1,"['clarity', 'simplicity', 'efficiency']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
525.0," Good modularity, reusability, and encapsulation ",13,1,"['reusability', 'encapsulation']",Inheritance,0.71760327,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.71760327), ('Abstraction', 0.14144817), ('Design', 0.14094856)]"
358.0,The code have a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
137.0,The code have a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
125.0,combines functionality with simplicity,13,1,"['functionality', 'simplicity']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
58.0,Code is resuseable,13,1,"['code', 'resuseable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
353.0,a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
422.0,a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
480.0,Code is resuseable,13,1,"['code', 'resuseable']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
334.0,The code have a good use of classed and functions and nicely laid out.,13,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
161.0,The majority of the code is written in such a way that code can be reused,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
634.0,The majority of the code is written in such a way that code can be reused,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
609.0,"The application is unnecessarily complex; the application contains many instances where the code could have been written in an easier, faster or better fashion.",24,2,"['application', 'application', 'instance', 'fashion']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
314.0,"Student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks",24,2,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
199.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
313.0,The majority of the code is written in such a way that code can be reused,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
449.0,The majority of the code is written in such a way that code can be reused,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
521.0,"Student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks",24,2,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
105.0,The majority of the code is written in such a way that code can be reused,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
96.0,The majority of the code is written in such a way that code can be reused,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
645.0,"Student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks",24,2,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
432.0,The application is implemented in such a way that only a few code segments can be rewritten to increase code re-usability,24,2,"['application', 'code', 'segment', 'code', 'usability']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680421), ('Design', 0.16679278)]"
528.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
685.0,"Student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks",24,2,"['class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
505.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
435.0,The application is implemented in such a way that only a few code segments can be rewritten to increase code re-usability,24,2,"['application', 'code', 'segment', 'code', 'usability']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680421), ('Design', 0.16679278)]"
665.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
445.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
142.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
193.0,All the base tasks and some of the challenge tasks are implemented in such a way that code can be reused where possible;,24,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
302.0,Code is written in a reusable manner by utilising abstract classes and loosely coupling components,2,2,"['code', 'manner', 'class', 'component']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
303.0,The code has the potential to be enhanced by employing abstraction and increasing its modularity.,2,2,"['code', 'potential', 'employing', 'abstraction']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669178), ('Design', 0.1666847)]"
277.0,Classes are cohesive and loosely coupled and code makes use of abstraction,2,2,"['class', 'code', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
542.0,The code can be made more extensible by employing abstraction and increasing its modularity.,2,2,"['code', 'employing', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
188.0,Code is written in a reusable manner by utilising abstract classes and loosely coupling components,2,2,"['code', 'manner', 'class', 'component']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
261.0,Many segments could be rewritten to improve re-usability,2,2,"['segment', 'usability']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680424), ('Design', 0.16679281)]"
391.0,Code is written in a reusable manner by utilising abstract classes and loosely coupling components,2,2,"['code', 'manner', 'class', 'component']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
680.0,Code is written in a reusable manner by utilising abstract classes and loosely coupling components,2,2,"['code', 'manner', 'class', 'component']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
672.0,The code can be made more extensible by employing abstraction and increasing its modularity.,2,2,"['code', 'employing', 'abstraction']",Abstraction,0.6666239,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666239), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
251.0,The code can be made more extensible by employing abstraction and increasing its modularity.,2,2,"['code', 'employing', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
575.0,The code can be made more extensible by employing abstraction and increasing its modularity.,2,2,"['code', 'employing', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
223.0,The code can be made more extensible by using abstract classes,2,2,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
143.0,"To improve the extensibility of your code, it would be better to implement Time in a separate class.",2,2,"['extensibility', 'code', 'class']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
453.0,"To improve extensibility, it would be better to implement plant as a abstract class",2,2,"['extensibility', 'class']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
484.0,The code can be made more extensible by employing abstraction and increasing its modularity of components.,2,2,"['code', 'employing', 'abstraction', 'component']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
218.0,Code is written in a reusable manner by using abstract classes,2,2,"['code', 'manner', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
481.0,Code is written in a reusable manner,2,2,"['code', 'manner']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
219.0,Many segments could be rewritten to improve re-usability,2,2,"['segment', 'usability']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680421), ('Design', 0.16679278)]"
327.0,Code is written in a reusable manner by using abstract classes and loosely coupling components,2,2,"['code', 'manner', 'class', 'component']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
290.0,Time and Weather could be implemented in separate class to improve extensibility,2,2,"['class', 'extensibility']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
541.0,excellent use of classes,11,2,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
580.0,good level of abstraction,11,2,"['level', 'abstraction']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669184), ('Design', 0.16668473)]"
173.0,some levels of abstraction ,11,2,['level'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
198.0,good level of abstraction,11,2,"['level', 'abstraction']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
552.0,"some levels of abstraction, good usage of herbivore and carnivore",11,2,"['level', 'usage', 'herbivore', 'carnivore']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
171.0,some levels of abstraction ,11,2,['level'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
207.0,"great level of abstraction, code is not reused with the animal, predator and prey classes. usage of constants class ",11,2,"['level', 'abstraction', 'code', 'class', 'usage', 'constant', 'class']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669181), ('Design', 0.16668469)]"
495.0,some levels of abstraction,11,2,['level'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
537.0,"Examples of abstraction shown, animals implement entities class. eagle extends avian animal showing even further abstraction and less rewritten code",11,2,"['abstraction', 'entity', 'class', 'eagle', 'abstraction', 'code']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
496.0,"abstraction shown in animal class, find food method is generalized and depends on the specific animal diet.",11,2,"['abstraction', 'class', 'food', 'diet']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
117.0,abstraction shown from predator and prey classes generalizes the find food method,11,2,"['abstraction', 'class', 'food']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.1666918), ('Design', 0.16668472)]"
69.0,a lot of rewritten code where it could have been generalized in an abstract class,11,2,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
55.0,"some levels of abstraction with the organisms class however, a lot of rewritten code",11,2,"['level', 'abstraction', 'organism', 'class', 'code']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
517.0,"good level of abstraction, code is not rewritten and generalized very well",11,2,"['level', 'abstraction', 'code']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
682.0,"good abstraction level, code is not rewritten and a lot of generalization",11,2,"['abstraction', 'level', 'code', 'generalization']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
664.0,"some levels of abstraction however, a lot of rewritten code where it could be generalised",11,2,"['level', 'abstraction', 'code']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669177), ('Design', 0.16668472)]"
9.0,a lot of rewritten code,11,2,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
323.0,"abstraction shown with predator and prey classes however, rewritten code with the hunt method in each animal",11,2,"['abstraction', 'class', 'code', 'hunt']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
320.0,"abstraction shown with actor class and animal class. however, could have implemented prey and predators to further generalize. a lot of rewritten code, act and find food methods.",11,2,"['abstraction', 'actor', 'class', 'class', 'code', 'food']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
185.0,"abstraction shown with animal and actor class, animal classes do not use rewritten code and are generalized. created a new class to improve coupling",11,2,"['abstraction', 'actor', 'class', 'class', 'class', 'coupling']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.1666918), ('Design', 0.16668473)]"
276.0,It is okay but could be better.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
149.0,Not bad for a student. Terrible for a professional.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
31.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
627.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
312.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
360.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
139.0,Better than others.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
115.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
532.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
71.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
354.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
118.0,Better than others.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
675.0,Better than others.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
382.0,Better than others.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
663.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
62.0,Not bad for a student. Terrible for a professional.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
599.0,"More thoughtful than others, but it does NOT improve elegance (if I am honest, it only makes things worse). However, this is the inherent problem from the example, which should not be a reason to punish our students.",7,1,"['elegance', 'thing', 'problem', 'reason', 'punish']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
567.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
227.0,Could be better.,7,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
559.0,"It is good, though there are little problems here and there.",7,1,['problem'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
45.0,"if statements in act methods of animals, could replace with polymorphism",23,1,"['statement', 'polymorphism']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
302.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
303.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
277.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
542.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
188.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
261.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
391.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
680.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
672.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
251.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
575.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
223.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
143.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
453.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
484.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
218.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
481.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.1386202), ('Design', 0.13861845)]"
219.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.7227614,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7227614), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
327.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
290.0,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability.",3,2,"['maintainability', 'reusability']",Inheritance,0.72276133,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72276133), ('Abstraction', 0.13862018), ('Design', 0.13861844)]"
582.0,The code have a good use of classed and functions and nicely laid out.,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
148.0,Clean separation of concerns across classes.,13,2,"['separation', 'concern', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
201.0,Effective use of functional programming concepts.,13,2,['programming'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
229.0,"This code demonstrates a deep understanding of programming principles, with each function perfectly aligned with its purpose.",13,2,"['code', 'understanding', 'programming', 'purpose']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
544.0, It demonstrates a mastery of coding with clarity and precision.,13,2,"['clarity', 'precision']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
273.0,making it highly readable and understandable,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
306.0,The code have a good use of classed and functions and nicely laid out.,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
92.0,easy to follow and maintain.,13,2,['follow'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
487.0,easy to follow and maintain.,13,2,['follow'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
417.0, It demonstrates a mastery of coding with clarity and precision.,13,2,"['clarity', 'precision']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
241.0,making it highly readable and understandable,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
355.0,The code have a good use of classed and functions and nicely laid out.,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
254.0,The code have a good use of classed and functions and nicely laid out.,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
67.0,making it highly readable and understandable,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
135.0,"This code demonstrates a deep understanding of programming principles, with each function perfectly aligned with its purpose.",13,2,"['code', 'understanding', 'programming', 'purpose']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
63.0,each function is perfectly aligned with its purpose.,13,2,['purpose'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
133.0,Clean separation of concerns across classes.,13,2,"['separation', 'concern', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
11.0,making it highly readable and understandable,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
576.0,The code is well written.,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
683.0,The code is well written.,13,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
217.0,Relatively clean,26,2,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
623.0,"Code is relatively clean, but there is some disorienting logic, particularly how you are deciding what animals to simulate. Is the generation probability being 0 not enough to not simulate an being?",26,2,"['logic', 'generation', 'probability', 'simulate']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
315.0,Some abstractions are messy - probability need not be an enum,26,2,"['abstraction', 'probability']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
167.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
585.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
474.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.39047098), ('Abstraction', 0.13891485)]"
86.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.4706141,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.4706141), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
681.0,"Inheritance is not fully made use of, with a lot of code duplication where not necessary.",6,2,"['code', 'duplication']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
107.0,Single function which could be moved up the inheritance tree.,6,2,['tree'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
520.0,"Inheritance is not fully made use of, with a lot of code duplication where not necessary.",6,2,"['code', 'duplication']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
415.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
265.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.4706142,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.4706142), ('Inheritance', 0.39047098), ('Abstraction', 0.13891485)]"
661.0,"Inheritance was used well, but instances of code duplication in the same file could've been reduced.",6,2,"['duplication', 'file']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
8.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
109.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.39047098), ('Abstraction', 0.13891485)]"
168.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
182.0,"Inheritance was used well, but instances of code duplication in the same file could've been reduced.",6,2,"['duplication', 'file']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
283.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.39047098), ('Abstraction', 0.13891485)]"
99.0,The code is well written but could provide better reusability by moving more shared variables and functions up the inheritance tree.,6,2,"['reusability', 'variable', 'tree']",Design,0.47061414,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.47061414), ('Inheritance', 0.390471), ('Abstraction', 0.13891485)]"
582.0,"The code makes good use of classes, inheritance (e.g. all animals extend the Animal abstract class) and instance variables to enable code reuse.",15,2,"['code', 'class', 'class', 'instance', 'variable', 'code', 'reuse']",Design,0.6665436,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665436), ('Inheritance', 0.16672972), ('Abstraction', 0.16672663)]"
148.0,"The code makes good use of inheritance with an abstract Animal class. Code that can be shared between species, like movement, is in the base class. Species-specific behavior is neatly encapsulated in each subclass. Fields and methods have clear purposes. The Time and Weather classes add useful functionality without cluttering the main classes. ",15,2,"['code', 'class', 'code', 'movement', 'class', 'subclass', 'field', 'purpose', 'class', 'functionality', 'class']",Inheritance,0.7234131,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7234131), ('Abstraction', 0.13832544), ('Design', 0.13826142)]"
201.0,"The code is generally well-structured and modular, with appropriate use of classes, inheritance, and interfaces. The responsibilities are separated among different classes, promoting code reusability. ",15,2,"['class', 'class', 'code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
229.0,"The code is organized into classes representing different entities in a reasonable way. There is some good separation of common behaviors into abstract base classes like Actor, Animal, Predator and Prey. Constants are used for configuration. But overall the code is fairly readable and understandable.",15,2,"['code', 'class', 'entity', 'separation', 'class', 'actor', 'constant', 'configuration', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
544.0,"The code demonstrates excellent use of classes and inheritance to create a well-structured simulation. The Animal, Plant, and WaterSources abstract classes allow for elegantly sharing common functionality between the different species. Methods are used effectively to break the logic into manageable parts. The code is efficient and readable.",15,2,"['code', 'class', 'simulation', 'watersource', 'class', 'functionality', 'species', 'logic', 'part', 'code']",Inheritance,0.6664716,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6664716), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
273.0,"The code makes excellent use of classes and inheritance to create a well-structured simulation. The Organism abstract class defines shared functionality, with specific animal and plant classes extending it. Methods are used effectively to encapsulate behaviors.",15,2,"['code', 'class', 'simulation', 'organism', 'class', 'define', 'functionality', 'class']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678008), ('Design', 0.16674829)]"
306.0,"The code makes great use of inheritance, with a base Food class that Plant and Animal extend from. This allows shared functionality to be reused. There are also abstract act() methods that get implemented in each subclass. The logic for each animal species is broken out into its own class which encapsulates the species-specific properties and behavior. Constants are used effectively for things like breeding age, food value, etc. The code is efficient, readable and well-structured.",15,2,"['code', 'food', 'class', 'extend', 'functionality', 'subclass', 'logic', 'class', 'property', 'constant', 'thing', 'age', 'food', 'value', 'code']",Inheritance,0.723413,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.723413), ('Abstraction', 0.13832554), ('Design', 0.13826145)]"
92.0,"The code makes excellent use of classes, inheritance and polymorphism to enable reusability and maintainability. The core Animal class is cleanly extended by Predator and the specific animal classes. Behavior is abstracted well, like with the act(), breed() and eat() methods.",15,2,"['code', 'class', 'polymorphism', 'reusability', 'maintainability', 'core', 'class', 'class', 'breed']",Inheritance,0.4917324,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.4917324), ('Design', 0.38479188), ('Abstraction', 0.12347571)]"
487.0,"The code demonstrates good use of classes, inheritance (abstract Animal and Plant classes) and modularization. The Config class nicely encapsulates simulation parameters. ",15,2,"['code', 'class', 'class', 'modularization', 'class', 'simulation', 'parameter']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
417.0,"The code demonstrates excellent use of classes and inheritance to create reusable and maintainable code. The Actor, Animal, and Plant abstract classes provide a solid foundation for the various species. The code is well-organized and efficient, with each class having specific responsibilities. Minor improvements could be made, such as extracting some common functionality from the individual species classes into the base classes.",15,2,"['code', 'class', 'code', 'actor', 'class', 'foundation', 'code', 'class', 'improvement', 'functionality', 'class', 'class']",Inheritance,0.66647166,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66647166), ('Abstraction', 0.16678007), ('Design', 0.16674829)]"
241.0,The base tasks and challenge tasks are implemented in a way that allows for code reusability where possible. The code is efficient without sacrificing readability. The design choices are appropriate.,15,2,"['code', 'reusability', 'code', 'design', 'choice']",Design,0.44695407,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.44695407), ('Inheritance', 0.4147624), ('Abstraction', 0.13828355)]"
355.0,"The code makes excellent use of inheritance with base Animal, Plant and Species classes. Behavior is customized through polymorphism and constants defined in species-specific data classes. This allows new species to be added easily. The Simulator is well structured, encapsulating field and simulation state. ",15,2,"['code', 'species', 'class', 'polymorphism', 'constant', 'data', 'class', 'simulator', 'field', 'simulation', 'state']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
254.0,"The code makes excellent use of classes, inheritance (abstract base classes Animal, Plants, MicroOrganisms), and functions to enable code reuse across the different species classes. The logic is broken out well, like having an act() method for each species. Fields and methods have clear access control. The code looks efficient and readable.",15,2,"['code', 'class', 'class', 'microorganism', 'code', 'reuse', 'class', 'logic', 'field', 'access', 'control', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
67.0,"The code demonstrates excellent use of classes and inheritance to create reusable and maintainable code. The base classes (Actor, Animal, Predator, Prey) provide shared functionality, while specific classes (Shark, SeaLion, Penguin, etc.) implement unique behaviors. The code is well-structured and efficiently handles interactions between animals, plants, weather, and disease. The use of interfaces (Disease) and utility classes (Randomizer, Location) further enhances code organization and reusability.",15,2,"['code', 'class', 'code', 'class', 'actor', 'functionality', 'class', 'shark', 'sealion', 'code', 'interaction', 'utility', 'class', 'randomizer', 'location', 'code', 'organization', 'reusability']",Inheritance,0.72038746,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72038746), ('Abstraction', 0.13981469), ('Design', 0.13979784)]"
135.0,"The code makes excellent use of classes, inheritance and polymorphism to enable reusable and maintainable code. The base Animal and Prey/Predator classes factor out common functionality. Each specific animal subclass encapsulates its unique attributes and behaviors. Classes are used for key concepts like Location, Field, Clock, Weather, Disease etc. enabling modularity. Overall the code is efficient and very readable.",15,2,"['code', 'class', 'polymorphism', 'code', 'class', 'functionality', 'subclass', 'attribute', 'class', 'location', 'field', 'clock', 'code']",Inheritance,0.72341275,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.72341275), ('Abstraction', 0.13832572), ('Design', 0.13826151)]"
63.0,Excellent use of classes and inheritance to organize the code in a maintainable way. Species-specific logic is encapsulated in subclasses that inherit shared behavior from abstract base classes. Methods are focused and cohesive. The genetic algorithm in the Builder class is a creative approach to tuning the simulation parameters.,15,2,"['class', 'code', 'logic', 'subclass', 'inherit', 'class', 'builder', 'class', 'tuning', 'simulation', 'parameter']",Inheritance,0.6659094,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6659094), ('Abstraction', 0.1671083), ('Design', 0.16698231)]"
133.0,"The code makes excellent use of classes, interfaces and inheritance to enable code reuse and extensibility across the various animal and plant types. Behavior is elegantly captured in base classes and interfaces. The code is well organized into different files and uses appropriate access modifiers. While there is a lot of code, it does not sacrifice readability and the logic is clear.",15,2,"['code', 'class', 'code', 'reuse', 'extensibility', 'type', 'class', 'code', 'file', 'access', 'modifier', 'code', 'sacrifice', 'logic']",Design,0.44242924,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.44242924), ('Abstraction', 0.41934282), ('Inheritance', 0.13822797)]"
11.0,"The code demonstrates excellent use of classes and functions to produce reusable and maintainable code. The AnimalType enum encapsulates shared characteristics, and the inheritance hierarchy with abstract base classes (Animal, Predator, Prey) promotes code reuse.",15,2,"['code', 'class', 'code', 'animaltype', 'characteristic', 'hierarchy', 'class', 'code', 'reuse']",Inheritance,0.66638434,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66638434), ('Abstraction', 0.16683221), ('Design', 0.16678348)]"
576.0,The code makes good use of inheritance with an abstract Organism superclass. Classes and methods are used effectively to organize the code and enable reuse. The logic is clean and efficient. ,15,2,"['code', 'organism', 'superclass', 'class', 'code', 'reuse', 'logic']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
683.0,"The code makes good use of inheritance, with an abstract Animal class that the concrete species classes extend. This allows for code reuse. The logic for animal behaviors like moving, eating, and breeding is encapsulated within each class. ",15,2,"['code', 'class', 'class', 'code', 'breeding', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
464.0,"lots of repeated code, could of implemented the act functions in the animal class for better reusability.",20,2,"['code', 'class', 'reusability']",Inheritance,0.6666125,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666125), ('Abstraction', 0.16669571), ('Design', 0.16669177)]"
568.0,"Good code reusability, some functions are very long; should break them down. ",20,2,"['code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
216.0,"Lots of repeated code, could of implemented the act functions in the animal class, same goes for giveBirth and findFood",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
35.0,could of implemented the act and give birth functions in animal class rather than each individual animal for better code reusability.,20,2,"['birth', 'class', 'code', 'reusability']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
463.0,Good code reusability,20,2,"['code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
546.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. you have fox, male fox and female fox class which is not good coding. Some functions are very long; should break them down. ",20,2,"['code', 'class', 'fox', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
536.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long; should break them down. ",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
535.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long; should break them down. ",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
388.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down. ",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
81.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down.",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
373.0,"Good code reusability, some functions are very long; should break them down. could of split up animals to predator and pray class to improve code elegance.",20,2,"['code', 'reusability', 'break', 'class', 'code', 'elegance']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
652.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down.",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
103.0,"Good code reusability, some functions are very long; should break them down. ",20,2,"['code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
364.0,"could of created a separate class for disease. repeating code for finding food, could of implemented this in the animal class.",20,2,"['class', 'code', 'finding', 'food', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
430.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down. No need for sex class.",20,2,"['code', 'class', 'findfood', 'sex', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
253.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down. some not useful classes.",20,2,"['code', 'class', 'findfood', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
684.0,"Lots of repeated code, could have implemented the findFood and find-airs functions in the animal class. Some functions are very long and should break them down.",20,2,"['code', 'findfood', 'air', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
456.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down.",20,2,"['code', 'class', 'findfood']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
483.0,"Lots of repeated code, could have implemented the act functions in the animal class, same goes for giveBirth and findFood. Some functions are very long and should break them down. very poor code optimisation which is why the simulation is running slow.",20,2,"['code', 'class', 'findfood', 'code', 'optimisation', 'simulation']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
316.0,Concepts of the course are used wisely.,4,1,['course'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
554.0,Clever use of the concepts used during the course,4,1,['course'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
274.0,"Structured correctly, challenges tried and concepts of the class used",4,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
36.0,Good use of the classes notions,4,1,"['class', 'notion']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
522.0,"Code well structured and well designed. concepts of the class used correctly, some challenges implemented",4,1,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
361.0,"Well strucutred, notion learnt in class properly utilised, some challenges tried",4,1,"['notion', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
111.0,Easy to read but mistake in Localisation,4,1,['localisation'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
399.0,No code,4,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
650.0,Good use of the notions taught in class,4,1,"['notion', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
59.0,"Very well written, many challenges very well implemented, good balance in parameters",4,1,"['balance', 'parameter']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
119.0,Good use of the concepts of the class,4,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
427.0,"Very good, great options and challenges, good use of notion in class and a lot a creativity ",4,1,"['option', 'notion', 'class', 'creativity']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
588.0,"Empty class, mistake in the simulation creation ",4,1,"['class', 'mistake', 'simulation', 'creation']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
629.0,"Good use of the notion in class, sone challenges successfully implemented",4,1,"['notion', 'class', 'sone']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
601.0,Good use of the noton learnt in class,4,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
234.0,"Great use of all notion of the class, well done",4,1,"['notion', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
29.0,No submission,4,1,['submission'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
565.0,"Good use of the learnt notions, challenges well implemented",4,1,['notion'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
612.0,"Very good use of the notion of the module, good implementation of the challenge tasks",4,1,"['notion', 'implementation']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
144.0,Perfect use of the notion of the course and great creativity work to create a unique simulation. Very good job,4,1,"['notion', 'creativity', 'work', 'simulation', 'job']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
583.0,"Good understanding of the java language utilising abstract classes and having the animal class extend organism. However, no abstraction made for predators and preys, they all fall under the animal class. ",11,1,"['understanding', 'language', 'class', 'class', 'organism', 'abstraction', 'class']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669182), ('Design', 0.1666847)]"
211.0,"Usage of interfaces incorrectly, Compilation errors. A lot of code rewritten when it could have been implemented in an abstract class,",11,1,"['usage', 'compilation', 'error', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
338.0,No usage of abstract classes or interfaces. A lot of rewritten code. ,11,1,"['usage', 'class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
618.0,The code does not utilise abstract classes and consequently a lot of code is being rewritten. ,11,1,"['code', 'utilise', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
448.0,"great use of abstract classes, code is not rewritten",11,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
551.0,Great use of abstraction and interfaces. Code is split nicely into packages.,11,1,"['abstraction', 'code', 'split', 'package']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669181), ('Design', 0.16668472)]"
249.0,A lot of rewritten code where it could be abstracted further. ,11,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
97.0,Good usage of organism abstract class. animals extend prey or predator class which allows for code to not be rewritten,11,1,"['usage', 'organism', 'class', 'class', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
70.0,"a lot of rewritten code, could have utilized abstract clsses.",11,1,['clsse'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
246.0,code has been rewritten where it does not need to be.,11,1,['need'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
49.0,"some rewritten code, did not utilize abstracted classes and interfaces.",11,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
294.0,a lot of rewritten code not utilizing abstract and  interfaces.,11,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
478.0,good use of abstraction,11,1,['abstraction'],Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
615.0,submitted template ,11,1,['template'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
604.0,"did not utilize abstraction and interfaces, some rewritten code.",11,1,"['abstraction', 'code']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
440.0,"Great use of abstraction, code is not rewritten for each animal due to predator and prey classes however, canBreed() function could be abstracted even further to animal class.",11,1,"['abstraction', 'code', 'class', 'canbreed', 'class']",Abstraction,0.6666239,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666239), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
441.0,"Did not utilize abstraction and interfaces, a lot of rewritten code.",11,1,"['abstraction', 'code']",Abstraction,0.66662353,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662353), ('Inheritance', 0.16669175), ('Design', 0.16668469)]"
330.0,"no usage of abstraction other than animal class, a lot of rewritten code. ",11,1,"['usage', 'abstraction', 'class', 'code']",Abstraction,0.6666235,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6666235), ('Inheritance', 0.16669181), ('Design', 0.1666847)]"
38.0,"no use of predator and prey classes, a lot of rewritten code",11,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
429.0,"some good use of abstraction however still a lot of rewritten code for example, animals hunting. ",11,1,"['abstraction', 'code']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
582.0,Many features lack flexibility or are implemented in ways that are repeated in every class. These could be extracted to a more generic class such as Animal.,16,2,"['feature', 'lack', 'flexibility', 'class', 'class']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674054), ('Design', 0.16673361)]"
148.0,"Some features are repeated and can be extracted out to a more abstract class. However, some features such as time are extracted out for more cohesion.",16,2,"['feature', 'class', 'cohesion']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674055), ('Design', 0.16673362)]"
201.0,"Features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. Furthermore, good class design for cohesive classes.",16,2,"['feature', 'technique', 'polymorphism', 'class', 'design', 'class']",Abstraction,0.49312055,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.49312055), ('Design', 0.36687258), ('Inheritance', 0.14000684)]"
229.0,Features are implemented in ways in which it is maximally reusable through the use of inheritance and polymorphism of classes.,16,2,"['feature', 'polymorphism', 'class']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674055), ('Design', 0.16673362)]"
544.0,Good attempt at reducing the repeated code through the use of abstract classes. Can be even craftier at producing offspring for each of the animal classes. Also it seems illogical to use class names to provide linkage for predator and prey.,16,2,"['attempt', 'code', 'class', 'offspring', 'class', 'class', 'name', 'linkage']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
273.0,A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior..,16,2,"['code', 'implementation', 'implementation', 'extract', 'code']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
306.0,Sections of code can be reduced by extracting it to a more abstract class and can also be broken down into more abstract methods for more animal-specific behavior. ,16,2,"['section', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
92.0,"Generally, this student attempts to reuse code segments through the use of inheritance and polymorphism. Only minor repetitive code segments are created due to class design choice.",16,2,"['reuse', 'code', 'segment', 'polymorphism', 'code', 'segment', 'class', 'design', 'choice']",Abstraction,0.56519246,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.56519246), ('Design', 0.28767976), ('Inheritance', 0.14712772)]"
487.0,"Features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. However, it is not easy to add new weather or diseases to the environment.",16,2,"['feature', 'technique', 'polymorphism', 'environment']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674054), ('Design', 0.16673361)]"
417.0,A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior.,16,2,"['code', 'implementation', 'implementation', 'extract', 'code']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
241.0,A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior.,16,2,"['code', 'implementation', 'implementation', 'extract', 'code']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670197), ('Abstraction', 0.16669951)]"
355.0,"Features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. Extensive knowledge of Java allows this student to reduce repeated code segments. Furthermore, good class design for cohesive classes. ",16,2,"['feature', 'technique', 'polymorphism', 'knowledge', 'code', 'segment', 'class', 'design', 'class']",Abstraction,0.59792566,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.59792566), ('Design', 0.278706), ('Inheritance', 0.1233683)]"
254.0,Attempts have been made to reduce repeated code through abstract classes. Not very flexible when it comes to the design of weather and weather-based behavior.,16,2,"['attempt', 'code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
67.0,Some attempt to reduce repeated code segments through abstract classes. However many segments of repeated code still exist.,16,2,"['attempt', 'code', 'segment', 'class', 'segment', 'code']",Abstraction,0.666403,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666403), ('Inheritance', 0.16680421), ('Design', 0.16679278)]"
135.0,Generally little repeated code exists in projects other than the breeding function. Design choices have led to difficulty in extending the function.,16,2,"['code', 'project', 'design', 'choice', 'difficulty']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
63.0,"A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior. In addition, some extension features are implemented in ways for which it is hard to extend to add new features.",16,2,"['code', 'implementation', 'implementation', 'extract', 'code', 'addition', 'extension', 'feature', 'extend', 'feature']",Abstraction,0.48034537,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.48034537), ('Design', 0.38030306), ('Inheritance', 0.13935158)]"
133.0,"Generally, some repeated code segments exist in projects. Design choices have led to difficulty in extending the function.",16,2,"['code', 'segment', 'project', 'design', 'choice', 'difficulty']",Abstraction,0.48595855,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.48595855), ('Design', 0.37435424), ('Inheritance', 0.13968721)]"
11.0,"Features are generally implemented in reusable ways using techniques such as polymorphism and inheritance. Extensive knowledge of Java allows this student to reduce repeated code segments. Furthermore, good class design for cohesive classes. ",16,2,"['feature', 'technique', 'polymorphism', 'knowledge', 'code', 'segment', 'class', 'design', 'class']",Abstraction,0.5979255,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.5979255), ('Design', 0.27870625), ('Inheritance', 0.1233683)]"
576.0,Many features lack flexibility or are implemented in ways that are repeated in every class. These could be extracted to a more generic class such as Animal.,16,2,"['feature', 'lack', 'flexibility', 'class', 'class']",Abstraction,0.66652584,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66652584), ('Inheritance', 0.16674054), ('Design', 0.16673361)]"
683.0,A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior.,16,2,"['code', 'implementation', 'implementation', 'extract', 'code']",Design,0.6665985,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665985), ('Inheritance', 0.16670199), ('Abstraction', 0.16669953)]"
377.0,"Lots of reusable code, no repetition",20,1,"['code', 'repetition']",Abstraction,0.6664554,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.6664554), ('Design', 0.16677354), ('Inheritance', 0.16677111)]"
46.0,"act function is similar for all animals, could of implemented it in the animal class rather than having it as an abstract class for better code reusability.",20,1,"['class', 'class', 'code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
365.0,"smart coding, reusable functions. no repeating code",20,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
526.0,"give birth function has similar structure in each animal, should of implemented it in the animal class.",20,1,"['birth', 'structure', 'class']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.16670391), ('Inheritance', 0.16670115)]"
255.0,"great code reusability, no repeating code. however some functions are long and do more than 1 thing.",20,1,"['code', 'reusability', 'code', 'thing']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
98.0,"act function is similar for all animals, should of implemented it in the animal class. Why is plant and InfectableAnimal class extending from animal class?",20,1,"['class', 'class', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
659.0,"act function does too much, should break it down.",20,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
387.0,"poor code reusability. Act functions are similar so should of implemented that in the animal class, why do you need a New class for each animal and animal class.",20,1,"['code', 'reusability', 'class', 'class', 'class']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
574.0,"day act and night act functions are very similar for all animals, should of implemented it in the animal class for better code reusability.",20,1,"['day', 'night', 'class', 'code', 'reusability']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
450.0,"act function is similar for all animals, should of implemented it in animal class for better code reusability. Same goes for FindFood function.",20,1,"['class', 'code', 'reusability', 'findfood']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
221.0,"act function is similar for all animals, should of implemented it in animal class for better code reusability.",20,1,"['class', 'code', 'reusability']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
156.0,"act function is similar for all animals, could of implemented it in the animal class for better code reusability.",20,1,"['class', 'code', 'reusability']",Inheritance,0.666613,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.666613), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
516.0,"act function does too much, should break it down. Excellent code reusability, no repeating code.",20,1,"['code', 'reusability', 'code']",Inheritance,0.6666129,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6666129), ('Abstraction', 0.16669548), ('Design', 0.16669157)]"
289.0,"Overall code elegance is good. The readability of the code is high. The modularity of the codebase could be improved: For example, dividing Animal classes into predator/prey sub-types. There are, however, other examples of good extendability in the codebase: such as the FieldStats class.",28,1,"['code', 'elegance', 'codebase', 'class', 'sub', 'type', 'extendability', 'codebase', 'fieldstat', 'class']",Abstraction,0.66656476,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66656476), ('Inheritance', 0.16671798), ('Design', 0.16671723)]"
555.0,The student used abstract classes and interfaces well. The code is modularised well and is open to extension. The classes and methods adhere to the single-responsibility principle. Common functionality is pushed to the superclasses such as 'Animal',28,1,"['class', 'code', 'extension', 'class', 'responsibility', 'functionality', 'superclass']",Inheritance,0.7233054,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.7233054), ('Abstraction', 0.13835405), ('Design', 0.1383405)]"
33.0,The code is very well organised with good use of abstract classes. Common functionality is suitably encapsulated inside super-classes. There are some instances of inappropriate close-coupling of classes including the Wolf and Zebra classes,28,1,"['code', 'class', 'functionality', 'class', 'instance', 'coupling', 'class', 'wolf', 'class']",Inheritance,0.6664716,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6664716), ('Abstraction', 0.16678007), ('Design', 0.16674829)]"
176.0,"The code is well organised and for the most part, classes are well modularised and contained. I like the Animal class exposing the cold, hot, etc. behaviours. However, there is a considerable amount of repeated code which could be delegated to a common super-type for predator/prey, etc. ",28,1,"['code', 'part', 'class', 'class', 'amount', 'code', 'type']",Abstraction,0.66656476,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66656476), ('Inheritance', 0.16671799), ('Design', 0.16671725)]"
619.0,Excellent use of abstract classes and I like the use of enums. The code is implemented with good maintainability and modularity. Good effort has been made to appropriately hide complexity. ,28,1,"['class', 'enum', 'code', 'maintainability', 'effort', 'complexity']",Inheritance,0.66652364,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66652364), ('Abstraction', 0.16673855), ('Design', 0.16673778)]"
305.0,"The student exhibits an adept knowledge of encapsulation and modular code design. Abstract classes, enums, and inheritance are used appropriately. The general code structure is well-organised and open to extension. ",28,1,"['design', 'class', 'enum', 'code', 'structure', 'extension']",Abstraction,0.4643371,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.4643371), ('Design', 0.39702064), ('Inheritance', 0.1386422)]"
85.0,"The code is competently written, however, further efforts should have been made to improve the modularity of the code. Inheritance is used sparingly and the code could benefit from additional class sub-types such as predator/prey. The poor abstraction is highlighted by Plant being a sub-type of Animal",28,1,"['effort', 'code', 'code', 'class', 'sub', 'type', 'abstraction', 'sub', 'type']",Abstraction,0.70569265,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.70569265), ('Inheritance', 0.14715469), ('Design', 0.14715269)]"
6.0,"The code is well presented and is sufficiently maintainable. However, more effort should be made on the use of inheritance and sub-typing. For example, a Predator or Prey class should be implemented to hold repeated code. The methods inside classes are sufficiently self-contained however, and exhibit the single-responsibility principle. ",28,1,"['code', 'effort', 'sub', 'class', 'code', 'class', 'self', 'responsibility']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
428.0,"The student has shown a good understanding of code modularity, inheritance and use of abstract classes. The use of Predator/Prey sub-types is good, and the encapsulation of common behaviours in the Animal class is clean.",28,1,"['understanding', 'code', 'class', 'sub', 'type', 'encapsulation', 'class', 'clean']",Abstraction,0.43118885,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.43118885), ('Inheritance', 0.430536), ('Design', 0.13827515)]"
43.0,"The code is implemented competently however further effort should be made on improving the modularity and extensibility of the code. For example, including a Predator/Prey sub-type would be a nice addition, and moving common code to animal super-types would improve the code elegance. Some classes are too tightly-coupled. For example, the agent classes should control their own behaviours under different time and weather conditions, rather than this being governed by the Simulator class",28,1,"['code', 'effort', 'extensibility', 'code', 'sub', 'type', 'addition', 'code', 'type', 'code', 'elegance', 'class', 'agent', 'class', 'control', 'condition', 'simulator', 'class']",Abstraction,0.51534444,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.51534444), ('Design', 0.34303403), ('Inheritance', 0.14162154)]"
267.0,"The student uses abstract classes and inheritance appropriately, however, some design decisions negatively impact the elegance of the codebase. For example, the act() method of agents is much too large and is difficult to maintain- mixing logic for many disparate concerns such as breeding and movement. The submission includes what appear to be previous versions of the code in the form of [1].java files (however I have not marked the student lower for these)",28,1,"['class', 'design', 'decision', 'elegance', 'codebase', 'agent', 'maintain', 'logic', 'concern', 'movement', 'submission', 'version', 'code', 'form', 'file']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
416.0,The code is structured competently with use of enums and inheritance between classes. Introducing a prey and predator subtype could be a good idea for encapsulating common behaviours. ,28,1,"['enum', 'class', 'subtype', 'idea']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
340.0,"The code is competently structured with appropriate use of inheritance. Further decomposing of classes would be ideal, for example, using a predator and prey class",28,1,"['class', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
394.0,The student uses encapsulation and inheritance well. The use of interfaces for 'eatable by' is clever and effective. The inclusion of carnivore and herbivore subtypes makes for easily-maintanable code,28,1,"['encapsulation', 'inclusion', 'carnivore', 'herbivore', 'subtype', 'code']",Inheritance,0.6654603,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6654603), ('Abstraction', 0.16775607), ('Design', 0.16678366)]"
529.0,The student uses encapsulation and inheritance well. The inclusion of Nature as a class type is effective for implementing the Tree and Weed. There are some methods such as act() which are too large and would benefit from being divided further. The passing of 'frogPresent' etc. in these classes should be avoided to reduce tight-coupling of classes,28,1,"['encapsulation', 'inclusion', 'nature', 'class', 'type', 'tree', 'weed', 'frogpresent', 'class', 'coupling', 'class']",Abstraction,0.43119404,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.43119404), ('Inheritance', 0.43053082), ('Design', 0.13827516)]"
345.0,All features are implemented to an excellent standard. The student shows good understanding of encapsulation and inheritance. The addition of an Actor class type makes for clean code and the sub-division into Predator and Prey improves modularity. Methods are implemented with good use of single-responsibility. ,28,1,"['feature', 'standard', 'understanding', 'encapsulation', 'addition', 'actor', 'class', 'type', 'code', 'sub', 'division', 'responsibility']",Abstraction,0.5584994,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.5584994), ('Inheritance', 0.31930923), ('Design', 0.122191384)]"
121.0,"The student demonstrates a sound understanding of encapsulation and inheritance. The introduction of a Plant superclass is a nice touch. The animal classes could be divided into subtypes of Predator, Prey supertypes for improved modularity. The Creatures class contains too many disparate parts of model logic that should be distributed elsewhere. For example, mixing weather with time, location, and life is not ideal. ",28,1,"['encapsulation', 'introduction', 'superclass', 'touch', 'class', 'subtype', 'supertype', 'creature', 'class', 'part', 'model', 'logic', 'location', 'life']",Inheritance,0.721737,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.721737), ('Abstraction', 0.13935114), ('Design', 0.13891186)]"
13.0,No modifications have been made to the original code distributed to students as part of the assignment. ,28,1,"['modification', 'code', 'part', 'assignment']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
281.0,"The code is well implemented and the student demonstrates good practise of using encapsulation and inheritance. The code structure would benefit from introducing a predator and prey class, however, the common methods of animals have been moved to the Animal class. The Field class contains helpful methods for identifying the contents of neighbouring cells which makes for clean and extensible code.",28,1,"['practise', 'encapsulation', 'code', 'structure', 'class', 'class', 'field', 'class', 'content', 'neighbouring', 'cell', 'code']",Inheritance,0.45045683,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.45045683), ('Abstraction', 0.41089484), ('Design', 0.13864829)]"
284.0,"The student shows a good understanding of encapsulation and inheritance: For example, introducing the Organism class to contain common methods and properties of agents. However, the plants and animals should be divided into their own subtypes and a predator / prey class would improve modularity. ",28,1,"['understanding', 'encapsulation', 'organism', 'class', 'property', 'agent', 'subtype', 'class']",Inheritance,0.6654643,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6654643), ('Abstraction', 0.16775209), ('Design', 0.1667836)]"
555.0,"Code is generally quite clean. Certain aspects of the program may be over-abstracted; for example, the existence of the Simulatable class isn't entirely justified, nor does it make complete sense - everything in your simulation is inherently simulatable. That class seems to be better fitted to describing an organism rather than any simulatable object. Similarly, locatable (which is semantically better defined with an interface rather than a class, if it should even exist) doesn't entirely make sense either. It seems every animal should be locatable anyway, so perhaps animals and other non-animal yet locatable objects should inherit a base class providing these aspects. You have some dead code included also.",26,1,"['code', 'aspect', 'program', 'existence', 'class', 'sense', 'class', 'organism', 'class', 'sense', 'inherit', 'class', 'aspect', 'code']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
619.0,"Generally correct organisation of code but there is a lot of repetition, for example, you have implemented identical getters and setters for identical variables in the class. You can use a private (but not final) variable for the BREEDING_AGE, MAX_AGE, etc, variables in its superclass with no setter such that it is only defined in the constructor, and you don't need to reimplement getters every time.",26,1,"['organisation', 'code', 'repetition', 'getter', 'variable', 'class', 'breeding_age', 'max_age', 'variable', 'superclass', 'setter', 'constructor', 'reimplement', 'getter']",Design,0.4276631,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.4276631), ('Abstraction', 0.29727063), ('Inheritance', 0.27506626)]"
305.0,"Good use of abstraction, and appropriate class hierarchy. Could avoid lots of repetition by using private variables in superclasses and implementing getters within them. Decent application of qualifiers to class fields and methods.",26,1,"['abstraction', 'class', 'hierarchy', 'repetition', 'variable', 'getter', 'application', 'qualifier', 'class', 'field']",Abstraction,0.43522224,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.43522224), ('Inheritance', 0.2892461), ('Design', 0.27553162)]"
85.0,"Refreshingly simple and concise, yet effective code. Good use of class structures and qualifications. Abstractions are clear where they are used and are justified.",26,1,"['concise', 'code', 'class', 'structure', 'qualification', 'abstraction']",Abstraction,0.7223865,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.7223865), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
6.0,Mostly appropriate class hierarchy and abstractions are applied. It would be worth considering that semantically it makes less sense for an organism's food value to be determined by the predator rather than a specific food value assigned to a prey. Besides that code is clean and concise. There is a quite a bit of repetition. It seems there are many configuration variables shared across different animals/organisms that are constantly redeclared and reexplained.,26,1,"['class', 'hierarchy', 'abstraction', 'sense', 'organism', 'food', 'value', 'food', 'value', 'concise', 'bit', 'repetition', 'configuration', 'variable', 'organism']",Abstraction,0.43522272,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.43522272), ('Inheritance', 0.28924567), ('Design', 0.27553156)]"
428.0,"Good use of abstraction, and appropriate class hierarchy. Could avoid lots of repetition by using private variables in superclasses and implementing getters within them. Decent application of qualifiers to class fields and methods.",26,1,"['abstraction', 'class', 'hierarchy', 'repetition', 'variable', 'getter', 'application', 'qualifier', 'class', 'field']",Abstraction,0.43522385,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.43522385), ('Inheritance', 0.28924435), ('Design', 0.2755318)]"
43.0,"Refreshingly simple and concise, yet effective code. Good use of class structures and qualifications. Abstractions are clear where they are used and are justified.",26,1,"['concise', 'code', 'class', 'structure', 'qualification', 'abstraction']",Abstraction,0.72238654,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.72238654), ('Inheritance', 0.13880736), ('Design', 0.13880616)]"
267.0,"There are some clear remnants of copy pasting/ChatGPT usage. Class structure is unintuitive, particularly how Elements are structured. ",26,1,"['remnant', 'chatgpt', 'usage', 'class', 'structure', 'element']",Abstraction,0.666595,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.666595), ('Design', 0.1667039), ('Inheritance', 0.16670114)]"
416.0,"Mostly appropriate use of OOP techniques, unsure about the necessity of the Gender class. It seems more semantically intact for gender to be an attribute of any entity rather than an entity in itself. Class hierarchy should aim to replicate the domain hierarchy, else you are designing less of an object-oriented system and more of an arbitrarily designed set of data types.",26,1,"['oop', 'technique', 'necessity', 'gender', 'class', 'gender', 'attribute', 'entity', 'entity', 'class', 'hierarchy', 'domain', 'hierarchy', 'system', 'datum', 'type']",Inheritance,0.5117134,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.5117134), ('Abstraction', 0.34683684), ('Design', 0.14144984)]"
340.0,"Good use of abstraction, and appropriate class hierarchy. Could avoid lots of repetition by using private variables in superclasses and implementing getters within them. Decent application of qualifiers to class fields and methods.",26,1,"['abstraction', 'class', 'hierarchy', 'repetition', 'variable', 'getter', 'application', 'qualifier', 'class', 'field']",Abstraction,0.43522277,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.43522277), ('Inheritance', 0.2892455), ('Design', 0.27553174)]"
394.0,"Whilst most abstractions and OOP principles are applied sensibly, there are some fundamental misrepresentations of entities and their position in the class hierarchy. Take, for example, disease - it shouldn't stand that a disease should keep track of every animal it infects, but rather an animal contracts a disease and this affects its behaviour/internal parameters.",26,1,"['abstraction', 'oop', 'entity', 'position', 'class', 'hierarchy', 'stand', 'track', 'infect', 'contract', 'parameter']",Inheritance,0.47262907,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.47262907), ('Abstraction', 0.38829455), ('Design', 0.13907635)]"
529.0,"Good use of abstraction, and appropriate class hierarchy. Could avoid lots of repetition by using private variables in superclasses and implementing getters within them. Decent application of qualifiers to class fields and methods.",26,1,"['abstraction', 'class', 'hierarchy', 'repetition', 'variable', 'getter', 'application', 'qualifier', 'class', 'field']",Abstraction,0.4352214,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.4352214), ('Inheritance', 0.2892472), ('Design', 0.27553138)]"
345.0,"Whilst code is generally well written, some aspects of what class/entity should be responsible for what task remain a little unintuitive. For example, it doesn't seem semantically intact for the simulator to decide what animals (predators in this case) should act or not when there is fog. It would make more sense for an Animal to ingest this information and decide what it will do.",26,1,"['code', 'aspect', 'class', 'entity', 'simulator', 'case', 'sense', 'information']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
121.0,"Code is well written. Abstractions are appropriately used to make code neat and well structured, and functions are appropriately broke down into well sized units. ",26,1,"['code', 'abstraction', 'code', 'unit']",Abstraction,0.66662353,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662353), ('Inheritance', 0.16669174), ('Design', 0.1666847)]"
281.0,"Code is well written. Abstractions are appropriately used to make code neat and well structured, and functions are appropriately broke down into well sized units. ",26,1,"['code', 'abstraction', 'code', 'unit']",Abstraction,0.66662353,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662353), ('Inheritance', 0.16669174), ('Design', 0.1666847)]"
284.0,"Code is well written. Abstractions are appropriately used to make code neat and well structured, and functions are appropriately broke down into well sized units. ",26,1,"['code', 'abstraction', 'code', 'unit']",Abstraction,0.66662383,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66662383), ('Inheritance', 0.16669157), ('Design', 0.16668457)]"
458.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,1,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
608.0,Appropriate approaches taken to implementation of both core and challenge classes. Very readable.,17,1,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
553.0,Appropriate approaches taken to implementation of both core and challenge classes. Very readable.,17,1,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
389.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,1,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
377.0,Base and challenge tasks are efficiently implemented and remain perfectly readable and maintanable.,17,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
46.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,1,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
80.0,Code is elegant but seems to be the same as the default submission.,17,1,"['code', 'elegant', 'default', 'submission']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
82.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,1,"['implementation', 'core', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
651.0,Solid implementation of both core and challenge classes. Very appropriate approaches taken.,17,1,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
365.0,Appropriate approaches taken to implementation of both core and challenge classes. Would've been more desirable to give each animal their own file to make it easier to discrimnate between each of their expected behaviours. This would've also allowed for better maintainability.,17,1,"['implementation', 'core', 'class', 'file', 'discrimnate', 'maintainability']",Design,0.5614731,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.5614731), ('Inheritance', 0.3158232), ('Abstraction', 0.12270375)]"
526.0,The classes and packages are set up in quite a convoluted way to the point where the simulator does not compile. ,17,1,"['class', 'package', 'point', 'simulator', 'compile']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
255.0,Base and challenge tasks are efficiently implemented and remain perfectly readable and maintanable.,17,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
98.0,Appropriate approaches taken to implementation of both core and challenge classes. Quite readable although hard to judge effectiveness of implementation with no simulation.,17,1,"['implementation', 'core', 'class', 'judge', 'effectiveness', 'implementation', 'simulation']",Design,0.72034746,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72034746), ('Inheritance', 0.13982825), ('Abstraction', 0.13982427)]"
659.0,Base and challenge tasks are very efficiently implemented and remain perfectly readable and maintanable.,17,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
387.0,Mostly solid implementation although a few hacky lines exist throughout reducing readability and maintainability.,17,1,"['implementation', 'line', 'maintainability']",Inheritance,0.43412417,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.43412417), ('Design', 0.42770875), ('Abstraction', 0.13816707)]"
574.0,Base and challenge tasks are efficiently implemented and remain perfectly readable and maintanable.,17,1,[],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
450.0,Appropriate approaches taken to implementation of both core and challenge classes. Very readable.,17,1,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
221.0,Appropriate approaches taken to implementation of both core and challenge classes. Very readable.,17,1,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
156.0,Appropriate approaches taken to implementation of both core and challenge classes. Very readable.,17,1,"['implementation', 'core', 'class']",Design,0.72235274,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.72235274), ('Inheritance', 0.138826), ('Abstraction', 0.1388212)]"
516.0,Appropriate approaches taken to implementation of both core and challenge classes. Classes could be better encapsulated however.,17,1,"['implementation', 'core', 'class', 'class']",Design,0.7223528,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.7223528), ('Inheritance', 0.13882601), ('Abstraction', 0.13882121)]"
316.0,May be useful to have superclass for preys and predators to better differentiate between them,2,1,['superclass'],Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
554.0,Code is maintainable with good use of abstract classes,2,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
274.0,Code is written is a way that is readable and extensible.,2,1,['code'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
36.0,"To better differentiate between preys and predators, it may be helpful to have a super class for preys and another super class for predators.",2,1,"['class', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
522.0,Separate class for Weather could be used and superclass for predators and prey may be helpful to better differentiate between entities.,2,1,"['class', 'superclass', 'entity']",Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
361.0,"Abstract classes make code reusable and maintainable. To improve the extensibility of your code, it would be better to implement Time in a separate class.",2,1,"['class', 'code', 'improve', 'extensibility', 'code', 'class']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
111.0,Good use of abstract classes for predators and preys. Weather could be implemented in separate class,2,1,"['class', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
399.0,The submission is the same as the original ,2,1,['submission'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
650.0,"To improve extensibility of code, it would be useful to add superclass for predators and preys",2,1,"['extensibility', 'code', 'superclass']",Design,0.4710009,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.4710009), ('Inheritance', 0.39007887), ('Abstraction', 0.13892022)]"
59.0,Use of classes and functions improves code extensibility ,2,1,"['class', 'code', 'extensibility']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
119.0,"Code could make use of abstract classes to improve extensibility and breakdown longer functions into smaller, modular functions",2,1,"['code', 'class', 'extensibility', 'breakdown']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
427.0,Classes and functions are reusable and maintainable,2,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
588.0,Abstract classes could be used to improve extensibility,2,1,"['class', 'extensibility']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
629.0,Code is maintainable and extendable with good use of abstract classes,2,1,['class'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
601.0,"Code could make use of abstract classes to improve extensibility and breakdown longer functions into smaller, modular functions",2,1,"['code', 'class', 'extensibility', 'breakdown']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
234.0,Code is written in a way that is readable and extensible with the use of abstract classes,2,1,"['code', 'class']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
29.0,The submission is the same as the original ,2,1,['submission'],Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
565.0,Code could make use of abstract classes to improve extensibility,2,1,"['code', 'class', 'extensibility']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
612.0,"Code could make use of abstract classes to improve extensibility and breakdown longer functions into smaller, modular functions",2,1,"['code', 'class', 'extensibility', 'breakdown']",Design,0.6665572,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.6665572), ('Inheritance', 0.16672574), ('Abstraction', 0.16671713)]"
144.0,May be useful to have superclass for preys and predators to better differentiate between them,2,1,['superclass'],Inheritance,0.6665927,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.6665927), ('Design', 0.1667039), ('Abstraction', 0.1667034)]"
316.0,Animals and Plants extend Entity. Animals may be abstracted further into 'Predator' and 'Prey' classes for better extendability.,1,1,"['entity', 'class', 'extendability']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
554.0,Program shows good opportunity for extendability. Handful of methods have low cohesion.,1,1,"['program', 'opportunity', 'extendability', 'handful', 'cohesion']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
274.0,Class hierarchy works well. A lot of variables are not clear for what they are used for. Animal stats are an enum in Animal. Reason for this is unclear.,1,1,"['class', 'hierarchy', 'variable', 'stat', 'reason']",Inheritance,0.44365522,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.44365522), ('Design', 0.41799626), ('Abstraction', 0.13834856)]"
36.0,Class hierarchy makes sense. Final variables that require adjustment should not be kept in a class. They should be kept in the relevant method.,1,1,"['class', 'hierarchy', 'sense', 'variable', 'adjustment', 'class']",Inheritance,0.44365487,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.44365487), ('Design', 0.41799656), ('Abstraction', 0.13834861)]"
522.0,Code is generally implemented well. Some inconsistent design decisions. Some methods have low cohesion (e.g. incrementAge also determines if an animal dies),1,1,"['design', 'decision', 'cohesion', 'incrementage']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
361.0,Code generally well implemented. Some design decisions should be reconsidered. Some methods show low cohesion.,1,1,"['design', 'decision', 'cohesion']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
111.0,Class hierarchy is logical. Some seemingly copied and pasted code. Logic for each animal type should not be programmed in its superclass.,1,1,"['class', 'hierarchy', 'code', 'logic', 'type', 'superclass']",Inheritance,0.5227493,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.5227493), ('Abstraction', 0.3548867), ('Design', 0.12236399)]"
650.0,"Some questionable design choices, like storing food values of a predator's prey in the predator. A lot of reused code.",1,1,"['design', 'choice', 'food', 'value', 'code']",Design,0.66655916,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.66655916), ('Abstraction', 0.16674225), ('Inheritance', 0.16669862)]"
59.0,"The design is questionable. There is a cyclical relationship with Organism, Animal, and the various types of animals. It makes extending the program a more arduous process. Behaviour of each animal would be better specified on a class-by-class basis.",1,1,"['relationship', 'organism', 'type', 'program', 'process', 'class', 'class', 'basis']",Abstraction,0.66656476,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.66656476), ('Inheritance', 0.16671799), ('Design', 0.16671725)]"
119.0,Class hierarchy logic is questionable. Why does plant extend animal? findFood method can be generalised better.,1,1,"['class', 'hierarchy', 'logic', 'extend', 'findfood']",Inheritance,0.66638434,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66638434), ('Abstraction', 0.1668322), ('Design', 0.16678348)]"
427.0,Code is well structured and allows for easy extension. Animal food values are better stored in the animal themself.,1,1,"['code', 'extension', 'food', 'value', 'themself']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
588.0,Generally good class structure and design.,1,1,"['class', 'structure', 'design']",Abstraction,0.46433717,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.46433717), ('Design', 0.3970206), ('Inheritance', 0.1386422)]"
629.0,"Generally good class structure. Class design could be better, as a lot of shared variables and methods should have been moved to the superclass.",1,1,"['class', 'structure', 'class', 'design', 'variable', 'superclass']",Design,0.42691302,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.42691302), ('Abstraction', 0.2926409), ('Inheritance', 0.28044605)]"
601.0,Class structure and design generally good. Some shared variables could be moved to the super class. Some further abstractions can be made to move even more shared variables (e.g. distinction between predator and prey.),1,1,"['class', 'structure', 'design', 'variable', 'class', 'abstraction', 'move', 'variable', 'distinction']",Design,0.5082727,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.5082727), ('Abstraction', 0.37473524), ('Inheritance', 0.116992064)]"
234.0,Class structure and design is well-meaning. ,1,1,"['class', 'structure', 'design']",Abstraction,0.4643372,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.4643372), ('Design', 0.3970206), ('Inheritance', 0.1386422)]"
565.0,Generally good class design and structure. More shared variables could be put inside the relevant superclass. A lot of commented out code. Some misuse of variable access.,1,1,"['class', 'design', 'structure', 'variable', 'superclass', 'code', 'misuse', 'access']",Design,0.426913,"design, variable, implementation, extensibility, core, hierarchy, encapsulation, structure, type, repetition","[('Design', 0.426913), ('Abstraction', 0.29264092), ('Inheritance', 0.28044608)]"
612.0,Generally good code structure and design. Further abstraction can be made between Animal types so that more variables can be shared.,1,1,"['code', 'structure', 'design', 'abstraction', 'type', 'variable']",Abstraction,0.53545874,"abstraction, structure, type, feature, repetition, segment, encapsulation, hierarchy, design, variable","[('Abstraction', 0.53545874), ('Design', 0.36070502), ('Inheritance', 0.10383623)]"
144.0,Class hierarchy allows addition of more organisms. Food chain class does not seem the best approach. The food chain should be able to be implied from the class hierarchy.,1,1,"['class', 'hierarchy', 'addition', 'organism', 'food', 'chain', 'class', 'food', 'chain', 'class', 'hierarchy']",Inheritance,0.66638434,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.66638434), ('Abstraction', 0.1668322), ('Design', 0.16678348)]"
587.0,some comments are redundant or state the obvious. use a shared Random instance,14,1,"['state', 'instance']",Inheritance,0.33333334,"hierarchy, superclass, reusability, encapsulation, maintainability, functionality, subclass, variable, extensibility, type","[('Inheritance', 0.33333334), ('Design', 0.33333334), ('Abstraction', 0.33333334)]"
