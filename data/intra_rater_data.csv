assignment_number,skill,participant_id,batch,comments
358.0,Readability,15,1,The code is generally clean and organized with consistent indentation and spacing. Meaningful variable and method names are used.
358.0,Correctness,15,1,"All of the base tasks are completed - the simulation has at least 5 species (rabbits, foxes, plants, squirrels, nuts, vultures, mice). Males and females are distinguished, requiring them to meet to propagate. Time of day is tracked, with some creatures like rabbits and squirrels unable to move at night. However, a few details are missing - the original Fox and Rabbit classes were used rather than being replaced by different predator/prey species as specified. No challenge tasks like weather or disease simulation were attempted."
358.0,Code Elegance,15,1,"The code demonstrates good use of classes and functions, producing fairly reusable and maintainable code. Inheritance is used effectively with base Animal class. The code is readable and understandable without being overly complex."
358.0,Documentation,15,1,"Most classes and functions have clear, useful comments explaining their purpose. A few more inline comments explaining complex logic would be helpful."
160.0,Readability,24,1,The student used indentation appropriately and consistently to delineate code blocks
160.0,Correctness,24,1,"The application works as described in the assignment, although some minor issues have been encountered in the application."
160.0,Code Elegance,24,1,The code is fairly efficient without sacrificing readability and understanding.
160.0,Documentation,24,1,The documentation consists od comments that are some-what useful in understanding the code.
686.0,Readability,28,2,The code is presented well with good consistent naming conventions and formatting. Appropriate access modifiers are used throughout
686.0,Correctness,28,2,The student has met all baseline requirements and has implemented some of the challenge extensions including weather-based behaviours and plants. 
686.0,Code Elegance,28,2,"The code is structured reasonably well, however, some improvements could be made. For example, the weather types should be an enum rather than an int assigned by methods. The common methods for animals should be placed in superclasses such as predator, prey. The plant class should have its own subtype and specific plant instances."
686.0,Documentation,28,2,"The code documentation is good overall, however, is inconsistent in places. In particular some methods are not annotated with inputs and output descriptions whilst others are"
681.0,Readability,8,2,
681.0,Correctness,8,2,
681.0,Code Elegance,8,2,
681.0,Documentation,8,2,
144.0,Readability,3,1,"The codebase demonstrates a high level of organisation, consistent indentation, and meaningful identifier names."
144.0,Correctness,3,1,"Core Tasks: All listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

Challenge Tasks:  Three challenge tasks are completed (Plants, Weather, Disease), demonstrating exceptional technical aptitude and creativity in extending the simulation beyond the basic requirements.

BlueJ: Run's in BlueJ without any issues."
144.0,Code Elegance,3,1,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability."
144.0,Documentation,3,1,"Each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. Well documented."
389.0,Readability,18,1,"The code is mostly easy to read, and well stratified into classes and variables."
389.0,Correctness,18,1,"More than five animals were used. At least 2 of them compete for the same prayer. At least 2 of them eat just grass. Male or female animals are identified for some of the animals. Time of the day is tracked. Extra additions: plants that act as grass, different levels of diseases."
389.0,Code Elegance,18,1,"The code is efficient and the use of classes is well specified. Good indentation is present, and the classes are well-stratified."
389.0,Documentation,18,1,"The code is mostly easy to read, but many sections do not have enough comments, while some sections have redundant comments."
358.0,Readability,16,1,"Generally good identifier names and ok indentation for segregating methods. However, some functions are overly long and lack separation."
358.0,Correctness,16,1,"Completed all base tasks and one extension task. Generally, more explanation is needed for easier identification of these tasks."
358.0,Code Elegance,16,1,"Generally okay use of classes. However, some more work will be needed to reduce repeated code segments in animal classes, such as their behaviour. "
358.0,Documentation,16,1,"Generally included comments on all methods. However, some state the obvious which seems to be redundant."
684.0,Readability,18,2,"Some spacing is not in place, and this makes the code hard to read sometimes. Some methods are very long and it is very hard to read through the code."
684.0,Correctness,18,2,"There are at least five species that are created. There are at least two species that fight for the same resource, while there are at least two species that do not fight for any resource. The behaviour changes based on the time of the day and there is a difference of breeding between males and females. Extra features added: Plants + Disease + Weather."
684.0,Code Elegance,18,2,
684.0,Documentation,18,2,Some parts of the code do not have enough comments.
176.0,Readability,27,1,"Appropriate identifier names, function performs single operation, public/private should be improved"
176.0,Correctness,27,1,"The application works. Base Tasks completed. 3 Challenge tasks attempted (plants, weather, hunger level). "
176.0,Code Elegance,27,1,"Code could be re-used, but more could be done to make it re-usable. Code is maintainable."
176.0,Documentation,27,1,Some comments state the obvious. Good comments at the beginning of files.
685.0,Readability,22,2,
685.0,Correctness,22,2,All core tasks completed. Extension tasks completed except for disease implenetation.
685.0,Code Elegance,22,2,"Abstraction could go further, e.g. some methods within the animal classes could be within the class animal"
685.0,Documentation,22,2,"Confusion between animal class names in description of functions. Also incorrect description of grass behaviour, i.e. is documented as eating antelopes."
684.0,Readability,17,2,"Great function, class and variable names used. Indentation and general code structure is clear. Great use of self-contained classes."
684.0,Correctness,17,2,All base and some challenge tasks completed to a high standard. Disease class has probability so low that it will never come into effect during simulation.
684.0,Code Elegance,17,2,Solid implementation of both core and challenge classes. Very appropriate approaches taken.
684.0,Documentation,17,2,Solid use of comments and javadocs.
680.0,Readability,4,2,Easy to follow and understand
680.0,Correctness,4,2,"Very good implementation of both base and challenge tasks, but the simulation stops fairly quickly"
680.0,Code Elegance,4,2,Very well structured code
680.0,Documentation,4,2,Very good documentation
683.0,Readability,14,2,
683.0,Correctness,14,2,
683.0,Code Elegance,14,2,
683.0,Documentation,14,2,
160.0,Readability,21,1,
160.0,Correctness,21,1,
160.0,Code Elegance,21,1,
160.0,Documentation,21,1,
681.0,Readability,7,2,"It is readable, though not perfect."
681.0,Correctness,7,2,Some efforts have been put into this project.
681.0,Code Elegance,7,2,The design could have been better.
681.0,Documentation,7,2,"It is good, though not perfect."
97.0,Readability,10,1,
97.0,Correctness,10,1,
97.0,Code Elegance,10,1,
97.0,Documentation,10,1,This submission is completely identical to the submission by student 682. Plagiarism is considered.
685.0,Readability,21,2,
685.0,Correctness,21,2,
685.0,Code Elegance,21,2,
685.0,Documentation,21,2,
559.0,Readability,5,1,
559.0,Correctness,5,1,
559.0,Code Elegance,5,1,
559.0,Documentation,5,1,
680.0,Readability,1,2,Code styling is consistent.
680.0,Correctness,1,2,Code runs well. Challenge tasks were attempted. A significant extension to the program has been attempted.
680.0,Code Elegance,1,2,Class design is sensical. A lot of copied and pasted code.
680.0,Documentation,1,2,Generally good documentation. There are some incorrect/needless comments in some classes.
682.0,Readability,12,2,
682.0,Correctness,12,2,
682.0,Code Elegance,12,2,
682.0,Documentation,12,2,
160.0,Readability,22,1,
160.0,Correctness,22,1,
160.0,Code Elegance,22,1,
160.0,Documentation,22,1,
559.0,Readability,8,1,
559.0,Correctness,8,1,
559.0,Code Elegance,8,1,
559.0,Documentation,8,1,
686.0,Readability,27,2,Some inconsistent indentation. Consistent whitespace. Meaningful identifier names used. Good use of private/public.
686.0,Correctness,27,2,"The application works. Base Tasks completed. 2 Challenge tasks attempted (plants, weather). Plants implemented as an animal."
686.0,Code Elegance,27,2,"Code can be re-used. Code is maintainable. Plant not implemented separately, inhibits re-use."
686.0,Documentation,27,2,Good use of comments. Each function block commented. 
559.0,Readability,6,1,"Good variable naming, public used where could be private"
559.0,Correctness,6,1,Convoluted implementation of weather and disease
559.0,Code Elegance,6,1,"Methods are reusable and readable, but some code repetition  and class redundancy"
559.0,Documentation,6,1,Missing return and parameter comments for some methods
358.0,Readability,13,1,"Clear naming conventions, consistent formatting, and well-organized structure. "
358.0,Correctness,13,1,"This submission does not keep track of the time of day, which is one requirement of core tasks. What is worst, it skips the challenge task."
358.0,Code Elegance,13,1,The code have a good use of classed and functions and nicely laid out.
358.0,Documentation,13,1,"Clear, concise, accurate documentation. "
685.0,Readability,24,2,The application is exceptionally well-organised and very easy to understand.
685.0,Correctness,24,2,The application works as described in the assignment; all base tasks are completed; the student has completed all of the challenge tasks;
685.0,Code Elegance,24,2,"Student demonstrates excellent use of classes and functions to produce reusable and maintainable code, where possible, in the base and all of the challenge tasks"
685.0,Documentation,24,2,"The documentation is well written, organised and clearly explains what the code is accomplishing and how"
680.0,Readability,2,2,code is understandable and organised
680.0,Correctness,2,2,All base and challenge tasks completed
680.0,Code Elegance,2,2,Code is written in a reusable manner by utilising abstract classes and loosely coupling components
680.0,Documentation,2,2,Code is well documented
682.0,Readability,11,2,code is clear and follows consistent structure
682.0,Correctness,11,2,core and challenging tasks completed. added natural disasters
682.0,Code Elegance,11,2,"good abstraction level, code is not rewritten and a lot of generalization"
682.0,Documentation,11,2,documentation is clear and defines every class and function
97.0,Readability,12,1,
97.0,Correctness,12,1,
97.0,Code Elegance,12,1,
97.0,Documentation,12,1,
559.0,Readability,7,1,Easy to read.
559.0,Correctness,7,1,It is basically correct.
559.0,Code Elegance,7,1,"It is good, though there are little problems here and there."
559.0,Documentation,7,1,Better than others.
686.0,Readability,25,2,
686.0,Correctness,25,2,
686.0,Code Elegance,25,2,
686.0,Documentation,25,2,
97.0,Readability,9,1,
97.0,Correctness,9,1,
97.0,Code Elegance,9,1,
97.0,Documentation,9,1,
682.0,Readability,10,2,
682.0,Correctness,10,2,
682.0,Code Elegance,10,2,
682.0,Documentation,10,2,This submission is completely identical to the submission by student 97. Plagiarism is considered.
160.0,Readability,23,1,
160.0,Correctness,23,1,
160.0,Code Elegance,23,1,
160.0,Documentation,23,1,
680.0,Readability,3,2,"The code demonstrates a high level of organisation, consistent indentation, and meaningful identifier names."
680.0,Correctness,3,2,"Core Tasks: All listed core tasks have been completed, indicating a comprehensive approach to the simulation's basic requirements.

Challenge Tasks:  Three challenge tasks are completed (Plants, Weather, Disease), demonstrating exceptional technical aptitude and creativity in extending the simulation beyond the basic requirements.

BlueJ: Run's in BlueJ without any issues."
680.0,Code Elegance,3,2,"Effective Use of Object-Oriented Principles, Easy Maintainability and Reusability."
680.0,Documentation,3,2,"Each class and method is accompanied by comments that clearly explain their role, inputs, outputs, and behaviors. Well documented."
683.0,Readability,13,2,It is easy to navigate and understand.
683.0,Correctness,13,2,The simulation finished the core and challenge task well.
683.0,Code Elegance,13,2,The code is well written.
683.0,Documentation,13,2,The code is accessible and maintainable
686.0,Readability,26,2,
686.0,Correctness,26,2,
686.0,Code Elegance,26,2,
686.0,Documentation,26,2,
681.0,Readability,6,2,
681.0,Correctness,6,2,Both genders can breed around males
681.0,Code Elegance,6,2,"Inheritance is not fully made use of, with a lot of code duplication where not necessary."
681.0,Documentation,6,2,Missing param comment in method header comments 
683.0,Readability,15,2,"The code is well-organized and easy to follow. Class and variable names are meaningful (e.g. incrementHunger, giveBirth). Indentation and whitespace is used consistently. Methods are focused on single responsibilities. Access modifiers are appropriately applied to fields."
683.0,Correctness,15,2,"The simulation includes at least 5 acting species (Fox, Rabbit, Plants, Vulture, Nuts, Squirrel, Mouse), with foxes and vultures as predators, and rabbits, squirrels and mice as non-predators that eat plants/nuts. Foxes and vultures compete for rabbits and squirrels as shared food sources. The species distinguish males and females which must meet to propagate. Time of day is tracked, with some creatures like rabbits and squirrels not moving at night. One of the challenge tasks, adding plants, was also implemented successfully. However, one flaw is that the Fox and Rabbit classes from the original template were retained instead of being fully replaced by new species."
683.0,Code Elegance,15,2,"The code makes good use of inheritance, with an abstract Animal class that the concrete species classes extend. This allows for code reuse. The logic for animal behaviors like moving, eating, and breeding is encapsulated within each class. "
683.0,Documentation,15,2,Each class and method has clear header comments describing its purpose. Some key sections of code within methods also have inline comments explaining their logic.
684.0,Readability,20,2,"Good variable and functions names, missing some comments"
684.0,Correctness,20,2,all basic tasks and challenges completed.
684.0,Code Elegance,20,2,"Lots of repeated code, could have implemented the findFood and find-airs functions in the animal class. Some functions are very long and should break them down."
684.0,Documentation,20,2,"No report, some code not explained"
685.0,Readability,23,2,
685.0,Correctness,23,2,
685.0,Code Elegance,23,2,
685.0,Documentation,23,2,
144.0,Readability,4,1,"Great choice of variable, very well structured, easy and enjoyable to read"
144.0,Correctness,4,1,"Runs very well, Very interesting proposition in the challenge tasks"
144.0,Code Elegance,4,1,Perfect use of the notion of the course and great creativity work to create a unique simulation. Very good job
144.0,Documentation,4,1,Very clear and detailed documentation
97.0,Readability,11,1,code is clean and simple to read
97.0,Correctness,11,1,unclear what the natural disasters do; they just kill the organism and doesn't change their behaviour. 
97.0,Code Elegance,11,1,Good usage of organism abstract class. animals extend prey or predator class which allows for code to not be rewritten
97.0,Documentation,11,1,documented well. every function is defined
681.0,Readability,5,2,
681.0,Correctness,5,2,
681.0,Code Elegance,5,2,
681.0,Documentation,5,2,
683.0,Readability,16,2,Generally the functions are quite consistent and functions are not excessively long. Good function and identifier names in general.
683.0,Correctness,16,2,All base tasks and some extension tasks have been completed. Documentation is provided for how each of the tasks is completed.
683.0,Code Elegance,16,2,A lot of code has been repeated through the implementation for each of the animal implementations.  It is more sensible to extract these codes and provide abstract methods to override such behavior.
683.0,Documentation,16,2,Comments for the fields generally state the obvious. Functional comments are generally ok and explain the purpose of its function. Documentation on arguments and return types is ok.
389.0,Readability,20,1,few variable names that were not meaningful.
389.0,Correctness,20,1,
389.0,Code Elegance,20,1,
389.0,Documentation,20,1,"did not add student name and number as header for each file.
some obvious comments. Some places missing comments."
684.0,Readability,19,2,
684.0,Correctness,19,2,
684.0,Code Elegance,19,2,
684.0,Documentation,19,2,
176.0,Readability,28,1,"Overall code readability is high with good property and method naming, code indentation, etc. Some access modifiers are inappropriate - for example the act() and incrementAge() behaviours in Animals are public. "
176.0,Correctness,28,1,All baseline requirements are implemented well. Some challenges are implemented but the student did not implement disease spread. The weather-influenced behaviours are interesting and creative. 
176.0,Code Elegance,28,1,"The code is well organised and for the most part, classes are well modularised and contained. I like the Animal class exposing the cold, hot, etc. behaviours. However, there is a considerable amount of repeated code which could be delegated to a common super-type for predator/prey, etc. "
176.0,Documentation,28,1,The code is very well documented across each class. The methods are described well with good JavaDoc annotations for method parameters and return types
176.0,Readability,26,1,
176.0,Correctness,26,1,
176.0,Code Elegance,26,1,
176.0,Documentation,26,1,
682.0,Readability,9,2,
682.0,Correctness,9,2,
682.0,Code Elegance,9,2,
682.0,Documentation,9,2,
389.0,Readability,17,1,"Appropriate function, class and variable names used. Indentation and general code structure is clear. Good use of self-contained classes."
389.0,Correctness,17,1,All challenge and base classes are implemented correctly to a high standard.
389.0,Code Elegance,17,1,Solid implementation of both core and challenge classes. Very appropriate approaches taken.
389.0,Documentation,17,1,"Solid use of comments and javadocs, however sometimes displays some overcommenting on lines which have obvious functionality. "
389.0,Readability,19,1,
389.0,Correctness,19,1,
389.0,Code Elegance,19,1,
389.0,Documentation,19,1,
144.0,Readability,2,1,Code is readable with good function and variable names being used
144.0,Correctness,2,1,All base tasks completed and most challenge tasks completed - Entities not influenced by weather
144.0,Code Elegance,2,1,May be useful to have superclass for preys and predators to better differentiate between them
144.0,Documentation,2,1,Generally good documenation. Comments are useful and concise
176.0,Readability,25,1,
176.0,Correctness,25,1,
176.0,Code Elegance,25,1,
176.0,Documentation,25,1,
144.0,Readability,1,1,Some whitespace inconsistencies. 
144.0,Correctness,1,1,Code is implemented well. Some challenge tasks are implemented.
144.0,Code Elegance,1,1,Class hierarchy allows addition of more organisms. Food chain class does not seem the best approach. The food chain should be able to be implied from the class hierarchy.
144.0,Documentation,1,1,Code is documented well.
358.0,Readability,14,1,"there are a few instances where naming consistency could be improved.  For example, 't'."
358.0,Correctness,14,1,
358.0,Code Elegance,14,1,
358.0,Documentation,14,1,
